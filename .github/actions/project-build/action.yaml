name: 'Project Build'
description: 'Builds OpenMod projects'
inputs:
  project_path:
    description: 'Path to project folder'
    required: true
  nuget_push:
    description: 'Push to Nuget on release?'
    required: false
    default: false
  nuget_key:
    description: 'NuGet deploy key'
    required: false
  github_token:
    description: 'GitHub token'
    required: false
  runtime_version:
    description: 'Build runtime version default linux-x64'
    required: false
    default: 'linux-x64'
outputs:
  version:
    description: "Generated version (SemVersion compatible)"
    value: ${{ steps.get-version.outputs.version }}
  is_prerelease:
    description: 'Gets if the version is a prerelease'
    value: ${{ steps.check-prerelease.outputs.is_prerelease }}
runs:
  using: "composite"
  steps:
    # Generate semver compatible version from current tag and commit hash
    - name: Create version
      id: get-version
      run: echo "version=$(git describe --tags `git rev-list --tags --max-count=1`)+$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check Prerelease
      id: check-prerelease
      run: "if ${{ contains(steps.get-version.outputs.version, '-') }}; then
              echo is_prerelease=true >> $GITHUB_OUTPUT;
            else
              echo is_prerelease=false >> $GITHUB_OUTPUT;
            fi"
      shell: bash

    # Commands that are used multiple times.
    # Placed in one place to make sure that the arguments would always be the same
    - name: Common commands
      id: common-commands
      run: |
        echo "dotnet-restore=dotnet restore \$PROJECT_PATH --runtime ${{ inputs.runtime_version }}" >> $GITHUB_OUTPUT
        echo "dotnet-build=dotnet build \$PROJECT_PATH --configuration Release --no-restore -p:Version=${{ steps.get-version.outputs.version }} -p:PackageVersion=${{ steps.get-version.outputs.version }} -p:InformationalVersion=${{ steps.get-version.outputs.version }} --runtime ${{ inputs.runtime_version }}" >> $GITHUB_OUTPUT
        echo "dotnet-test=dotnet test \$PROJECT_PATH --configuration Release --no-restore --no-build --runtime ${{ inputs.runtime_version }}" >> $GITHUB_OUTPUT
      shell: bash

    # Install dependencies (this needs to be a separate step from build for caching)
    - name: Install dependencies
      run: |
        ${{ steps.common-commands.outputs.dotnet-restore }}
        pwsh -File .github/actions/project-build/run-command-for-every-tests-project.ps1 "$PROJECT_PATH" '${{ steps.common-commands.outputs.dotnet-restore }}'
      env:
        PROJECT_PATH: ${{ inputs.project_path }} # Used by commands in `common-commands` step
      shell: bash

    # Build project
    - name: Build
      run: |
        ${{ steps.common-commands.outputs.dotnet-build }}
        pwsh -File .github/actions/project-build/run-command-for-every-tests-project.ps1 "$PROJECT_PATH" '${{ steps.common-commands.outputs.dotnet-build }}'
      env:
        PROJECT_PATH: ${{ inputs.project_path }} # Used by commands in `common-commands` step
      shell: bash

    # Test project
    - name: Test
      run: |
        pwsh -File .github/actions/project-build/run-command-for-every-tests-project.ps1 "$PROJECT_PATH" '${{ steps.common-commands.outputs.dotnet-test }}'
      env:
        PROJECT_PATH: ${{ inputs.project_path }} # Used by commands in `common-commands` step
      shell: bash

    # Push to GitHub packages on each commit and release
    - name: Push to NuGet (Nightly)
      if: |
        inputs.nuget_push == 'true' && (github.event_name == 'push' || 
        github.event_name == 'create' && github.event.ref_type == 'tag')
      run: dotnet nuget push ${{ inputs.project_path }}/bin/Release/*.nupkg --api-key ${{ inputs.github_token }} --skip-duplicate --source https://nuget.pkg.github.com/openmod/index.json;
      shell: bash

    # Push to NuGet on each tag, but only if the tag is not a pre-release version
    - name: Push to NuGet (Release)
      if: |
        inputs.nuget_push == 'true' && steps.check-prerelease.outputs.is_prerelease == 'false' &&  
        github.event_name == 'create' && github.event.ref_type == 'tag'
      run: dotnet nuget push ${{ inputs.project_path }}/bin/Release/*.nupkg --api-key ${{ inputs.nuget_key }} --skip-duplicate --source https://api.nuget.org/v3/index.json;
      shell: bash
