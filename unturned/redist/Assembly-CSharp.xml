<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="M:SDG.Unturned.GlazierUtils_IMGUI.drawLabelOutline(UnityEngine.Rect,UnityEngine.GUIContent,SDG.Unturned.ETextContrastStyle,System.Single)">
            <summary>
            Helper for drawing label outline/shadow so that we can easily change it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierUtils_IMGUI.drawLabelOutline(UnityEngine.Rect,System.String,SDG.Unturned.ETextContrastStyle,System.Single)">
            <summary>
            Helper for drawing label outline/shadow so that we can easily change it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekWebImage.useImageDimensions">
            <summary>
            If true, SizeOffset_X and SizeOffset_Y are used when image is available.
            Defaults to false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekWebImage.maxImageDimensionsWidth">
            <summary>
            If useImageDimensions is on and image width exceeds this value, scale down
            respecting aspect ratio.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekWebImage.maxImageDimensionsHeight">
            <summary>
            If useImageDimensions is on and image height exceeds this value, scale down
            respecting aspect ratio.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGlassesAsset.isNightvisionAllowedInThirdPerson">
            <summary>
            If true, NVGs work in third-person, not just first-person.
            Defaults to false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NetInvokableGeneratedClassAttribute.targetType">
            <summary>
            Type the annotated class was generated for.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NetInvokableGeneratedMethodAttribute.targetMethodName">
            <summary>
            Method the annotated method was generated for.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NetPakBlockImplementation">
            <summary>
            Exposes the same API as the older Block class used by existing netcode, but implemented using new bit reader/writer. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.GrantPackagePromo.RequestRealtime">
            <summary>
            Last realtime a request was sent.
            Used to rate-limit clientside.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GrantPackagePromo.CheckRateLimit">
            <summary>
            Perform rate limiting and update timestamp.
            </summary>
            <returns>True if we can proceed with request.</returns>
        </member>
        <member name="M:SDG.Unturned.GrantPackagePromo.IsEligible">
            <summary>
            Do we think the local player is eligible to send request?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ZombieManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieManager.getDifficultyInBound(System.Byte)">
            <summary>
            Find difficulty asset (if valid) for navigation bound index.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ZombieManager.ZombieSpecialityWeightedRandom">
            <summary>
            Could potentially be reused generically.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieManager.getReplacementSpawnpointInBound(System.Byte)">
            <summary>
            When zombie falls outside the map it needs a replacement spawnpoint within the same navmesh area.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieManager.teleportZombieBackIntoMap(SDG.Unturned.Zombie)">
            <summary>
            Find replacement spawnpoint for a zombie and teleport it there.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieManager.onDayNightUpdated(System.Boolean)">
            <summary>
            Kills night-only zombies at dawn. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingColor.CUSTOM_OVERRIDE">
            <summary>
            Used by weather assets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelVolume`2.falloffDistance">
            <summary>
            Distance inward from edge before intensity reaches 100%.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.IsPositionInsideVolumeWithAlpha(UnityEngine.Vector3,System.Single@)">
            <summary>
            Alpha is 0.0 outside volume and 1.0 inside inner volume.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetBoxSize">
            <summary>
            World space size of the box.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetBoxExtents">
            <summary>
            Half the world space size of the box.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetInnerBoxSize">
            <summary>
            World space size of inner falloff box when falloffDistance is non-zero.
            For example a 24x12x6 box with a falloff of 4 has an inner box sized 16x4x0.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetInnerBoxExtents">
            <summary>
            World space extents of inner falloff box when falloffDistance is non-zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetLocalInnerBoxSize">
            <summary>
            Local space size of inner falloff box when falloffDistance is non-zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetLocalInnerBoxExtents">
            <summary>
            Local space extents of inner falloff box when falloffDistance is non-zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetSphereRadius">
            <summary>
            World space radius of the sphere.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetLocalSphereRadius">
            <summary>
            Local space radius of the sphere.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetWorldSpaceInnerSphereRadius">
            <summary>
            World space radius of inner falloff sphere when falloffDistance is non-zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.GetLocalInnerSphereRadius">
            <summary>
            Local space radius of inner falloff sphere when falloffDistance is non-zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.CalculateWorldBounds">
            <summary>
            Useful for code which previously depended on creating the Unity collider to calculate bounding box.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVolume`2.UpdateEditorVisibility(SDG.Unturned.ELevelVolumeVisibility)">
            <summary>
            Called in the level editor during registraion and when visibility is changed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelVolume`2.editorGameObject">
            <summary>
            Editor-only solid/opaque child mesh renderer object.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelVolume`2.forceShouldAddCollider">
            <summary>
            If true during Awake the collider component will be added.
            Otherwise only in the level editor. Some volume types like water use the collider in gameplay,
            whereas most only need the collider for general-purpose selection in the level editor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Items.checkSpaceEmpty(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            checks whether a space contains any filled slots
        </member>
        <member name="M:SDG.Unturned.Items.checkSpaceDrag(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            checks whether an item can be dragged and takes into account if the item overlaps its old self
        </member>
        <member name="M:SDG.Unturned.Items.checkSpaceSwap(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            checks whether the spot currently used by the old item is big enough to fit the new item
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleThirdPersonCameraMode.RotationDetached">
            <summary>
            Camera does not rotate when the car rotates.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleThirdPersonCameraMode.RotationAttached">
            <summary>
            Camera rotates when the car rotates.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDamageFlinchMode.RollOnly">
            <summary>
            If hit from the left view rolls right, if hit from the right view rolls left. This may reduce motion
            sickness for some players.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDamageFlinchMode.Directional">
            <summary>
            Rotate on all axes according to damage direction. This may induce motion sickness.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.SAVEDATA_VERSION_ADDED_HITMARKER_STYLE_FIX">
            <summary>
            Unfortunately the version which added hitmarker style saved but didn't actually load (sigh).
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.SAVEDATA_VERSION_RESET_VOICE_ALWAYS_RECORDING">
            <summary>
            Nelson 2023-12-28: this option was causing players to crash in the 3.23.14.0 update. Hopefully
            it's resolved for the patch, but to be safe it will default to false.
            </summary>
        </member>
        <member name="M:SDG.Unturned.OptionsSettings.GetZoomBaseFieldOfView">
            <summary>
            Prior to 3.22.8.0 all scopes/optics had a base fov of 90 degrees.
            </summary>
        </member>
        <member name="P:SDG.Unturned.OptionsSettings.VoiceAlwaysRecording">
            <summary>
            If false, call Start and Stop recording before and after push-to-talk key is pressed. This was the
            original default behavior, but causes a hitch for some players. As a workaround we can always keep
            the microphone rolling and only send data when the push-to-talk key is held. (public issue #4248)
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.shouldNametagFadeOut">
            <summary>
            If true, group member name labels fade out when near the center of the screen.
            Defaults to true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.hitmarkerStyle">
            <summary>
            Controls whether hitmarkers are animated outward (newer) or just a static image ("classic"). 
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.vehicleThirdPersonCameraMode">
            <summary>
            Determines how camera follows vehicle in third-person view.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.vehicleAircraftThirdPersonCameraMode">
            <summary>
            Determines how camera follows aircraft vehicle in third-person view.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.flashbangBrightness">
            <summary>
            [0, 1] Blend factor between black and flashbang's desired color.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.cameraShakeIntensity">
            <summary>
            [0, 1] Multiplier for shake from <see cref="F:SDG.Unturned.EffectAsset.cameraShakeMagnitudeDegrees"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.damageFlinchMode">
            <summary>
            Controls whether camera is constrained to roll-only or all axes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.damageFlinchIntensity">
            <summary>
            Multiplier for flinch away from damage source in <see cref="M:SDG.Unturned.PlayerLook.FlinchFromDamage(System.Byte,UnityEngine.Vector3)"/>.
            </summary>
        </member>
        <member name="E:SDG.Unturned.OptionsSettings.OnCustomColorsChanged">
            <summary>
            Invoked when custom UI colors are set.
            </summary>
        </member>
        <member name="E:SDG.Unturned.OptionsSettings.OnThemeChanged">
            <summary>
            Invoked when dark/light theme is set.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.onlineSafetyMenuProceedCount">
            <summary>
            Number of times the player has clicked "Proceed" in the online safety menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.wantsToHideOnlineSafetyMenu">
            <summary>
            If true, "don't show again" is checked in the online safety menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OptionsSettings.didProceedThroughOnlineSafetyMenuThisSession">
            <summary>
            Prevents menu from being shown twice without a restart.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerSkills.OnExperienceChanged_Global">
            <summary>
            Invoked after any player's experience value changes (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerSkills.OnReputationChanged_Global">
            <summary>
            Invoked after any player's reputation value changes (not including loading).
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerSkills.TryParseIndices(System.String,System.Int32@,System.Int32@)">
            <summary>
            Ugly hack for the awful skills enums. Eventually skills should be replaced.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerSkills.ServerUnlockAllSkills">
            <summary>
            Set every level to max and replicate.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerSkills.applyDefaultSkills">
            <summary>
            Serverside only.
            Called when skills weren't loaded (no save, or in arena mode), as well as when reseting skills after death.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SleekItem.SetIsDragItem">
            <summary>
            Set this item as the dragging preview.
            </summary>
        </member>
        <member name="T:SDG.Unturned.StandardShaderUtils">
            <summary>
            Standard shader mode changes are based on built-in StandardShaderGUI.cs 
            </summary>
        </member>
        <member name="M:SDG.Unturned.StandardShaderUtils.isNameStandard(System.String)">
            <summary>
            Does shader name match any of the standard shaders?
            Standard, StandardSpecular and the Unturned "Decalable" variants all share nearly identical parameters.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StandardShaderUtils.fixupEmission(UnityEngine.Material)">
            <summary>
            Based on fixup routine in StandardShaderGUI SetMaterialKeywords.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StandardShaderUtils.maybeFixupMaterial(UnityEngine.Material)">
            <summary>
            Conditionally fixup older standard materials.
            </summary>
            <returns>True if material was edited.</returns>
        </member>
        <member name="T:SDG.Unturned.MasterBundleSearchFilter">
            <summary>
            Parses mb:X from input string and filters assets using X master bundle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardCraftingUI.filteredBlueprintsOverride">
            <summary>
            Used by inventory item context menu to override which blueprints are shown.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeManager.SAVEDATA_VERSION_INCLUDE_BUILD_ENUM">
            <summary>
            Barricade asset's EBuild included in saves to fix state length problems. (public issue #3725)
            </summary>
        </member>
        <member name="P:SDG.Unturned.BarricadeManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="P:SDG.Unturned.BarricadeManager.BarricadeRegions">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeManager.internalVehicleRegions">
            <summary>
            Writable list of vehicle regions. Public add/remove methods should not be necessary.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.destroyBarricade(SDG.Unturned.BarricadeDrop,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Remove barricade instance on server and client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.sendHealthChanged(System.Byte,System.Byte,System.UInt16,SDG.Unturned.BarricadeDrop)">
            <summary>
            Used by ownership change and damaged event to tell relevant clients the new health.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.dropBarricade(SDG.Unturned.Barricade,UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single,System.Single,System.UInt64,System.UInt64)">
            <summary>
            Legacy function for UseableBarricade.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.dropBarricadeIntoRegionInternal(SDG.Unturned.BarricadeRegion,SDG.Unturned.Barricade,UnityEngine.Vector3,UnityEngine.Quaternion,System.UInt64,System.UInt64)">
            <summary>
            Common code between dropping barricade onto vehicle or into world.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.dropPlantedBarricade(UnityEngine.Transform,SDG.Unturned.Barricade,UnityEngine.Vector3,UnityEngine.Quaternion,System.UInt64,System.UInt64)">
            <summary>
            Spawn a new barricade attached to a vehicle and replicate it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.dropNonPlantedBarricade(SDG.Unturned.Barricade,UnityEngine.Vector3,UnityEngine.Quaternion,System.UInt64,System.UInt64)">
            <summary>
            Spawn a new barricade and replicate it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.ReceiveDestroyBarricade(SDG.Unturned.ClientInvocationContext@,SDG.Unturned.NetId)">
            <summary>
            Not an instance method because structure might not exist yet, in which case we cancel instantiation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.clearPlants">
            <summary>
            Clean up before loading vehicles.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.waterPlant(UnityEngine.Transform)">
            <summary>
            Register a new vehicle as a valid parent for barricades.
            Each train car is registered after the root of the train.
            Note: Nobody knows why these are called plants.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.uprootPlant(UnityEngine.Transform)">
            <summary>
            Called before destroying a vehicle GameObject because storage needed to be ManualDestroyed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.SendVehicleRegions(SDG.Unturned.SteamPlayer)">
            <summary>
            Send all vehicle-mounted barricades to client.
            Called after sending vehicles so all plant indexes will be valid.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.updateState(UnityEngine.Transform,System.Byte[],System.Int32)">
            <summary>
            Original server-only version that does not replicate changes to clients.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.updateReplicatedState(UnityEngine.Transform,System.Byte[],System.Int32)">
            <summary>
            Only used by plugins. Replicates state change to clients.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeManager.ClearNetworkStuff">
            <summary>
            Not ideal, but there was a problem because onLevelLoaded was not resetting these after disconnecting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeManager.pool">
            <summary>
            Maps prefab unique id to inactive list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeManager.MIN_INSTANTIATIONS_PER_FRAME">
            <summary>
            Instantiate at least this many barricades per frame even if we exceed our time budget.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeManager.YAW_BIT_COUNT">
            <summary>
            Sending yaw only costs 1 bit (flag) plus yaw bits, so compared to the old 24-bit rotation we may as well
            make it high-precision. Quaternion mode uses 1+27 bits!
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeManager.NETIDS_PER_BARRICADE">
            <summary>
            +0 = BarricadeDrop
            +1 = root transform
            +2 = Interactable (if exists)
            </summary>
        </member>
        <member name="P:SDG.Unturned.ZombieTable.tableUniqueId">
            <summary>
            ID unique to this zombie table in the level. If this table is deleted the ID will not be recycled. Used to
            refer to zombie table from external files, e.g., NPC zombie kills condition.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamPlayer.battlEyeId">
            <summary>
            Not an actual Steam ID or BattlEye ID, instead this is used to map player references to and from BE.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamPlayer.IsLocalServerHost">
            <summary>
            True for offline or listen server host.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamPlayer.rpcAllowedTimes">
            <summary>
            Next time method is allowed to be called.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamPlayer.rpcHitCount">
            <summary>
            Number of times client has tried to invoke this method while rate-limited.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.GetVehicleSkinItemDefId(SDG.Unturned.InteractableVehicle,System.Int32@)">
            <summary>
            Get Steam item definition ID equipped for given vehicle.
            </summary>
            <returns>True if a skin was available.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.getDynamicEconDetails(System.UInt16,SDG.Provider.DynamicEconDetails@)">
            <summary>
            Build econ details struct from tags and dynamic_props.
            Note that details cannot be modified because it's a struct and has copies of the data.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.lag(System.Single)">
            <summary>
            Add a recent ping sample to the average ping window.
            Updates ping based on the average of several recent ping samples.
            </summary>
            <param name="value">Most recent ping value.</param>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.isMemberOfSameGroupAs(SDG.Unturned.Player)">
            <returns>True if both players exist, are both members of groups, and are both members of the same group.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.isMemberOfSameGroupAs(SDG.Unturned.SteamPlayer)">
            <returns>True if both players exist, are both members of groups, and are both members of the same group.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.getIPv4Address(System.UInt32@)">
            <summary>
            Get real IPv4 address of remote player NOT the relay server.
            </summary>
            <returns>True if address was available, and not flagged as a relay server.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.getIPv4AddressOrZero">
            <summary>
            See above, returns zero if failed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.getAddress">
            <summary>
            Get real address of remote player NOT a relay server.
            </summary>
            <returns>Null if address was unavailable.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.getAddressString(System.Boolean)">
            <summary>
            Get string representation of remote end point.
            </summary>
            <returns>Null if address was unavailable.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.GetLocalDisplayName">
            <summary>
            Players can set a "nickname" which is only shown to the members in their group.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPlayer.RequestSteamAuthTicketForWebApi(System.String)">
            <summary>
            Can be used by plugins to verify player is on a particular server.
            
            OnSteamAuthTicketForWebApiReceived will be invoked when the response is received.
            Note that the client doesn't send anything if the request to Steam fails, so plugins may wish to kick
            players if a certain amount of time passes. (e.g., if a cheat is canceling the request)
            </summary>
        </member>
        <member name="T:SDG.Unturned.TacticalLaserScale">
            <summary>
            Component for the tactical laser attachment's red dot.
            Resizes itself per-camera to maintain a constant on-screen size.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TacticalLaserScale.scalingCurve">
            <summary>
            Used to tune the scale by distance so that far away laser is not quite as comically large.
            </summary>
        </member>
        <member name="P:SDG.Unturned.EffectNode.radius">
            <summary>
            This value is confusing because in the level editor it is the normalized radius, but in-game it is the square radius.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Localization.tryRead(System.String,System.Boolean)">
            <summary>
            Load {Language}.dat and/or English.dat from folder path.
            </summary>
        </member>
        <member name="P:SDG.Unturned.EffectAsset.isMusic">
            <summary>
            If true the music option is respected when this effect is used by ambiance volume.
            </summary>
        </member>
        <member name="P:SDG.Unturned.EffectAsset.relevantDistance">
            <summary>
            In multiplayer the effect will be spawned for players within this radius.
            </summary>
        </member>
        <member name="T:SDG.Unturned.VehicleRedirectorAsset">
            <summary>
            When loaded or spawned as a vehicle, creates a different vehicle instead.
            For example, Off_Roader_Orange has ID 4. When that ID is loaded/spawned the new combined Off_Roader vehicle is
            used instead. Can also optionally apply a paint color, allowing saves to be converted without losing colors.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleRedirectorAsset.assetCategory">
            <summary>
            Redirectors are in the Vehicle category so that legacy vehicle IDs point at the redirector.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleRedirectorAsset.TargetVehicle">
            <summary>
            Vehicle to use when attempting to load or spawn this asset.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleRedirectorAsset.LoadPaintColor">
            <summary>
            If set, overrides the default random paint color when loading a vehicle from a save file.
            Used to preserve colors of vehicles in existing saves.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleRedirectorAsset.SpawnPaintColor">
            <summary>
            If set, overrides the default random paint color when spawning a new vehicle.
            Optionally used to preserve colors of vehicles in spawn tables.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerLife.OnPreDeath">
            <summary>
            Invoked prior to built-in death logic.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerLife.onPlayerDied">
            <summary>
            Event for plugins when player dies.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLife.OnRevived_Global">
            <summary>
            Invoked after player finishes respawning.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.markAggressive(System.Boolean,System.Boolean)">
            <summary>
            Tracks this player as an aggressor if they were recently an aggressor or if they haven't been attacked recently.
            </summary>
            <param name="force">Ignores rules and just make aggressive.</param>
            <param name="spreadToGroup">Whether to call markAggressive on group members.</param>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.askDamage(System.Byte,UnityEngine.Vector3,SDG.Unturned.EDeathCause,SDG.Unturned.ELimb,Steamworks.CSteamID,SDG.Unturned.EPlayerKill@,System.Boolean,SDG.Unturned.ERagdollEffect,System.Boolean,System.Boolean)">
            <param name="bypassSafezone">Should damage be dealt even while inside safezone?</param>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverSetBleeding(System.Boolean)">
            <summary>
            Set bleeding state and replicate to owner if changed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverSetLegsBroken(System.Boolean)">
            <summary>
            Set legs broken state and replicate to owner if changed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.simulatedModifyStamina(System.Int16)">
            <summary>
            Add to or subtract from stamina level.
            Does not replicate the change.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.simulatedModifyStamina(System.Single)">
            <summary>
            Add to or subtract from stamina level.
            Does not replicate the change.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.ReceiveModifyStamina(System.Int16)">
            <summary>
            Called from the server to modify stamina.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyStamina(System.Single)">
            <summary>
            Add to or subtract from stamina level on the client and server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.ReceiveModifyHallucination(System.Int16)">
            <summary>
            Called from the server to induce a hallucination.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyHallucination(System.Single)">
            <summary>
            Add to or subtract from hallucination level on the client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.simulatedModifyWarmth(System.Int16)">
            <summary>
            Add to or subtract from warmth level.
            Does not replicate the change.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.ReceiveModifyWarmth(System.Int16)">
            <summary>
            Called from the server to modify warmth.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyWarmth(System.Single)">
            <summary>
            Add to or subtract from warmth level on the client and server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.simulatedModifyOxygen(System.SByte)">
            <summary>
            Add to or subtract from oxygen level.
            Does not replicate the change.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyHealth(System.Single)">
            <summary>
            Add to or subtract from health level.
            Replicates change to owner.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyFood(System.Single)">
            <summary>
            Add to or subtract from food level.
            Replicates change to owner.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyWater(System.Single)">
            <summary>
            Add to or subtract from water level.
            Replicates change to owner.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.serverModifyVirus(System.Single)">
            <summary>
            Add to or subtract from virus level.
            Replicates change to owner.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.ServerRespawn(System.Boolean)">
            <summary>
            Used by plugins to respawn the player bypassing timers. Issue #2701
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLife.sendRevive">
            <summary>
            Used to refill all client stats like stamina
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLife.isAsphyxiating">
            <summary>
            Used by UI. True when underwater or inside non-breathable oxygen volume.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ArenaNode.radius">
            <summary>
            This value is confusing because in the level editor it is the normalized radius, but in-game it is the radius.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemTool.getItem(System.UInt16,System.UInt16,System.Byte,System.Byte[],System.Boolean,SDG.Unturned.GetStatTrackerValueHandler)">
            <summary>
            No longer used in vanilla. Kept in case plugins are using it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemTool.getItem(System.UInt16,System.UInt16,System.Byte,System.Byte[],System.Boolean,SDG.Unturned.ItemAsset,System.Collections.Generic.List{UnityEngine.Mesh},UnityEngine.Material@,SDG.Unturned.GetStatTrackerValueHandler)">
            <summary>
            No longer used in vanilla. Kept in case plugins are using it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemTool.getItem(System.UInt16,System.UInt16,System.Byte,System.Byte[],System.Boolean,SDG.Unturned.ItemAsset,System.Boolean,System.Collections.Generic.List{UnityEngine.Mesh},UnityEngine.Material@,SDG.Unturned.GetStatTrackerValueHandler)">
            <summary>
            No longer used in vanilla. Kept in case plugins are using it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemTool.InstantiateItem(System.Byte,System.Byte[],System.Boolean,SDG.Unturned.ItemAsset,SDG.Unturned.SkinAsset,System.Boolean,System.Collections.Generic.List{UnityEngine.Mesh},UnityEngine.Material@,SDG.Unturned.GetStatTrackerValueHandler,UnityEngine.GameObject)">
            <summary>
            Actual internal implementation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemTool.IsTransformAxisAligned(UnityEngine.Transform)">
            <summary>
            World to local bounds only works well for axis-aligned icons.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemTool.CalculateOrthographicSize(SDG.Unturned.ItemAsset,UnityEngine.GameObject,UnityEngine.Transform,System.Int32,System.Int32)">
            <summary>
            Unity's Camera.orthographicSize is half the height of the viewing volume. Width is calculated from aspect ratio.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWeatherStatusChange.BeginTransitionIn">
            <summary>
            Fading in.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWeatherStatusChange.EndTransitionIn">
            <summary>
            Finished fading in.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWeatherStatusChange.BeginTransitionOut">
            <summary>
            Fading out.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWeatherStatusChange.EndTransitionOut">
            <summary>
            Finished fading out.
            </summary>
        </member>
        <member name="T:SDG.Unturned.InputEx">
            <summary>
            Extensions to the built-in Input class.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InputEx.GetKey(UnityEngine.KeyCode)">
            <summary>
            Wrapper for Input.GetKey, but returns false while typing in a uGUI text field.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InputEx.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            Wrapper for Input.GetKeyDown, but returns false while typing in a uGUI text field.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InputEx.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            Wrapper for Input.GetKeyUp, but returns false while typing in a uGUI text field.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InputEx.ConsumeKeyDown(UnityEngine.KeyCode)">
             <summary>
             Should be used anywhere that Input.GetKeyDown opens a UI.
            
             Each frame one input event can be consumed. This is a hack to prevent multiple UI-related key presses from
             interfering during the same frame. Only the first input event proceeds, while the others are ignored.
             </summary>
             <returns>True if caller should proceed, false otherwise.</returns>
        </member>
        <member name="P:SDG.Unturned.InputEx.NormalizedMousePosition">
            <summary>
            Get mouse position in viewport coordinates where zero is the bottom left and one is the top right.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDeadzoneType.DefaultRadiation">
            <summary>
            Original type on the Russia map which requires a mask with filters.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDeadzoneType.FullSuitRadiation">
            <summary>
            Requires a mask with filters and full body suit.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IDeadzoneNode.UnprotectedDamagePerSecond">
            <summary>
            Damage dealt to players while inside the volume if they *don't* have clothing matching the deadzone type.
            Could help prevent players from running in and out to grab a few items without dieing.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IDeadzoneNode.ProtectedDamagePerSecond">
            <summary>
            Damage dealt to players while inside the volume if they *do* have clothing matching the deadzone type.
            For example, an area could be so dangerous that even with protection they take a constant 0.1 DPS.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IDeadzoneNode.UnprotectedRadiationPerSecond">
            <summary>
            Virus damage to players while inside the volume if they *don't* have clothing matching the deadzone type.
            Defaults to 6.25 to preserve behavior from before adding this property.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IDeadzoneNode.MaskFilterDamagePerSecond">
            <summary>
            Rate of depletion from gasmask filter's quality/durability.
            Defaults to 0.4 to preserve behavior from before adding this property.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DeadzoneNode.radius">
            <summary>
            This value is confusing because in the level editor it is the normalized radius, but in-game it is the square radius.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DeadzoneNode.UnprotectedDamagePerSecond">
            <summary>
            Nelson 2024-06-10: Added this property after nodes were converted to volumes. i.e., only old levels from
            before this property were added still have nodes, so it's expected that they won't deal damage over time.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DeadzoneNode.ProtectedDamagePerSecond">
            <summary>
            Same description as <see cref="P:SDG.Unturned.DeadzoneNode.UnprotectedDamagePerSecond"/>.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DeadzoneNode.UnprotectedRadiationPerSecond">
            <summary>
            Same description as <see cref="P:SDG.Unturned.DeadzoneNode.UnprotectedDamagePerSecond"/>.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DeadzoneNode.MaskFilterDamagePerSecond">
            <summary>
            Same description as <see cref="P:SDG.Unturned.DeadzoneNode.UnprotectedDamagePerSecond"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamGameServerNetworkingUtils.getIPv4Address(Steamworks.CSteamID,System.UInt32@)">
            <summary>
            Get real IPv4 address of remote player NOT the relay server.
            </summary>
            <returns>True if address was available, and not flagged as a relay server.</returns>
        </member>
        <member name="M:SDG.Unturned.SteamGameServerNetworkingUtils.getIPv4AddressOrZero(Steamworks.CSteamID)">
            <summary>
            See above, returns zero if failed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.BuildRequestManager">
            <summary>
            When placing structures that snap to grid multiple requests can come
            in to the server at the same time, and checking overlaps against structures
            can be problematic, so as a backup we track pending build requests
            and cancel ones which conflict.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BuildRequestManager.registerPendingBuild(UnityEngine.Vector3)">
            <summary>
            Register a location as having something built there soon.
            </summary>
            <returns>Unique handle to later finish the request.</returns>
        </member>
        <member name="M:SDG.Unturned.BuildRequestManager.canBuildAt(UnityEngine.Vector3,System.Int32)">
            <summary>
            Is a location available to build at (i.e. no pending builds)?
            </summary>
            <returns>False if there are any outstanding build requests for given location.</returns>
        </member>
        <member name="M:SDG.Unturned.BuildRequestManager.finishPendingBuild(System.Int32@)">
            <summary>
            Notify that a previously registered build has been completed.
            </summary>
            <param name="handle">Unique handle.</param>
        </member>
        <member name="T:SDG.Unturned.SpawnTableReward">
            <summary>
            Nelson 2023-08-11: this probably should be rewritten a bit if used in the future
            because the error context currently assumes this is an item reward for consumables.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableReward.grantItems(SDG.Unturned.Player,SDG.Unturned.EItemOrigin,System.Boolean)">
            <summary>
            Resolve table as items and grant random number to player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableReward.grantItems(SDG.Unturned.Player,SDG.Unturned.EItemOrigin,System.Boolean,System.Single)">
            <summary>
            Resolve table as items and grant random number to player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableReward.spawn">
            <summary>
            Enumerate random number of valid assetIDs.
            </summary>
        </member>
        <member name="T:SDG.Unturned.BbCodeWidgetConverter">
            <summary>
            Converts Steam BBcode tokens into widgets displayable using Glazier UI.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Skill.max">
            <summary>
            Vanilla maximum level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Skill.maxUnlockableLevel">
            <summary>
            If set, maximum skill level attainable through gameplay.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Skill.costMultiplier">
            <summary>
            Multiplier for XP upgrade cost.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Skill.GetClampedMaxUnlockableLevel">
            <summary>
            Get maximum level, or maxUnlockableLevel if set.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SDG.Unturned.Skill.NormalizeLevel(System.Int32)" -->
        <member name="T:SDG.Unturned.IDialogueTarget">
            <summary>
            Implemented by components the player can talk with using DialogeAssets. (e.g., InteractableObjectNPC)
            </summary>
        </member>
        <member name="M:SDG.Unturned.IDialogueTarget.GetDialogueTargetWorldPosition">
            <summary>
            Used to test whether player is within range.
            Ideally, this should be removed in the future in favor of the server resetting speaker when out of range.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IDialogueTarget.GetDialogueTargetNetId">
            <summary>
            Get a net ID that can be used with GetDialogueTargetFromNetId to resolve IDialogueTarget in multiplayer.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IDialogueTarget.ShouldServerApproveDialogueRequest(SDG.Unturned.Player)">
            <summary>
            Called on server to test whether object conditions are met.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IDialogueTarget.FindStartingDialogueAsset">
            <summary>
            Called on server to find the start of conversation dialogue asset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IDialogueTarget.GetDialogueTargetDebugName">
            <summary>
            Used in error messages.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IDialogueTarget.GetDialogueTargetNameShownToPlayer(SDG.Unturned.Player)">
            <summary>
            Called on client to format in UI.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UnturnedMasterVolume">
            <summary>
            Helper wrapping Unturned's usage of AudioListener.volume, which is the master volume level.
            This makes it easier to track what controls the master volume and avoid bugs.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UnturnedMasterVolume.mutedByDedicatedServer">
            <summary>
            Is audio muted because this is a dedicated server?
            
            While dedicated server should not even be processing audio code,
            older versions of Unity in particular have issues with headless audio.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UnturnedMasterVolume.mutedByLoadingScreen">
            <summary>
            Is audio muted because loading screen is visible?
            </summary>
        </member>
        <member name="P:SDG.Unturned.UnturnedMasterVolume.preferredVolume">
            <summary>
            Player's volume multiplier from the options menu.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UnturnedMasterVolume.UnfocusedVolume">
            <summary>
            Player's unfocused volume multiplier from the options menu.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedMasterVolume.handleMainCameraAvailabilityChanged">
            <summary>
            Mute or un-mute audio depending whether camera is valid.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedMasterVolume.synchronizeAudioListener">
            <summary>
            Synchronize AudioListener.volume with Unturned's parameters.
            </summary>
        </member>
        <member name="T:SDG.Unturned.RateLimitedAction">
             <summary>
            	Note: new official code should be using per-method rate limit attribute.
             This is kept for backwards compatibility with plugins however.
            
             Timestamp for server-side rate limiting.
             </summary>
        </member>
        <member name="F:SDG.Unturned.RateLimitedAction.performedRealtime">
            <summary>
            Realtime this action was performed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.RateLimitedAction.realtimeSincePerformed">
            <summary>
            Realtime since performedRealtime.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RateLimitedAction.throttle(System.Single)">
            <summary>
            if(myRateLimit.throttle(1.0))
            	return; // less than 1s passed
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemManager.clampedItems">
            <summary>
            List of all interactable items. Originally only used to clamp their distance from the drop point to ensure
            clients can always pick them up, but now used to find items within a radius for nearby menu as well.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemManager.getItemsInRadius(UnityEngine.Vector3,System.Single,System.Collections.Generic.List{SDG.Unturned.RegionCoordinate},System.Collections.Generic.List{SDG.Unturned.InteractableItem})">
            <summary>
            Kept for plugin backwards compatibility.
            This one is problematic because on the client physics can move items between regions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemManager.findSimulatedItemsInRadius(UnityEngine.Vector3,System.Single,System.Collections.Generic.List{SDG.Unturned.InteractableItem})">
            <summary>
            Find physically simulated items within radius.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemManager.despawnItems">
            <summary>
            Despawn any old items in the current despawn region.
            </summary>
            <returns>True if the region had items to search through.</returns>
        </member>
        <member name="M:SDG.Unturned.ItemManager.respawnItems">
            <summary>
            Attempt to respawn an item in the current respawn region.
            </summary>
            <returns>True if an item was succesfully respawned.</returns>
        </member>
        <member name="M:SDG.Unturned.ItemManager.ClearNetworkStuff">
            <summary>
            Not ideal, but there was a problem because onLevelLoaded was not resetting these after disconnecting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemManager.MIN_INSTANTIATIONS_PER_FRAME">
            <summary>
            Instantiate at least this many items per frame even if we exceed our time budget.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerBookmarkComparer_NameAscending">
            <summary>
            Sort servers by name A to Z.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerBookmarkComparer_NameDescending">
            <summary>
            Sort servers by name Z to A.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.steamId">
            <summary>
            Persistent identifier for server. Relies on server assigning a Game Server Login Token (GSLT).
            i.e., servers without GSLT cannot be bookmarked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.host">
            <summary>
            IP address or DNS name to use as-is, or a web address to perform GET request.
            Servers not using Fake IP can specify just a DNS entry and a static query port.
            Servers using Fake IP are assigned random ports at startup, but can implement a web API endpoint to return
            the IP and port.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.queryPort">
            <summary>
            Steam query port. Zero for servers using Fake IP.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.name">
            <summary>
            Name updated from SteamServerAdvertisement.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.description">
            <summary>
            Short description updated from SteamServerAdvertisement.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.thumbnailUrl">
            <summary>
            Small icon updated from SteamServerAdvertisement.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerBookmarkDetails.isBookmarked">
            <summary>
            Used by UI to track whether it's been added/removed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerBookmarksManager">
            <summary>
            Allows player to save server advertisement to join again later. Semi-replacement for Steam's built-in favorites
            and history lists because as of 2024-04-26 they don't seem to work properly with Fake IP.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ServerBookmarksManager.FindBookmarkDetails(SDG.Unturned.SteamServerAdvertisement)">
            <returns>details if advertisement is bookmarked.</returns>
        </member>
        <member name="M:SDG.Unturned.ServerBookmarksManager.AddBookmark(SDG.Unturned.ServerBookmarkDetails)">
            <summary>
            Restore a removed bookmark.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DedicatedWorkshopUpdateMonitorFactory">
            <summary>
            Static functions for creating monitor instance on server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitorFactory.createForLevel(SDG.Unturned.LevelInfo)">
            <summary>
            Entry point called by dedicated server after loading level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitorFactory.createDefaultForLevel(SDG.Unturned.LevelInfo)">
            <summary>
            Create vanilla update monitor that watches for changes to workshop level file and any other mods.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitorFactory.getCachedInitialTimestamp(Steamworks.PublishedFileId_t,System.UInt32@)">
            <summary>
            Helper to get updated timestamp from workshop items loaded by DedicatedUGC.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitorFactory.createMonitoredItem(Steamworks.PublishedFileId_t,SDG.Unturned.DedicatedWorkshopUpdateMonitor.MonitoredItem@)">
            <summary>
            Helper to create monitored item for use with default DedicatedWorkshopUpdateMonitor implementation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitorFactory.createMonitoredItemForLevel(SDG.Unturned.LevelInfo,SDG.Unturned.DedicatedWorkshopUpdateMonitor.MonitoredItem@)">
            <summary>
            For use with default DedicatedWorkshopUpdateMonitor implementation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ListExtension.GetRandomIndex``1(System.Collections.Generic.List{``0})">
            <summary>
            Get index within bounds assuming list is not empty.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ListExtension.AddDefaulted``1(System.Collections.Generic.List{``0})">
            <summary>
            Add a new item using its default constructor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ShaderConsolidator.findConsolidatedShader(UnityEngine.Shader)">
            <summary>
            Apply shader name redirects until a final name is found,
            and then load shader for compatible version of Unity.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ShaderConsolidator.redirectShaderName(System.String)">
            <summary>
            Apply shader name redirects until a final name is found.
            Used to fix renamed shaders loaded from old asset bundles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ShaderConsolidator.SHADER_REDIRECTS">
            <summary>
            Names of older shaders mapped to their renamed counterparts.
            Used to fix shaders loaded from old asset bundles.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerSavedata.deleteFolder(SDG.Unturned.SteamPlayerID)">
            <summary>
            Delete all savedata folders for player's characters.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.attackAnimVariantsCount">
            <summary>
            Number of Attack_# animations.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.eatAnimVariantsCount">
            <summary>
            Number of Eat_# animations.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.glanceAnimVariantsCount">
            <summary>
            Number of Glance_# animations.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.startleAnimVariantsCount">
            <summary>
            Number of Startle_# animations.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.horizontalAttackRangeSquared">
            <summary>
            Maximum distance on the XZ plane.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.horizontalVehicleAttackRangeSquared">
            <summary>
            Maximum distance on the XZ plane when attacking vehicles.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.verticalAttackRange">
            <summary>
            Maximum distance on the Y axis.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AnimalAsset.attackInterval">
            <summary>
            Minimum seconds between attacks.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AnimalAsset.shouldPlayAnimsOnDedicatedServer">
            <summary>
            Temporary until something better makes sense? For Spyjack.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EditorAssetRedirector">
            <summary>
            Allows mappers to bulk replace assets by listing pairs in a text file.
            https://github.com/SmartlyDressedGames/Unturned-3.x-Community/issues/2275
            </summary>
        </member>
        <member name="T:SDG.Unturned.MenuMapVisibility">
            <summary>
            Component in the root Menu scene.
            Additively loads decoration levels without modifying main scene.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MenuMapVisibility.HelperClass">
            <summary>
            Prevents static member from being initialized during MonoBehaviour construction. (Unity warning)
            </summary>
        </member>
        <member name="T:SDG.Unturned.InteractableObjectTriggerableBase">
            <summary>
            Nelson 2024-02-06: when looking into resolving public issue #3703 I figured since there is a common behavior
            between InteractableObjectQuest, InteractableObjectNote, and InteractableObjectDropper (in that they all
            request the server to do X we may as well support a "mod hook" that works with all three.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemSightAsset.zoom">
            <summary>
            Factor e.g. 2 is a 2x multiplier.
            Prior to 2022-04-11 this was the target field of view. (90/fov)
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemSightAsset.thirdPersonZoomFactor">
            <summary>
            Zoom factor used in third-person view.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSightAsset.shouldZoomUsingEyes">
            <summary>
            Whether main camera field of view should zoom without scope camera / scope overlay.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSightAsset.shouldOffsetScopeOverlayByOneTexel">
            <summary>
            If true, scale scope overly by 1 texel to keep "middle" pixel centered.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSightAsset.DistanceMarker.lineOffset">
            <summary>
            [0, 1] local distance from center to start of line.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSightAsset.DistanceMarker.lineWidth">
            <summary>
            [0, 1] local width of horizontal line.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSightAsset.DistanceMarker.side">
            <summary>
            Whether line/number are on left or right side of the center line.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSightAsset.DistanceMarker.hasLabel">
            <summary>
            If true, text label for distance is visible.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Passenger.turretEventHook">
            <summary>
            Optional component on Turret_# GameObject for modding UnityEvents.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Passenger.collider">
            <summary>
            Optional collider matching the player capsule to prevent short vehicles (e.g. bikes) from clipping into walls.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekItemStoreMainMenuButton">
            <summary>
            Displays a single random item. Placed under the other main menu buttons.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SleekItemIcon.Clear">
            <summary>
            Hide existing icon until refresh.
            Experimented with doing this for every refresh, but it looks bad in particular for hotbar.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IContentReference.name">
            <summary>
            Name of the asset bundle.
            </summary>
            <example>core.content</example>
        </member>
        <member name="P:SDG.Unturned.IContentReference.path">
            <summary>
            Path within the asset bundle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.BLOCK_STANCE">
            <summary>
            Used to test whether player can fit in a space.
            Includes terrain because tested capsule could be slightly underground, and clip to prevent exploits at sky limit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.BLOCK_VEHICLECAM">
            <summary>
            Used for third-person camera in vehicle.
            Does not include resource layer because attached barricades are put on that layer.
            Barricades layer itself is included to prevent looking inside player bases.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.BLOCK_ENTRY">
            <summary>
            Used to test whether player can enter a vehicle.
            Does not include resource layer because attached barricades are put on that layer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.EFFECT_SPLATTER">
            <summary>
            2023-02-02: adding more layers since splatter can be attached to them now.
            parent should only be set if that system also calls ClearAttachments, otherwise attachedEffects will leak memory.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.CHARACTER_CONTROLLER_MOVE">
            <summary>
            Layer mask for CharacterController overlap test.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.CHARACTER_CONTROLLER_MOVE_IGNORE_GROUND">
            <summary>
            Layer mask for CharacterController overlap test while inside landscape hole volume.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RayMasks.LIGHTNING">
            <summary>
            Lightning strike raycasts from sky to ground using this layer mask.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ActivationEventHook.OnEnabled">
            <summary>
            Invoked when component is enabled and when the game object is activated.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ActivationEventHook.OnDisabled">
            <summary>
            Invoked when component is disabled and when the game object is deactivated.
            Note that if the component or game object spawn deactivated this will not be immediately invoked.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LogMessengerComponent">
            <summary>
            Allows Unity events to print messages to the log file for debugging.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LogMessengerComponent.DefaultText">
            <summary>
            Text to use when PrintInfo is invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInventory.receivedUpdateIndex">
            <summary>
            Every time the inventory changes this number is incremented.
            While a little messy, the idea is to prevent inventory checks from happening every frame.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.incrementUpdateIndex">
            <summary>
            Should be called every time something changes in the inventory.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.doesSearchNeedRefresh(System.Int32@)">
            <summary>
            Helper to prevent checking the inventory every frame for systems that don't use events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInventory.ownerHasInventory">
            <summary>
            Did owner call askInventory yet?
            Prevents duplicate tell_X RPCs from being sent to owner prior to initial sync.
            Ideally should be cleaned up with netcode refactor. (Client should not need to ask server for initial state.)
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.tryAddItemEquip(SDG.Unturned.Item,System.Byte)">
            <summary>
            Helper for tryAddItemAuto.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.checkSpaceSwap(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Given an item coordinate (page, x, y) could a new item take the place of an old (existing) item without
            overlapping other item(s) space? Always true for equipment slots (page less than SLOTS).
            For example if oldSize is (1, 2) rot 0, and newSize is (2, 1) rot 1, then they can swap.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.ReceiveSwapItem(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Swap coordinates of two existing items.
            Rotation is provided to handle differently shaped items e.g. a 1x2 item with a 2x1 item. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.sendSwapItem(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Swap coordinates of two existing items.
            Rotation is provided to handle differently shaped items e.g. a 1x2 item with a 2x1 item. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.closeDistantStorage">
            <summary>
            Called from player movement to close storage that has moved away.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.openStorage(SDG.Unturned.InteractableStorage)">
            <summary>
            Serverside open a storage crate and notify client. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.openTrunk(SDG.Unturned.Items)">
            <summary>
            Serverside grant access to car trunk storage and notify client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.closeTrunk">
            <summary>
            Serverside revoke trunk access and notify client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInventory.closeStorage">
            <summary>
            Called on both client and server, as well as by storage itself when destroyed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EServerListGoldFilter">
            <summary>
            Filter for whether the Permanent Gold Upgrade DLC is required to join a server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerListGoldFilter.Any">
            <summary>
            All servers pass the filter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerListGoldFilter.DoesNotRequireGold">
            <summary>
            Only non-gold servers pass the filter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerListGoldFilter.RequiresGold">
            <summary>
            Only gold servers pass the filter.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NpcGlobalEventHook">
            <summary>
            Can be added to any GameObject to listen for the Event NPC reward type.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NpcGlobalEventHook.EventId">
            <summary>
            *_ID configured in NPC rewards list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NpcGlobalEventHook.AuthorityOnly">
            <summary>
            If true the event will only be invoked in offline mode and on the server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NpcGlobalEventHook.OnTriggered">
            <summary>
            Invoked when NPC global event matching EventId is processed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TimerEventHook.OnTimerTriggered">
            <summary>
            Invoked when timer expires.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TimerEventHook.DefaultDuration">
            <summary>
            Number of seconds to use when SetDefaultTimer is invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TimerEventHook.DefaultLooping">
            <summary>
            Should timer loop when SetDefaultTimer is invoked?
            </summary>
        </member>
        <member name="M:SDG.Unturned.TimerEventHook.CancelTimer">
            <summary>
            Stop pending timer from triggering.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TimerEventHook.coroutine">
            <summary>
            Handle to stop the coroutine.
            </summary>
        </member>
        <member name="T:SDG.Unturned.VehicleTurretEventHook">
            <summary>
            Can be added to Vehicle Turret_# GameObject to receive events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnShotFired">
            <summary>
            Invoked when turret gun is fired.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnReloadingStarted">
            <summary>
            Invoked when turret gun begins reload sequence.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnChamberingStarted">
            <summary>
            Invoked when turret gun begins hammer sequence.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnAimingStarted">
            <summary>
            Invoked when turret gun begins aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnAimingStopped">
            <summary>
            Invoked when turret gun ends aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnAimingStarted_Local">
            <summary>
            Invoked when turret gun controlled by a local player begins aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnAimingStopped_Local">
            <summary>
            Invoked when turret gun controlled by a local player ends aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnInspectingAttachmentsStarted_Local">
            <summary>
            Invoked when turret gun controlled by a local player begins inspecting attachments.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnInspectingAttachmentsStopped_Local">
            <summary>
            Invoked when turret gun controlled by a local player ends inspecting attachments.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnPassengerAdded">
            <summary>
            Invoked when any player enters the seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnPassengerRemoved">
            <summary>
            Invoked when any player exits the seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnLocalPassengerAdded">
            <summary>
            Invoked when a locally controlled player enters the seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleTurretEventHook.OnLocalPassengerRemoved">
            <summary>
            Invoked when a locally controlled player exits the seat.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DateTimeRange.isNowWithinRange">
            <summary>
            Is client UTC time within this time range?
            </summary>
        </member>
        <member name="M:SDG.Unturned.DateTimeRange.isBackendNowWithinRange">
            <summary>
            Is server UTC time within this time range?
            </summary>
        </member>
        <member name="T:SDG.Unturned.PhysicsMaterialExtensionAsset">
            <summary>
            Adds custom data to base physics material asset.
            For example how a vanilla material should respond to custom laser guns.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableBeacon.initialParticipants">
            <summary>
            Number of players inside the navmesh when the beacon was placed.
            Clamped to 1 if ShouldScaleWithNumberOfParticipants is false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieSpeciality.DL_RED_VOLATILE">
            <summary>
            Crossover from Dying Light. Only spawns during night. Explodes into fire at dawn.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieSpeciality.DL_BLUE_VOLATILE">
            <summary>
            Crossover from Dying Light. Only spawns during night. Explodes into fire at dawn.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieSpeciality.BOSS_ELVER_STOMPER">
            <summary>
            Elver endgame boss with reduced bullet damage and wind zombie stomping attacks.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieSpeciality.BOSS_KUWAIT">
            <summary>
            Kuwait final boss with increased rock throwing, damage players inside vehicle (turrets), and flashbangs.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieSpeciality.BOSS_BUAK_ELECTRIC">
            <summary>
            Buak boss types have a red-eyed flashbang effect.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieSpecialityExtension.IsDLVolatile(SDG.Unturned.EZombieSpeciality)">
            <summary>
            Is this one of the Dying Light volatile zombies? Only spawns during night. Explodes into fire at dawn.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieSpecialityExtension.IsBoss(SDG.Unturned.EZombieSpeciality)">
            <summary>
            Does this have the BOSS_* prefix?
            </summary>
        </member>
        <member name="M:SDG.Unturned.TransformRecursiveFind.FindChildRecursiveWithExclusion(UnityEngine.Transform,System.String,UnityEngine.Transform)">
            <summary>
            Same as FindChildRecursive, but skip specific child.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TextDebug">
            <summary>
            Editor-only helper to read all text/dialogue.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SkinAsset.lightingTime">
            <summary>
            Used by dawn and dusk skins which pull per-level lighting colors.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SkinAsset.SetMaterialProperties(UnityEngine.Material)">
            <summary>
            Note: unfortunately it appears the stupid skin system always instantiated materials, but never destroys
            them... will need to clean this up, but it will be tricky because the game does not hold a reference to them.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SkinAsset.specialAudioOverride">
            <summary>
            Used by melee skins to override impact sound.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CraftingBlacklistAsset">
            <summary>
            Restricts which items can be crafted.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CraftingBlacklistAsset.inputItems">
            <summary>
            Restrict blueprints that consume these items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CraftingBlacklistAsset.outputItems">
            <summary>
            Restrict blueprints that generate these items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CraftingBlacklistAsset.allowCoreBlueprints">
            <summary>
            If false, blueprints on vanilla/core/built-in items are not allowed. Defaults to true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CraftingBlacklistAsset.blueprints">
            <summary>
            Restrict specific blueprints.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.SAVEDATA_VERSION_INITIAL">
            <summary>
            Version before named version constants were introduced. (2023-11-07)
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.onDayNightUpdated_ModHook">
            <summary>
            Delegate not reset when level reset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.onMoonUpdated_ModHook">
            <summary>
            Delegate not reset when level reset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.onRainUpdated_ModHook">
            <summary>
            Delegate not reset when level reset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.onSnowUpdated_ModHook">
            <summary>
            Delegate not reset when level reset.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LightingManager.DateCounter">
            <summary>
            Number of in-game days this world has run.
            Incremented each time night ends.
            Saved between sessions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.EScheduledWeatherStage.None">
            <summary>
            Weather has not been decided yet. Level might not have any enabled.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.EScheduledWeatherStage.Forecast">
            <summary>
            Weather has been forecast. Timer counts down until activation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.EScheduledWeatherStage.Active">
            <summary>
            Weather is now active. Timer counts down until deactivation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.EScheduledWeatherStage.PerpetuallyActive">
            <summary>
            Weather is active. Will not deactivate naturally.
            Prevents loaded perpetual weather from deactivating.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.schedulableWeathers">
            <summary>
            Determines which weather can naturally be scheduled in this level.
            Includes default rain and snow for older levels.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.scheduledWeatherForecastTimer">
            <summary>
            Seconds until weather activates.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.scheduledWeatherActiveTimer">
            <summary>
            Seconds until weather deactivates.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LightingManager.scheduledWeatherRef">
            <summary>
            Forecast or active weather.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LightingManager.ActivatePerpetualWeather(SDG.Unturned.WeatherAssetBase)">
            <summary>
            Set weather active and disable scheduling.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LightingManager.ForecastWeatherImmediately(SDG.Unturned.WeatherAssetBase)">
            <returns>True if given weather has config.</returns>
        </member>
        <member name="M:SDG.Unturned.LightingManager.ResetScheduledWeather">
            <summary>
            Cancel scheduled weather and re-evaluate on next update.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LightingManager.DisableWeather">
            <summary>
            Cancel active weather and prevent next weather from being scheduled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LightingManager.levelWeatherOverride">
            <summary>
            Get weather override for the currently loaded level.
            Warning: this is kept for backwards compatibility, whereas newer maps will set LevelAsset.perpetualWeather.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LightingManager.InitSchedulableWeathers">
            <summary>
            Assign schedulableWeathers array according to level asset or legacy lighting settings.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LightingManager.InitPerpetualWeather">
            <returns>True if perpetual weather was enabled, false otherwise.</returns>
        </member>
        <member name="T:SDG.Unturned.Rk4Spring2">
            <summary>
            Thanks to Glenn Fiedler for this RK4 implementation article:
            https://gafferongames.com/post/integration_basics/
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring2.stiffness">
            <summary>
            Higher values return to the target position faster.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring2.damping">
            <summary>
            Higher values reduce bounciness and settle at the target position faster.
            e.g. a value of zero will bounce back and forth for a long time (indefinitely?)
            </summary>
        </member>
        <member name="P:SDG.Unturned.GameProject.PROJECT_PATH">
            <summary>
            Absolute path to project directory, e.g. C:/U3
            </summary>
        </member>
        <member name="T:SDG.Unturned.OxygenVolumeManager">
            <summary>
            Overrides breathability for example in a deep cave with no oxygen, or near a deep sea plant that provides oxygen.
            </summary>
        </member>
        <member name="M:SDG.Unturned.OxygenVolumeManager.IsPositionInsideBreathableVolume(UnityEngine.Vector3,System.Single@)">
            <summary>
            Find highest alpha breathable volume overlapping position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.OxygenVolumeManager.IsPositionInsideNonBreathableVolume(UnityEngine.Vector3,System.Single@)">
            <summary>
            Find highest alpha non-breathable volume overlapping position.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ExplosionParameters">
            <summary>
            Payload for the DamageTool.explode function.
            Moved into struct because the amount of arguments to that function were insane, but now is not the time to completely refactor damage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ExplosionParameters.launchSpeed">
            <summary>
            Speed to launch players away from blast position.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WeatherEventHook">
            <summary>
            Can be added to any GameObject to receive weather events:
            - Day/Night
            - Full Moon
            - Rain
            - Snow
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnDay">
            <summary>
            Invoked when night changes to day.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnNight">
            <summary>
            Invoked when day changes to night.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnFullMoonBegin">
            <summary>
            Invoked when a zombie full-moon event starts.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnFullMoonEnd">
            <summary>
            Invoked when a zombie full-moon event finishes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnRainBegin">
            <summary>
            Invoked when rain starts to fall.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnRainEnd">
            <summary>
            Invoked when rain finishes falling.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnSnowBegin">
            <summary>
            Invoked when snow starts to fall.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherEventHook.OnSnowEnd">
            <summary>
            Invoked when snow finishes falling.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DynamicWaterTransparentSortComponent">
            <summary>
            Registers renderers with DynamicWaterTransparentSort manager.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamPlayerID.characterID">
            <summary>
            In vanilla this field is ONLY used for the per-character saves on servers.
            If that changes check that it does not affect the savedata options.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPlayerID.GetHwids">
            <summary>
            20-byte SHA1 salted hashes of client's hardware ID(s).
            Providing multiple HWIDs makes it more difficult to bypass HWID bans because spoofing a single component
            only changes one of the bans. For example spoofing the MAC address will not spoof the Windows GUID.
            
            Randomized if system did not support hwid, or perhaps player is cheating.
            Should not be called on the client side, but just in case there is a default zeroed array.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamPlayerID.BypassIntegrityChecks">
            <summary>
            Ignore requests to kick me in debug mode. :)
            Steam ID may not have been authenticated yet here which may seem like a security risk, but fortunately that
            would get caught when Steam auth ticket response is received.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamPlayerID.hwids">
            <summary>
            Array of 20-byte SHA1 hashes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureDrop.ReceiveTransformRequest(SDG.Unturned.ServerInvocationContext@,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Not using rate limit attribute because this is potentially called for hundreds of structures at once,
            and only admins will actually be allowed to apply the transform.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureDrop.FindByRootFast(UnityEngine.Transform)">
            <summary>
            See BarricadeRegion.FindBarricadeByRootFast comment.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureDrop.FindByTransformFastMaybeNull(UnityEngine.Transform)">
            <summary>
            For code which does not know whether transform exists and/or even is part of a house.
            See BarricadeRegion.FindBarricadeByRootFast comment.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamIPAddress_tEx.TryGetIPv4Address(Steamworks.SteamIPAddress_t,System.UInt32@)">
            <summary>
            Steam APIs returned uint32 IPv4 addresses in the past, so Unturned code depends on them in some places.
            Ideally these uses should be updated for IPv6 support going forward.
            For the meantime this method converts from the new format to the old format for backwards compatibility.
            </summary>
        </member>
        <member name="T:SDG.Unturned.StaticResourceRef`1">
            <summary>
            Assets cannot be loaded from Resources during static initialization, so this reference defers the load until
            the first time user tries to use it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PropellerModel.bladeMaterial">
            <summary>
            Material on Model_0, the low-speed actual blade.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PropellerModel.motionBlurMaterial">
            <summary>
            Material on Model_1, the high-speed blurred outline.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PropellerModel.baseLocationRotation">
            <summary>
            transform's localRotation when the vehicle was instantiated.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TrainCar.rootRigidbody">
            <summary>
            Rigidbody component on the root game object.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleSkinMaterialChange.shared">
            <summary>
            If true, set sharedMaterial. If false, set material.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CrawlerTrackTilingMaterialInstance.speed">
            <summary>
            Calculated speed of this track. Used by some wheels.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.tempCollidersArray">
            <summary>
            Temporary array for use with physics queries.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.tempMaterialsList">
            <summary>
            Temporary list for gathering materials.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.instanceID">
            <summary>
            Precursor to Net ID. Should eventually become obsolete.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.id">
            <summary>
            Asset ID. Essentially obsolete at this point.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.skinOriginalMaterials">
            <summary>
            Used to restore vehicle materials when changing skin.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.roadIndex">
            <summary>
            Only used by trains. Constrains the train to this path.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.PackRoadPosition(System.Single)">
            <summary>
            Unfortunately old netcode sends train position as a Vector3 using the X channel, but new code only supports
            [-4096, 4096) so we pack the train position into all three channels. Eventually this should be cleaned up.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.batteryCharge">
            <summary>
            Nelson 2024-06-24: When first implementing batteries there was only the vanilla battery item, and it was
            fine to delete it when the charge reached zero. This may not be desirable, however, so zero now represents
            no battery item is present, and one represents the battery is completely drained but still there.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.isInsideSafezone">
            <summary>
            Is this vehicle inside a safezone?
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.timeInsideSafezone">
            <summary>
            Duration in seconds since this vehicle entered a safezone,
            or -1 if it's not in a safezone.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.isInsideNoDamageZone">
            <summary>
            Should askDamage requests currently be ignored because we are inside a safezone?
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.isEngineOn">
            <summary>
            Nelson 2024-06-24: This property is confusing, especially with isEnginePowered, but essentially represents
            starting the engine ignition when a player enters the driver's seat. If true, there's a driver, there was
            sufficient battery to start (or battery not required), and the engine wasn't underwater.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.HasBatteryWithCharge">
            <summary>
            Doesn't imply the vehicle *uses* batteries, only that it contains a battery item with some charge left.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.ContainsBatteryItem">
            <summary>
            Doesn't imply the vehicle *uses* batteries, only that it contains a (potentially uncharged) battery item.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.WasNaturallySpawned">
             <summary>
             Nelson 2024-11-13: Adding this primarily to indicate whether a vehicle was spawned by the level versus
             placed by a player or bought from a vendor. This way if the number of "naturally"-spawned vehicles is below
             a certain threshold the level can spawn more. (e.g., a server where players have hoarded a bunch of
             vendor-purchased vehicles and no default vehicles are left for new players.)
            
             Only available on the server.
             Defaults to true for old saves to prevent suddenly spawning a bunch more vehicles.
             </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.canUseTurret">
            <summary>
            Whether the player can shoot their equipped turret.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.anySeatsOccupied">
            <summary>
            Do any of the passenger seats have a player?
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.isAutoClearable">
            <summary>
            When the server saves it doesn't include any cleared vehicles.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.ReplicatedSpeed">
            <summary>
            Magnitude of rigidbody velocity, replicated by current simulation owner.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.ReplicatedForwardVelocity">
            <summary>
            Rigidbody velocity along forward axis, replicated by current simulation owner.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.ReplicatedVelocityInput">
            <summary>
            Replicated by current simulation owner. Target velocity used, e.g., for helicopter engine speed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.GetReplicatedForwardSpeedPercentageOfTargetSpeed">
            <summary>
            [0, 1] If forward velocity is greater than zero, get normalized by target forward speed. If less than zero,
            get normalized by target reverse speed. Result is always positive.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.AnimatedForwardVelocity">
            <summary>
            Animated toward ReplicatedForwardVelocity.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.AnimatedVelocityInput">
            <summary>
            Animated toward ReplicatedVelocityInput.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.ReplicatedSteeringInput">
            <summary>
            [-1.0, 1.0] Available on both client and server.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.AnimatedSteeringAngle">
            <summary>
            Animated towards replicated steering angle. Used for steering wheel and front steering column.
            Non-simulating wheels (e.g., car driven by remote client) use this as steering angle multiplied by their
            per-wheel <see cref="F:SDG.Unturned.VehicleWheelConfiguration.steeringAngleMultiplier"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.frontModelTransform">
            <summary>
            Front steering column of bicycles and motorcycles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.needsReplicationUpdate">
            <summary>
            If true, server should replicate latest state to clients.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.inputTargetVelocity">
            <summary>
            Used by several engine modes to represent an interpolated velocity target according to input.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.inputEngineVelocity">
            <summary>
            Set from inputTargetVelocity then multiplied by any factors which shouldn't affect the player's "target"
            speed ike boatTraction.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.boatTraction">
            <summary>
            Vehicles with buoyancy interpolate this value according to whether it's in the water, and multiply
            boat-related forces by it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.rootRigidbody">
            <summary>
            Rigidbody on the Vehicle prefab.
            (not called "rigidbody" because as of 2024-02-28 the deprecated "rigidbody" property still exists)
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.MarkForReplicationUpdate">
            <summary>
            Primarily for backwards compatibility with plugins. Previously, multiple "updates" could be queued per
            vehicle and sent to clients. This list was public, unfortunately, so plugins may rely on submitting vehicle
            updates. After making it obsolete each vehicle can only be flagged as needing a replication update, and
            this is reset after each server replication update.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.canPlayerRepair(SDG.Unturned.Player)">
            <summary>
            Is player currently allowed to repair this vehicle?
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.stealBattery(SDG.Unturned.Player)">
            <summary>
            Give battery item to player and set battery charge to zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.GiveBatteryItem(SDG.Unturned.Player)">
            <summary>
            Nelson 2024-06-24: Previously, this wouldn't give an item to the player if the quality was zero. Now it
            trusts the caller to validate we have a battery item to give, and respects <see cref="P:SDG.Unturned.ItemAsset.shouldDeleteAtZeroQuality"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.isTireCompatible(System.UInt16)">
            <summary>
            Can a tire item be used with this vehicle?
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.getHitTireIndex(UnityEngine.Vector3)">
            <summary>
            Find the index of the wheel collider that contains this position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.getClosestAliveTireIndex(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Find the index of the wheel collider closest to this position, or -1 if not near any.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.simulateBurnFuel">
            <summary>
            Called during simulate at fixed rate.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.checkEnter(SDG.Unturned.Player)">
            <summary>
            Is a given player allowed access to this vehicle?
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.IsFriendlyToSentry(SDG.Unturned.InteractableSentry)">
            <summary>
            If true, sentry ignores this vehicle early in target scanning.
            Friendly if locked by owner/group of sentry, or driven by owner/group of sentry.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.calculateAverageLocalTireContactPosition">
            <summary>
            Average vehicle-space position of wheel bases.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.synchronizeTaillights">
            <summary>
            Turn taillights on/off depending on state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.hasDroppedScrapItemsAlready">
            <summary>
            This check should really not be necessary, but somehow it is a recurring issue that servers get slowed down
            by something going wrong and the vehicle exploding a billion times leaving items everywhere.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.tryAddPlayer(System.Byte@,SDG.Unturned.Player)">
            <summary>
            VehicleManager expects this to only find the seat, not add the player,
            because it does a LoS check.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.forceRemoveAllPlayers">
            <summary>
            Call on the server to empty the vehicle of passengers.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.forceRemovePlayer(System.Byte@,Steamworks.CSteamID,UnityEngine.Vector3@,System.Byte@)">
            <summary>
            Kicks them out even if there isn't a good spot. Used when killing the occupant.
            </summary>
            <returns>True if player is seated, false otherwise.</returns>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.isExitable">
             <summary>
             Can a safe exit point currently be found?
            
             Called when considering to add a new passenger to prevent players from entering
             a vehicle that they wouldn't be able to exit properly.
             </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.isExitPositionEmpty(UnityEngine.Vector3)">
            <summary>
            Could a player capsule fit in a given exit position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.raycastIgnoringVehicleAndChildren(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single@)">
            <returns>True if anything was hit.</returns>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.getExitDistanceInDirection(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Raycast along a given direction, penetrating through barricades attached to THIS vehicle.
            Returns point at the end of the ray if unblocked, or a safe (radius) distance away from hit.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.getExitSpawnPoint(SDG.Unturned.Player,UnityEngine.Vector3@,System.Byte@)">
             <summary>
             Fallback if there are absolutely no good exit points.
             Sets point and angle with a normal player spawnpoint.
            
             Once vehicle is completely surrounded there is no nice way to pick an exit point. Finding
             a point upwards is abused to teleport upward into bases, finding an empty capsule nearby is
             abused to teleport through walls, so if we're sure there isn't a nice exit point we can
             fallback to teleporting them to a safe spawnpoint.
             </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.tryGetExit(System.Byte,UnityEngine.Vector3@,System.Byte@)">
            <returns>True if we can safely exit.</returns>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.forceGetExit(SDG.Unturned.Player,System.Byte,UnityEngine.Vector3@,System.Byte@)">
            <summary>
            Initially use tryGetExit to find a safe exit, but if one isn't available then fallback to getExitSpawnPoint.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.simulate(System.UInt32,System.Int32,System.Boolean,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Dedicated server simulate driving input.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.GearNumber">
            <summary>
            -1 is reverse.
            0 is neutral.
            +1 is index 0 in gear ratios list.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.ReplicatedEngineRpm">
            <summary>
            Engine RPM replicated by current simulation owner.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableVehicle.AnimatedEngineRpm">
            <summary>
            Animated toward ReplicatedEngineRpm.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.GetShiftUpGearNumber(System.Single)">
            <summary>
            Called when engine RPM exceeds threshold and there are more gears available.
            Purpose is to skip gear numbers that don't bring engine RPM within threshold (if possible).
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.GetShiftDownGearNumber(System.Single)">
            <summary>
            Called when engine RPM is below threshold and there are more lower gears available.
            Purpose is to skip gear numbers that don't bring engine RPM within threshold (if possible).
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.simulate(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Client simulate driving input.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.Update">
            <summary>
            2020-11-26 experimented with dispatching all vehicle updates from C# in VehicleManager because they make up
            a significant portion of the MonoBehaviour Update, but the savings on my PC with 24 vehicles on PEI was
            minor. Not worth the potential troubles.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.UpdateSafezoneStatus(System.Single)">
            <summary>
            Update whether this vehicle is inside a safezone.
            If a certain option is enabled, unlock after time threshold is passed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.safeInit(SDG.Unturned.VehicleAsset)">
            <summary>
            Can be called without calling init.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.gatherVehicleColliders">
            <summary>
            Called after initializing vehicle.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.ignoreCollisionWith(System.Collections.Generic.IEnumerable{UnityEngine.Collider},System.Boolean)">
            <summary>
            Makes the collision detection system ignore all collisions between this vehicle and the given colliders.
            Used to prevent vehicle from colliding with attached items.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.ignoreCollisionWithVehicle(SDG.Unturned.InteractableVehicle,System.Boolean)">
            <summary>
            Used to disable collision between skycrane and held vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.center">
            <summary>
            Transform used for exit physics queries.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.initCenterCollider">
            <summary>
            Find collider with the largest volume to use for exit physics queries.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableVehicle.ApplyDepthMaskMaterial">
            <summary>
            Set material on DepthMask child renderer responsible for hiding water when interior of vehicle is submerged.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.skinMaterialToDestroy">
            <summary>
            Skin material does not always need to be destroyed, so this is only valid if it should be destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.materialsToDestroy">
            <summary>
            Materials that should be destroyed when this vehicle is destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.waterSortHandles">
            <summary>
            Handles to unregister from DynamicWaterTransparentSort.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.paintableMaterials">
            <summary>
            Materials to set _PaintColor on.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.crawlerTrackMaterials">
            <summary>
            Materials to move UVs in sync with wheels.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.decayLastUpdateTime">
            <summary>
            Time.time decayTimer was last updated.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.decayTimer">
            <summary>
            Seconds since vehicle was interacted with.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.decayPendingDamage">
            <summary>
            Fractional damage counter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableVehicle.decayLastUpdatePosition">
            <summary>
            transform.position used to test whether vehicle is moving.
            </summary>
        </member>
        <member name="F:SDG.Unturned.StereoSongAsset.titleText">
            <summary>
            Text from *.dat localization file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.StereoSongAsset.songContentRef">
            <summary>
            Older *.content asset bundle reference. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.StereoSongAsset.songMbRef">
            <summary>
            Newer *.masterbundle reference.
            </summary>
        </member>
        <member name="P:SDG.Unturned.StereoSongAsset.linkURL">
            <summary>
            Optional URL to open in web browser.
            </summary>
        </member>
        <member name="F:SDG.Unturned.StereoSongAsset.isLoop">
            <summary>
            Whether audio source should loop.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleHelper.insertAssetBundleNameSuffix(System.String,System.String)">
            <summary>
            Append suffix to name, or if name contains a '.' insert it before.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VendorElement.outerAsset">
            <summary>
            Vendor asset that owns this buy/sell record.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierPoolTest">
            <summary>
            Used in a test scene to quickly test whether pooled components are cleaned up.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerStance.OnStanceChanged_Global">
            <summary>
            Invoked after any player's stance changes (not including loading).
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerStance.initialStance">
            <summary>
            Stance to fit available space when loading in.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.GetStealthDetectionRadius">
            <returns>Distance zombies can detect this player within.</returns>
        </member>
        <member name="P:SDG.Unturned.PlayerStance.isSubmerged">
            <summary>
            Older, cached version of areEyesUnderwater.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerStance.isAllowedToStartClimbing">
            <summary>
            Return false if there are any external restrictions (e.g. reloading, handcuffed) preventing climbing.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerStance.areFeetUnderwater">
            <summary>
            Test whether bottom of controller is currently inside a water volume.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerStance.areEyesUnderwater">
            <summary>
            Test whether viewpoint is currently inside a water volume.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerStance.isBodyUnderwater">
            <summary>
            Test whether body is currently inside a water volume.
            Enters the swimming stance while true.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.drawCapsule(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
            <summary>
            Draw debug capsule matching the player size.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.drawStandingCapsule(UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draw standing-height debug capsule matching the player size.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.hasHeightClearanceAtPosition(UnityEngine.Vector3,System.Single)">
            <summary>
            Is there enough height for our capsule at a position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.hasStandingHeightClearanceAtPosition(UnityEngine.Vector3)">
            <summary>
            Could a standing player capsule fit at the given position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.hasCrouchingHeightClearanceAtPosition(UnityEngine.Vector3)">
            <summary>
            Could a crouching player capsule fit at the given position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.hasProneHeightClearanceAtPosition(UnityEngine.Vector3)">
            <summary>
            Could a prone player capsule fit at the given position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.hasTeleportClearanceAtPosition(UnityEngine.Vector3)">
            <summary>
            Could a standing player capsule teleport to the given position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.getStanceForPosition(UnityEngine.Vector3,SDG.Unturned.EPlayerStance@)">
            <summary>
            Is there any compatible stance that can fit at position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.wouldHaveHeightClearanceAtPosition(UnityEngine.Vector3,System.Single)">
            <summary>
            Using our capsule's current height would there be enough space at a given position?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.hasHeightClearance(System.Single)">
            <summary>
            Does capsule have appropriate clearance for a pending height change?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerStance.replicateStance(System.Boolean)">
            <summary>
            Replicate stance to clients.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerStance.LADDER_INTERACT_RANGE">
            <summary>
            Regular interact ray still hits the ladder, but we only allow climbing within a smaller range to make its
            teleport less powerful.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerStance.LADDER_INTERACT_TELEPORT_OFFSET">
            <summary>
            Ladder forward ray is 0.75m, so we move slightly less than that away from the ladder.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EconAssetsReport">
            <summary>
            Export JSON report of Unturned's assets for economy usage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EconAssetsReport.Item.HasEffectTransform">
            <summary>
            If true, contains child transform named Effect for mythical attachment. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.EconAssetsReport.Skin.SecondaryItemIDs">
            <summary>
            Attachment item IDs that get skinned specially.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EconAssetsReport.Skin.HasLayeredFallback">
            <summary>
            Is there a fallback material for attachments that respects their main metallic areas?
            </summary>
        </member>
        <member name="F:SDG.Unturned.EconAssetsReport.Skin.HasTertiaryFallback">
            <summary>
            Is there a fallback material without any special features?
            </summary>
        </member>
        <member name="F:SDG.Unturned.EconAssetsReport.Skin.HasMeshOverride">
            <summary>
            Is there a replacement mesh?
            </summary>
        </member>
        <member name="F:SDG.Unturned.EconAssetsReport.Skin.LightingTime">
            <summary>
            Dawn and dusk skins pull per-lighting colors.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TransportConnectionListPool">
            <summary>
            Pool lists to avoid loopback re-using an existing list.
            Callers do not need to manually return lists because they are reset before each frame.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerPauseUI.shouldExitButtonRespectTimer">
            <summary>
            Exit button only needs to wait for timer in certain conditions.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UseableBarricade.useTrapRestrictions">
            <summary>
            Does the item being placed count as a "trap" for the purposes of vehicle placement restrictions?
            </summary>
        </member>
        <member name="P:SDG.Unturned.UseableBarricade.isHighlightRecursive">
            <summary>
            Should placement ghost material change be done recursively?
            e.g. Sentry has a deep hierarchy of meshes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopTool.findMapBundlesPath(System.String,System.String@)">
            <summary>
            Given path to a workshop map, try to find its /Bundles folder.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopTool.findMapContentPath(System.String,System.String@)">
            <summary>
            Given path to a workshop map, try to find its /Content folder.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopTool.loadMapBundlesAndContent(System.String,System.UInt64)">
            <summary>
            Maps on the workshop are a root folder named after the published file id, containing
            the map folder itself with the level name. In order to load the map's bundles and content
            properly we need to find the nested Bundles and Content folders.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EBuild">
            <summary>
            2023-02-28: note order is important because BarricadeManager saves as a byte!
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerAnimator.OnGestureChanged_Global">
            <summary>
            Invoked after tellGesture is called with the new gesture.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelParentTransform">
            <summary>
            Empty transform created at the world origin.
            The first-person Viewmodel transform is re-parented to this.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelCameraTransform">
            <summary>
            Child of the first-person skull transform.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelCamera">
            <summary>
            Camera near world origin masking the first-person arms and weapon.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelCameraLocalPositionOffset">
            <summary>
            Used by gun to hide viewmodel arms while aiming 2D scope, and by chainsaw to shake the viewmodel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.drivingViewmodelCameraLocalPositionOffset">
            <summary>
            Used to hide viewmodel arms while using a vehicle turret gun.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.scopeSway">
            <summary>
            Offsets main camera and aim rotation while aiming with a scoped gun.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.blendedViewmodelSwayMultiplier">
            <summary>
            Animated toward viewmodelSwayMultiplier.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelSwayMultiplier">
            <summary>
            Small number (0.1) while aiming, 1 while not aiming.
            Reduces viewmodel animation while aiming to make 3D sights more usable.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.blendedViewmodelOffsetPreferenceMultiplier">
            <summary>
            Animated toward viewmodelOffsetPreferenceMultiplier.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelOffsetPreferenceMultiplier">
            <summary>
            0 while aiming, 1 while not aiming.
            Players can customize the 3D position of the viewmodel on screen, but this needs
            to be blended out while aiming down sights otherwise it would not line up with
            the center of the screen.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.blendedViewmodelCameraLocalPositionOffset">
            <summary>
            Animated toward viewmodelCameraLocalPositionOffset, recoil, and bayonet offsets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.recoilViewmodelCameraOffset">
            <summary>
            Abruptly offset when gun is fired, then animated back toward zero.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.recoilViewmodelCameraRotation">
            <summary>
            Abruptly offset when gun is fired, then animated back toward zero.
            x = pitch, y = yaw, z = roll
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.bayonetViewmodelCameraOffset">
            <summary>
            Abruptly offset when bayonet is used, then animated back toward zero.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelMovementOffset">
            <summary>
            Animated while player is moving.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelCameraLocalPosition">
            <summary>
            Blended from multiple viewmodel parameters and then applied to viewmodelCameraTransform.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelSmoothedExplosionLocalRotation">
            <summary>
            Smoothing adds some initial blend-in which felt nicer for explosion rumble.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.isHiddenWaitingForClothing">
            <summary>
            Meshes are disabled until clothing is received.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.desiredViewmodelCameraLocalPosition">
            <summary>
            Target viewmodelCameraLocalPosition except while driving.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelCameraMovementLocalRotation">
            <summary>
            Animated while playing is moving.
            x = pitch, y = roll
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.lastFramePitchInput">
            <summary>
            Used to measure change in pitch between frames.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.lastFrameYawInput">
            <summary>
            Used to measure change in yaw between frames.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.rotationInputViewmodelRoll">
            <summary>
            Animated according to change in pitch/yaw input between frames so that gun rolls slightly while turning.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelItemInertiaRotation">
            <summary>
            Animated according to change in item position between frames so that animations have more inertia.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.viewmodelItemInertiaMask">
            <summary>
            Degrees per meter of item distance travelled.
            Pitch is driven by vertical displacement, yaw and roll are driven by horizontal.
            x = pitch, y = yaw, z = roll
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.lastCameraSideInputRealtime">
            <summary>
            In third-person this delays leaning in case player only wanted
            to switch camera side without leaning.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerAnimator.GetAnimationLength(System.String,System.Boolean)">
            <param name="scaled">If true, include current animation speed modifier.</param>
        </member>
        <member name="M:SDG.Unturned.PlayerAnimator.FlinchFromExplosion(UnityEngine.Vector3,System.Single)">
            <summary>
            At this point camera is already being shook, we just add some of the same shake to viewmodel for secondary motion.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerAnimator.NotifyClothingIsVisible">
            <summary>
            Called by clothing to make mesh renderers visible.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerAnimator.onInventoryGesture">
            <summary>
            Event for server plugins to monitor whether player is in-inventory.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerAnimator.ReceiveGestureRequest(SDG.Unturned.EPlayerGesture)">
            <summary>
            Rate limit is relatively high because this RPC handles open/close inventory notification.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerAnimator.UpdateLocalPlayerModelVisibility(System.Boolean,SDG.Unturned.EPlayerPerspective,System.Boolean)">
            <summary>
            Nelson 2024-03-20: Adding this method because (at the time of writing) first and third-person renderers
            and skeletons are activated/enabled in InitializePlayer, onPerspectiveUpdated, and onLifeUpdated, and I
            want them to be consistent with the addition of the new NPC Cutscene Mode option.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerAnimator.LateUpdate">
            <summary>
            2023-01-18: Viewmodel camera position was originally set during Update (and still is for compatibility),
            but for aiming alignment that uses the previous frame's animation position, so we also modify during
            LateUpdate to use this frame's animation position.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemOpticAsset.zoom">
            <summary>
            Factor e.g. 2 is a 2x multiplier.
            Prior to 2022-04-11 this was the target field of view. (90/fov)
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemSentryAsset.AmmoConsumptionProbability">
            <summary>
            [0, 1] percentage whether a shot decreases ammo count. Defaults to 100%.
            For example, 0.25 means 25% of shots will use a bullet, while the remaining 75% will be free.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemSentryAsset.QualityConsumptionProbability">
            <summary>
            [0, 1] percentage whether a shot decreases quality. Defaults to 100%.
            Combined with the gun's chance of decreasing quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSentryAsset.detectionRadius">
            <summary>
            Players/zombies within this range are treated as potential targets while scanning.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemSentryAsset.targetLossRadius">
            <summary>
            Will not lose current target within this range. Prevents target from popping in and out of range.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ServerSavedata.GetBackupFilePath(System.String)">
            <summary>
            If the file already exists when writing we will move it to this path. (public issue #4636)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemBarricadeAsset.canBeDamaged">
            <summary>
            If false this barricade cannot take damage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemBarricadeAsset.eligibleForPooling">
            <summary>
            Modded barricades can disable pooling if they have custom incompatible logic.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemBarricadeAsset.shouldBypassPickupOwnership">
            <summary>
            Defaults to false, except for explosive charges which bypass claims.
            Requested by Renaxon for collectible barricades that raiders can steal without destroying.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemBarricadeAsset.AllowPlacementInsideClipVolumes">
            <summary>
            Defaults to false, except for explosive charges which bypass claims.
            If true the item can be placed inside player clip volumes. (out of bounds)
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemBarricadeAsset.allowCollisionWhileAnimating">
            <summary>
            Should door colliders remain active while animation is playing?
            Enabled by modders trying to make stuff like elevators.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemBarricadeAsset.placementPreviewRef">
            <summary>
            Optional alternative barricade prefab specifically for the client preview spawned.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemBarricadeAsset.CanParentVehicleBePickedUp">
            <summary>
            By default, vehicles with "hooks" (such as the Skycrane) cannot pick up vehicles with barricades attached.
            If all barricades on the vehicle set this to true then the vehicle *can* be picked up. Defaults to false.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemBarricadeAsset.VehicleGuid">
            <summary>
            Vehicle to place.
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemBarricadeAsset.VehicleId">
            <summary>
            Legacy ID of vehicle to place.
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemBarricadeAsset.FindVehicleAsset">
            <summary>
            Returned asset is not necessarily a vehicle asset yet: It can also be a VehicleRedirectorAsset which the
            vehicle spawner requires to properly set paint color.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CollisionEventHook">
            <summary>
            Can be added to any GameObject with a Trigger to receive events.
            Ensure that Layer will detect player overlaps. Trap is a good candidate.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CollisionEventHook.OnPlayerEnter">
            <summary>
            Invoked when a player enters the trigger.
            Called before OnFirstPlayerEnter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CollisionEventHook.OnPlayerExit">
            <summary>
            Invoked when a player exits the trigger.
            Called before OnAllPlayersExit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CollisionEventHook.OnFirstPlayerEnter">
            <summary>
            Invoked when first player enters the trigger, and not again until all players have left.
            Called after OnPlayerEnter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CollisionEventHook.OnAllPlayersExit">
            <summary>
            Invoked when last player exits the trigger.
            Called after OnPlayerExit.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EWorkshopMenuSubmissionMode">
            <summary>
            Nelson 2024-12-16: This menu and ESteamUGCType are far from ideal, but I'm just trying to hack in a new tag for
            server browser curation assets before the update. :P
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.VisualToggleChanged">
            <summary>
            Called when the player clicks the cosmetic, visual or skin toggle buttons.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnShirtChanged_Global">
            <summary>
            Invoked after any player's shirt values change (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnPantsChanged_Global">
            <summary>
            Invoked after any player's shirt values change (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnHatChanged_Global">
            <summary>
            Invoked after any player's hat values change (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnBackpackChanged_Global">
            <summary>
            Invoked after any player's backpack values change (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnVestChanged_Global">
            <summary>
            Invoked after any player's backpack values change (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnMaskChanged_Global">
            <summary>
            Invoked after any player's backpack values change (not including loading).
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerClothing.OnGlassesChanged_Global">
            <summary>
            Invoked after any player's glasses values change (not including loading).
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuPlayServerInfoUI.bookmarkDetails">
            <summary>
            Null if not bookmarked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuPlayServerInfoUI.serverBookmarkHost">
            <summary>
            DNS entry to use if adding a bookmark for this server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuPlayServerInfoUI.UpdateVisibleButtons">
            <summary>
            Adjusts width and spacing of buttons along the bottom of the screen.
            Favorite and bookmark buttons can be hidden depending whether the necessary server details are set.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EVehicleBuildablePlacementRule">
            <summary>
            Controls whether vehicle allows barricades to be attached to it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleBuildablePlacementRule.None">
            <summary>
            Vehicle does not override placement. This means, by default, that barricades can be placed on the vehicle
            unless the barricade sets Allow_Placement_On_Vehicle to false. (e.g., beds and sentry guns) Note that
            gameplay config Bypass_Buildable_Mobility, if true, takes priority.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleBuildablePlacementRule.AlwaysAllow">
            <summary>
            Vehicle allows any barricade to be placed on it, regardless of the barricade's Allow_Placement_On_Vehicle
            setting. The legacy option for this was the Supports_Mobile_Buildables flag. Vanilla trains originally
            used this option, but it was exploited to move beds into tunnel walls.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleBuildablePlacementRule.Block">
            <summary>
            Vehicle prevents any barricade from being placed on it. Note that gameplay config Bypass_Buildable_Mobility,
            if true, takes priority.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PaintableVehicleSection.path">
            <summary>
            Scene hierarchy path relative to vehicle root.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PaintableVehicleSection.materialIndex">
            <summary>
            Index in renderer's materials array.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PaintableVehicleSection.allMaterials">
            <summary>
            If true, apply to every item in renderer's materials array.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EVehicleDefaultPaintColorMode">
            <summary>
            Controls how vehicle's default paint color (if applicable) is chosen.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleDefaultPaintColorMode.None">
            <summary>
            Not configured.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleDefaultPaintColorMode.List">
            <summary>
            Pick from the DefaultPaintColors list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleDefaultPaintColorMode.RandomHueOrGrayscale">
            <summary>
            Pick a random HSV using VehicleRandomPaintColorConfiguration.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelSteeringMode.None">
            <summary>
            Wheel does not affect steering.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelSteeringMode.SteeringAngle">
            <summary>
            Set steering angle according to <see cref="P:SDG.Unturned.VehicleAsset.steerMin"/> and <see cref="P:SDG.Unturned.VehicleAsset.steerMax"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelSteeringMode.CrawlerTrack">
            <summary>
            Increase or decrease motor torque to rotate vehicle in-place. (Tanks)
            </summary>
        </member>
        <member name="T:SDG.Unturned.ECrawlerTrackForwardMode">
            <summary>
            For <see cref="F:SDG.Unturned.EWheelSteeringMode.CrawlerTrack"/>, indicates how a positive motor torque (forward) rotates
            the vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ECrawlerTrackForwardMode.Auto">
            <summary>
            Wheels on the left side are Clockwise and wheels on the right side are Counter-Clockwise.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ECrawlerTrackForwardMode.Clockwise">
            <summary>
            Positive motor torque on this wheel rotates the vehicle clockwise.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ECrawlerTrackForwardMode.CounterClockwise">
            <summary>
            Positive motor torque on this wheel rotates the vehicle counter-clockwise.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EWheelMotionEffectsMode">
            <summary>
            Controls whether wheel creates particle kickup effects for the ground surface material underneath.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelMotionEffectsMode.None">
            <summary>
            Turn off motion effects. Default for wheels not using collider pose.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelMotionEffectsMode.BothDirections">
            <summary>
            Enable motion effects. Default for wheels using collider pose.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelMotionEffectsMode.ForwardOnly">
            <summary>
            Enable motion effects, but turn them off while moving backward.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWheelMotionEffectsMode.BackwardOnly">
            <summary>
            Enable motion effects, but turn them off while moving forward.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleRandomPaintColorConfiguration.grayscaleChance">
            <summary>
            [0, 1] color will have zero saturation if random value is less than this. For example, 0.2 means 20% of
            vehicles will be grayscale.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.wasAutomaticallyGenerated">
            <summary>
            If true, this configuration was created by <see cref="!:InteractableVehicle.BuildAutomaticWheelConfiguration"/>.
            Otherwise, this configuration was loaded from the vehicle asset file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.wheelColliderPath">
            <summary>
            Transform path relative to Vehicle prefab with WheelCollider component.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.isColliderPowered">
            <summary>
            If true, WheelCollider's motorTorque is set according to accelerator input.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.modelPath">
            <summary>
            Transform path relative to Vehicle prefab. Animated to match WheelCollider state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.isModelSteered">
            <summary>
            If true, model is animated according to steering input.
            Only kept for backwards compatibility. Prior to wheel configurations, only certain WheelColliders actually
            received steering input, while multiple models would appear to steer. For example, the APC's front 4 wheels
            appeared to rotate but only the front 2 actually affected physics.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.modelUseColliderPose">
            <summary>
            If true, model ignores isModelSteered and instead uses WheelCollider.GetWorldPose when simulating or the
            replicated state from the server when not simulating. Defaults to false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.modelRadius">
            <summary>
            If greater than zero, visual-only wheels (without a collider) like the extra wheels of the Snowmobile use
            this radius to calculate their rolling speed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.copyColliderRpmIndex">
            <summary>
            If set, visual-only wheels without a collider (like the back wheels of the snowmobile) can copy RPM from
            a wheel that does have a collider. Requires modelRadius to also be set.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.copyCrawlerTrackSpeedIndex">
            <summary>
            If set, wheel model uses this crawler track's speed (average RPM of wheels). Prevents wheel model from
            spinning out of sync with overall track.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.steeringAngleMultiplier">
            <summary>
            Target steering angle is multiplied by this value. For example, can be set to a negative number for
            rear-wheel steering. Defaults to 1.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.modelSuspensionOffset">
            <summary>
            Vertical offset of model from simulated suspension position.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.modelSuspensionSpeed">
            <summary>
            How quickly to interpolate model toward suspension position in meters per second.
            If negative, position teleports immediately.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.motionEffectsMode">
            <summary>
            Nelson 2024-12-06: Initially implemented as a minimum and maximum percentage of normalized forward velocity,
            but think this is more practical. I can't think of why we would use values other than -1, 0, +1 for that,
            and if we did we'd probably want some tuning for the angle particles are emitted at.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleWheelConfiguration.canExplode">
            <summary>
            If true, wheel should fly off when vehicle explodes. Defaults to true.
            Used to simplify destroying vehicles with crawler tracks.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleEngineSoundType.Legacy">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EVehicleEngineSoundType.EngineRPMSimple">
            <summary>
            Set pitch and volume of a single clip according to engine RPM.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CrawlerTrackTilingMaterial">
            <summary>
            Offsets a crawler track's material UV offset in sync with wheels rolling.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CrawlerTrackTilingMaterial.path">
            <summary>
            Scene hierarchy path relative to vehicle root.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CrawlerTrackTilingMaterial.materialIndex">
            <summary>
            Index in renderer's materials array.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CrawlerTrackTilingMaterial.wheelIndices">
            <summary>
            Indices of wheels to copy RPM from.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CrawlerTrackTilingMaterial.repeatDistance">
             <summary>
             How far to travel to offset UV 1x. (1/x)
            
             You can calculate RepeatDistance by selecting an edge parallel to the crawler track and dividing the UV
             distance by the physical 3D distance. For example, if the UV length is 2 and the 3D length is 1.5 m then
             the texture repeats 1.33 UV/m.
             </summary>
        </member>
        <member name="F:SDG.Unturned.CrawlerTrackTilingMaterial.uvDirection">
            <summary>
            UV mainTextureOffset per distance traveled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.SharedSkinLookupGuid">
            <summary>
            Please refer to: <seealso cref="M:SDG.Unturned.VehicleAsset.FindSharedSkinVehicleAsset"/>
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.sharedSkinLookupID">
            <summary>
            Please refer to: <seealso cref="M:SDG.Unturned.VehicleAsset.FindSharedSkinVehicleAsset"/>
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleAsset.FindSharedSkinVehicleAsset">
             <summary>
             Supports redirects by VehicleRedirectorAsset.
            
             "Shared Skins" were implemented when there were several asset variants of each vehicle. For example,
             Off_Roader_Orange, Off_Roader_Purple, Off_Roader_Green, etc. Each vehicle had their "shared skin" set to
             the same ID, and the skin asset had its target ID set to the shared ID. This isn't as necessary after
             merging vanilla vehicle variants, but some mods may rely on it, and it needed GUID support now that the
             target vehicle might not have a legacy ID.
             </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.hasLoadedModel">
            <summary>
            Prevents calling getOrLoad redundantly if asset does not exist.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleAsset.OnServerModelLoaded(UnityEngine.GameObject)">
            <summary>
            Clip.prefab
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleAsset.OnClientModelLoaded(UnityEngine.GameObject)">
            <summary>
            Vehicle.prefab
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleAsset.BuildAutomaticWheelConfiguration(UnityEngine.GameObject)">
             <summary>
             Nelson 2024-02-28: Prior to the VehicleWheelConfiguration class, most of the wheel configuration was
             inferred during InteractableVehicle initialization from the children of the "Tires" and "Wheels" transforms.
             Confusingly, "Tires" only contains WheelColliders and "Wheels" only contains the visual models. Rather than
             keeping the old behavior in InteractableVehicle alongside the newer more configurable one, we match the old
             behavior here to generate an equivalent configuration.
            
             Note that <see cref="P:SDG.Unturned.VehicleAsset.steeringTireIndices"/> must be initialized before this is called (by loading model).
             </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.TargetReverseVelocity">
            <summary>
            Maximum (negative) velocity to aim for while accelerating backward.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.TargetReverseSpeed">
            <summary>
            Maximum speed to aim for while accelerating backward.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.TargetForwardVelocity">
            <summary>
            Maximum velocity to aim for while accelerating forward.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.TargetForwardSpeed">
            <summary>
            Maximum speed to aim for while accelerating forward.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.steerMin">
            <summary>
            Steering angle range at zero speed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.steerMax">
            <summary>
            Steering angle range at target maximum speed (for the current forward/backward direction).
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.SteeringAngleTurnSpeed">
            <summary>
            Steering angle rotation change in degrees per second.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.CrawlerTrackSteeringTorque">
            <summary>
            Added or subtracted from wheel motor torque in <see cref="F:SDG.Unturned.EWheelSteeringMode.CrawlerTrack"/> mode.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.CrawlerTrackSteeringSidewaysFrictionMultiplier">
            <summary>
            When a wheel is in <see cref="F:SDG.Unturned.EWheelSteeringMode.CrawlerTrack"/> mode and a steering input is applied the
            <see cref="P:UnityEngine.WheelCollider.sidewaysFriction"/> stiffness is multiplied by this factor. This allows the vehicle
            to rotate in-place with a lower steering torque, which helps prevent the vehicle from going out of control
            while turning and accelerating.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.CrawlerTrackSteeringMaxSpeedScale">
            <summary>
            Multiplier for <see cref="P:SDG.Unturned.VehicleAsset.CrawlerTrackSteeringTorque"/> and <see cref="P:SDG.Unturned.VehicleAsset.CrawlerTrackSteeringSidewaysFrictionMultiplier"/>
            while at target maximum speed (for the current forward/backward direction).
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.steeringLeaningForceMultiplier">
            <summary>
            Torque on Z axis applied according to steering input for bikes and motorcycles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.steeringLeaningForceShouldScaleWithSpeed">
            <summary>
            If true, leaning force is multiplied by normalized speed to the power of steeringLeaningForceSpeedExponent.
            Defaults to false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.steeringLeaningForceSpeedExponent">
            <summary>
            Refer to steeringLeaningForceShouldScaleWithSpeed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.ShouldExplosionCauseDamage">
            <summary>
            If true, explosion will damage nearby entities and kill passengers.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.explosionBurnMaterialSections">
            <summary>
            Only used if ShouldExplosionBurnMaterials. Optional. Allows specifying which renderers to burn.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.hasBicycle">
            <summary>
            When true the bicycle animation is used and extra speed is stamina powered.
            Bad way to implement it.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.canSpawnWithBattery">
            <summary>
            Can this vehicle ever spawn with a charged battery?
            Uses game mode battery stats when true, or overrides by preventing battery spawn when false.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.batterySpawnChargeMultiplier">
            <summary>
            Battery charge when first spawning in is multiplied by this [0, 1] number.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.batteryBurnRate">
            <summary>
            Battery decrease per second.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.batteryChargeRate">
            <summary>
            Battery increase per second.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.defaultBatteryGuid">
            <summary>
            Battery item given to the player when a specific battery hasn't been manually
            installed yet. Defaults to the vanilla car battery (098b13be34a7411db7736b7f866ada69).
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.fuelBurnRate">
            <summary>
            Fuel decrease per second.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.validSpeedUp">
            <summary>
            Client sends physics simulation results to server. If upward (+Y) speed exceeds this, mark the move invalid.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.validSpeedDown">
            <summary>
            Client sends physics simulation results to server. If downward (-Y) speed exceeds this, mark the move invalid.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.camDriverOffset">
            <summary>
            Vertical first-person view translation.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.camPassengerOffset">
            <summary>
            Vertical first-person view translation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.isVulnerable">
            <summary>
            To non-explosions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.isVulnerableToEnvironment">
            <summary>
            Mega zombie rocks, zombies, animals.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.isVulnerableToBumper">
            <summary>
            Crashing into stuff.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.canRepairWhileSeated">
            <summary>
            Can this vehicle be repaired by a seated player?
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.supportsMobileBuildables">
            <summary>
            Can mobile barricades e.g. bed or sentry guns be placed on this vehicle?
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.shouldSpawnSeatCapsules">
            <summary>
            Should capsule colliders be added to seat transforms?
            Useful to prevent bikes from leaning into walls.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.canBeLocked">
            <summary>
            Can players lock the vehicle to their clan/group?
            True by default, but mods want to be able to disable.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.canStealBattery">
            <summary>
            Can players steal the battery?
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.dropsTableId">
            <summary>
            Spawn table to drop items from on death.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.dropsMin">
            <summary>
            Minimum number of items to drop on death.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.dropsMax">
            <summary>
            Maximum number of items to drop on death.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.tireID">
            <summary>
            Item ID of compatible tire.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.wheelBalancingForceMultiplier">
            <summary>
            If greater than zero, torque is applied on the local Z axis multiplied by this factor.
            Note that <see cref="F:SDG.Unturned.VehicleAsset.rollAngularVelocityDamping"/> is critical for damping this force.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.wheelBalancingUprightExponent">
            <summary>
            Exponent on the [0, 1] factor representing how aligned the vehicle is with the ground up vector.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.rollAngularVelocityDamping">
            <summary>
            If greater than zero, an acceleration is applied to angular velocity on Z axis toward zero.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.replicatedWheelIndices">
            <summary>
            Indices of wheels using replicated collider pose (if any).
            Null if not configured or no wheels using this feature.
            Allows client and server to replicate only the suspension value without other context.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.poweredWheelIndices">
            <summary>
            Indices of wheels with motor torque applied (if any).
            Used for engine RPM calculation.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.AllowsEngineRpmAndGearsInHud">
            <summary>
            If this and UsesEngineRpmAndGears are true, HUD will show RPM and gear number.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.GearShiftDownThresholdRpm">
            <summary>
            When engine RPM dips below this value shift to the next lower gear if available.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.GearShiftUpThresholdRpm">
            <summary>
            When engine RPM exceeds this value shift to the next higher gear if available.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.GearShiftDuration">
            <summary>
            How long after changing gears before throttle is engaged again.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.GearShiftInterval">
            <summary>
            How long between changing gears to allow another automatic gear change.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.EngineIdleRpm">
            <summary>
            Minimum engine RPM.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.EngineMaxRpm">
            <summary>
            Maximum engine RPM.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.EngineRpmIncreaseRate">
            <summary>
            How quickly RPM can increase in RPM/s.
            e.g., 1000 will take 2 seconds to go from 2000 to 4000 RPM.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.EngineRpmDecreaseRate">
            <summary>
            How quickly RPM can decrease in RPM/s.
            e.g., 1000 will take 2 seconds to go from 4000 to 2000 RPM.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.EngineMaxTorque">
            <summary>
            Maximum torque (multiplied by output of torque curve).
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.hasCenterOfMassOverride">
            <summary>
            Was a center of mass specified in the .dat?
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.centerOfMass">
            <summary>
            If hasCenterOfMassOverride, use this value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.engineForceMultiplier">
            <summary>
            Multiplier for otherwise not-yet-configurable plane/heli/boat forces.
            Nelson 2024-03-06: Required for increasing mass of vehicles without significantly messing with behavior.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.wheelColliderMassOverride">
            <summary>
            If set, override the wheel collider mass with this value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.PaintableVehicleSections">
            <summary>
            Null if vehicle doesn't support paint color.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.extraTransparentSections">
            <summary>
            List of transforms to register with DynamicWaterTransparentSort.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.DefaultPaintColors">
            <summary>
            Null if vehicle doesn't support paint color.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleAsset.randomPaintColorConfiguration">
            <summary>
            Null if <see cref="F:SDG.Unturned.VehicleAsset.defaultPaintColorMode"/> isn't <see cref="F:SDG.Unturned.EVehicleDefaultPaintColorMode.RandomHueOrGrayscale"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleAsset.GetRandomDefaultPaintColor">
            <summary>
            Pick a random paint color according to <see cref="F:SDG.Unturned.VehicleAsset.defaultPaintColorMode"/>. Null if unsupported or not configured.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.IsPaintable">
             <summary>
             If true, Vehicle Paint items can be used on this vehicle.
             Always false if <see cref="P:SDG.Unturned.VehicleAsset.SupportsPaintColor"/> is false.
            
             Certain vehicles may support paint colors without also being paintable by players. For example, the creator
             of a vehicle may want to use color variants without also allowing players to make it bright pink.
             </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleAsset.GetEngineGearRatio(System.Int32)">
            <summary>
            Returns reverseGearRatio for negative gears, actual value for valid gear number, otherwise zero.
            Exposed for plugin use.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.ReverseGearsCount">
            <summary>
            Get number of reverse gear ratios.
            Exposed for plugin use.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.ForwardGearsCount">
            <summary>
            Get number of forward gear ratios.
            Exposed for plugin use.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleAsset.numSteeringTires">
            <summary>
            Number of tire visuals to rotate with steering wheel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelGround.hasLegacyDataForConversion">
            <summary>
            If true then level should convert old terrain.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelGround.doesLegacyDataIncludeSplatmapWeights">
            <summary>
            If true, splatmap conversion should use weights as-is.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelGround.legacyMaterialGuids">
            <summary>
            Material guids converted by legacy asset bundle hash or texture names.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelGround.treesHash">
            <summary>
            Hash of Trees.dat, or zeroed if any assets were missing locally.
            Should only be used if level is configured to, as many mod maps are typically missing assets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelGround.GetConversionMarkerFilePath">
            <summary>
            Game does not currently have a way to resave level's Config.json file, so instead we save a text file
            indicating that the terrain auto conversion was performed. If there was a bug with auto conversion then
            all of the old files are still present and can be re-converted.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelGround.tickRegionalVisibility">
            <summary>
            Stagger regional visibility across multiple frames.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TreeRedirectorMap">
            <summary>
            Caches uint16 ID to ID redirects.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MythicalEffectController">
            <summary>
            Manages lifetime and attachment of a mythical effect. Added by <see cref="M:SDG.Unturned.ItemTool.ApplyMythicalEffect(UnityEngine.Transform,System.UInt16,SDG.Unturned.EEffectType)"/>.
            Was called `MythicLocker` with a paired `MythicLockee` prior to 2024-06-11.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BrowserConfigData.Login_Token">
            <summary>
            https://steamcommunity.com/dev/managegameservers
            </summary>
        </member>
        <member name="F:SDG.Unturned.BrowserConfigData.BookmarkHost">
             <summary>
             IP address, DNS name, or a web address (to perform GET request) to advertise.
            
             Servers not using Fake IP can specify just a DNS entry. This way if server's IP changes clients can rejoin.
             For example, if you own the "example.com" domain you could add an A record "myunturnedserver" pointing at
             your game server IP and set that record here "myunturnedserver.example.com".
             
             Servers using Fake IP are assigned random ports at startup, but can implement a web API endpoint to return
             the IP and port. Clients perform a GET request if this string starts with http:// or https://. The returned
             text can be an IP address or DNS name with optional query port override. (e.g., "127.0.0.1:27015")
             </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Join_Rate_Limit_Window_Seconds">
            <summary>
            If ready-to-connect messages are received more than twice from the same client in less than this many
            seconds they will be kicked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Rate_Limit_Kick_Threshold">
            <summary>
            If a rate-limited method is called this many times within cooldown window the client will be kicked.
            For example a value of 1 means the client will be kicked the first time they call the method off-cooldown. (not recommended)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Fake_Lag_Threshold_Seconds">
            <summary>
            Ordinarily the server should be receiving multiple input packets per second from a client. If more than this
            amount of time passes between input packets we flag the client as potentially using a lag switch, and modify
            their stats (e.g. reduce player damage) for a corresponding duration.
            Minimum value is PlayerInput.MIN_FAKE_LAG_THRESHOLD_SECONDS.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Fake_Lag_Log_Warnings">
            <summary>
            Whether fake lag detection should log to command output. False positives are relatively likely when client
            framerate hitches (e.g. loading dense region), so this is best used for tuning threshold rather than bans.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Fake_Lag_Damage_Penalty_Multiplier">
            <summary>
            PvP damage multiplier while under fake lag penalty.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Enable_Kick_Input_Spam">
            <summary>
            Should we kick players after detecting spammed calls to askInput?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Enable_Kick_Input_Timeout">
            <summary>
            Should we kick players if they do not submit inputs for a long time?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Enable_Scheduled_Shutdown">
            <summary>
            Should the server automatically shutdown at a configured time?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Scheduled_Shutdown_Time">
            <summary>
            When the server should shutdown if Enable_Scheduled_Shutdown is true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Scheduled_Shutdown_Warnings">
            <summary>
            Broadcast "shutting down for scheduled maintenance" warnings at these intervals.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Enable_Update_Shutdown">
            <summary>
            Should the server automatically shutdown when a new version is detected?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Update_Steam_Beta_Name">
            <summary>
            Unfortunately the server does not have a way to automatically determine the current beta branch.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Update_Shutdown_Warnings">
            <summary>
            Broadcast "shutting down for update" warnings at these intervals.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Chat_Always_Use_Rich_Text">
            <summary>
            Should vanilla text chat messages always use rich text?
            Servers with plugins may want to enable because IMGUI does not fade out rich text.
            Kept because plugins might be setting this directly, but it no longer does anything.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Validate_EconInfo_Hash">
            <summary>
            Should the EconInfo.json hash be checked by the server?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.Use_FakeIP">
            <summary>
            If true, opt-in to SteamNetworkingSockets "FakeIP" system.
            https://partner.steamgames.com/doc/api/ISteamNetworkingSockets#1
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.MAX_TIMEOUT_QUEUE_SECONDS">
            <summary>
            Limit max queue timeout duration so that if server encounters an error or doesn't
            process the request the client can timeout locally.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConfigData.CLIENT_TIMEOUT_QUEUE_SECONDS">
            <summary>
            Longer than server timeout so that ideally more context is logged on the server
            rather than just "client disconnected."
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Has_Durability">
            <summary>
            Original option for disabling item quality. Defaults to true. If false, items spawn at 100% quality and
            their quality doesn't decrease. For backwards compatibility, the newer per-item-type durability options
            are ignored if this is off.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Food_Spawns_At_Full_Quality">
            <summary>
            Food-specific replacement for <see cref="F:SDG.Unturned.ItemsConfigData.Has_Durability"/>. Defaults to false. If true, food spawns at 100% quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Water_Spawns_At_Full_Quality">
            <summary>
            Water-specific replacement for <see cref="F:SDG.Unturned.ItemsConfigData.Has_Durability"/>. Defaults to false. If true, water spawns at 100% quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Clothing_Spawns_At_Full_Quality">
            <summary>
            Clothing-specific replacement for <see cref="F:SDG.Unturned.ItemsConfigData.Has_Durability"/>. Defaults to false. If true, clothing spawns at 100% quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Weapons_Spawn_At_Full_Quality">
            <summary>
            Weapon-specific replacement for <see cref="F:SDG.Unturned.ItemsConfigData.Has_Durability"/>. Defaults to false. If true, weapons spawns at 100% quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Default_Spawns_At_Full_Quality">
            <summary>
            Fallback used when spawning an item that doesn't fit into one of the other quality/durability settings.
            Defaults to false. If true, items spawn at 100% quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Clothing_Has_Durability">
            <summary>
            Clothing-specific replacement for <see cref="F:SDG.Unturned.ItemsConfigData.Has_Durability"/>. Defaults to true. If false, clothing quality
            doesn't decrease when damaged.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemsConfigData.Weapons_Have_Durability">
            <summary>
            Melee and gun replacement for <see cref="F:SDG.Unturned.ItemsConfigData.Has_Durability"/>. Defaults to true. If false, weapons quality
            doesn't decrease when used.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehiclesConfigData.Decay_Time">
            <summary>
            Seconds vehicle can be neglected before it begins taking damage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehiclesConfigData.Decay_Damage_Per_Second">
            <summary>
            After vehicle has been neglected for more than Decay_Time seconds it will begin taking this much damage per second.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehiclesConfigData.Min_Natural_Vehicles">
            <summary>
            Vehicles are considered "natural" if they were spawned by the level as opposed to players or vendors.
            If less than this many natural vehicles exist in the level, more will be spawned. The minimum of this or
            Max_Instances is used. (i.e., if this value is higher than max instances the max instances value is used
            instead.)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ZombiesConfigData.Quest_Boss_Respawn_Interval">
            <summary>
            Minimum seconds between boss zombie spawns for players doing quests.
            Players were abusing the spawns to farm boss tier loot.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ZombiesConfigData.NonHeadshot_Armor_Multiplier">
            <summary>
            Weapon damage multiplier against body, arms, legs. Useful for headshot-only mode.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadesConfigData.Allow_Item_Placement_On_Vehicle">
            <summary>
            Should players be allowed to build on their vehicles?
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadesConfigData.Allow_Trap_Placement_On_Vehicle">
            <summary>
            Should players be allowed to build traps (e.g. barbed wire) on their vehicles?
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadesConfigData.Max_Item_Distance_From_Hull">
            <summary>
            Furthest away from colliders a player can build an item onto their vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadesConfigData.Max_Trap_Distance_From_Hull">
            <summary>
            Furthest away from colliders a player can build a trap (e.g. barbed wire) onto their vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Lose_Skills_PvP">
            <summary>
            [0, 1] percentage of skill levels to retain after death.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Lose_Skills_PvE">
            <summary>
            [0, 1] percentage of skill levels to retain after death.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Lose_Skill_Levels_PvP">
            <summary>
            Number of skill levels to remove after death.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Lose_Skill_Levels_PvE">
            <summary>
            Number of skill levels to remove after death.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Lose_Experience_PvP">
            <summary>
            [0, 1] percentage of experience points to retain after death.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Lose_Experience_PvE">
            <summary>
            [0, 1] percentage of experience points to retain after death.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Allow_Per_Character_Saves">
            <summary>
            Should each character slot have separate savedata?
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayersConfigData.Enable_Terrain_Color_Kick">
            <summary>
            If true, players will be kicked if their skin color is too similar to one of the level's terrain colors.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EventsConfigData.Weather_Frequency_Multiplier">
            <summary>
            Each per-level custom weather frequency is multiplied by this value.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EventsConfigData.Weather_Duration_Multiplier">
            <summary>
            Each per-level custom weather duration is multiplied by this value.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnityEventConfigData.Allow_Server_Messages">
            <summary>
            Should ServerTextChatMessenger be allowed to broadcast?
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnityEventConfigData.Allow_Server_Commands">
            <summary>
            Should ServerTextChatMessenger be allowed to execute commands?
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnityEventConfigData.Allow_Client_Messages">
            <summary>
            Should ClientTextChatMessenger be allowed to broadcast?
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnityEventConfigData.Allow_Client_Commands">
            <summary>
            Should ClientTextChatMessenger be allowed to execute commands?
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Group_Player_List">
            <summary>
            Should group connections be shown on player list?
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Allow_Lobby_Groups">
            <summary>
            If true, allow automatically creating an in-game group for members of your Steam lobby.
            Requires Allow_Dynamic_Groups to be enabled as well.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Friendly_Fire">
            <summary>
            Is friendly-fire allowed?
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Bypass_Buildable_Mobility">
            <summary>
            Are sentry guns and beds allowed on vehicles?
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Allow_Holidays">
            <summary>
            Should holiday (Halloween and Christmas) content like NPC outfits and decorations be loaded?
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Allow_Freeform_Buildables">
            <summary>
            Can "freeform" barricades be placed in the world?
            Defaults to true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Allow_Freeform_Buildables_On_Vehicles">
            <summary>
            Can "freeform" barricades be placed on vehicles?
            Defaults to true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Enable_Damage_Flinch">
            <summary>
            If true, aim flinches away from center when damaged.
            Defaults to true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Enable_Explosion_Camera_Shake">
            <summary>
            If true, camera will shake near explosions. Can also be toned down client-side in Options menu.
            Defaults to true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.Explosion_Launch_Speed_Multiplier">
            <summary>
            Scales velocity added to players by explosion knock-back.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.AirStrafing_Acceleration_Multiplier">
            <summary>
            Scales midair input change in player direction.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.AirStrafing_Deceleration_Multiplier">
            <summary>
            Scales midair decrease in speed while faster than max walk speed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.ThirdPerson_RecoilMultiplier">
            <summary>
            Scales magnitude of recoil while using third-person perspective.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GameplayConfigData.ThirdPerson_SpreadMultiplier">
            <summary>
            Scales magnitude of bullet inaccuracy while using third-person perspective.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HumanClothes.centerHeadEffect(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Center mythical effect hook horizontally, but maintain vertical placement.
            Lots of hats/masks/glasses have off-center effects intentionally, but community
            feedback suggests centering to make effects like circling atoms look better.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HumanClothes.setCharacterMeshes(UnityEngine.Mesh[])">
            <summary>
            Set mesh of all character mesh renderers.
            Tries to match renderer index to mesh LOD index.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HumanClothes.setCharacterMaterial(UnityEngine.Material)">
            <summary>
            Set material of all character mesh renderers.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HumanClothes.overrideMaskMythicId">
            <summary>
            Hack for previewing the "aura" cosmetic items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GraphicsSettings.planarReflectionUpdateIndex">
            <summary>
            Planar reflection component updates its culling distance and culling mask when this is incremented.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GraphicsSettings.uiScale">
            <summary>
            Overrides in-game UI scale setting.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GraphicsSettings.terrainBasemapDistance">
            <summary>
            Distance to use terrain shaders before fallback to a baked texture.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GraphicsSettings.terrainHeightmapPixelError">
            <summary>
            Higher error reduces vertex density as distance increases.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GraphicsSettings.clFarClipDistance">
            <summary>
            Added for players who want to see if they can get better performance with a ridiculously low max draw distance.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GraphicsSettings.NormalizedFarClipDistance">
            <summary>
            Multiplier for far clip plane distance.
            Clamped within [0, 1] range to prevent editing config files for an advantage.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GraphicsSettings.normalizedDrawDistance">
            <summary>
            Multiplier for draw distance.
            Clamped within [0, 1] range to prevent editing config files for an advantage.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GraphicsSettings.normalizedLandmarkDrawDistance">
            <summary>
            Multiplier for draw distance of optional super-low LOD models.
            Clamped within [0, 1] range to prevent editing config files for an advantage.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GraphicsSettings.validateSettings">
            <summary>
            Called after loading graphics settings from disk so that their values can be adjusted.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GraphicsSettings.fixDefaultResolution">
            <summary>
            If default resolution is zero, try falling back to a higher one.
            Used when restoring defaults and validating loaded settings.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CharacterAnimator.GetAnimationLength(System.String,System.Boolean)">
            <param name="scaled">If true, include current animation speed modifier.</param>
        </member>
        <member name="M:SDG.Unturned.CharacterAnimator.play(System.String,System.Boolean)">
            <returns>True if an animation was found and started playing.</returns>
        </member>
        <member name="F:SDG.Unturned.EPhysicsMaterialCharacterFrictionMode.ImmediatelyResponsive">
            <summary>
            Velocity is directly set to input velocity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPhysicsMaterialCharacterFrictionMode.Custom">
            <summary>
            Velocity is affected by acceleration and deceleration.
            </summary>
        </member>
        <member name="T:SDG.Unturned.PhysicsMaterialAssetBase">
            <summary>
            Properties common to asset and extensions. For example both can specify sounds.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.ValidateNewElement(SDG.Unturned.GlazierElementBase_UIToolkit)">
            <summary>
            Sanity check all returned elements have a gameObject.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.CreateCursor">
            <summary>
            Create software cursor visual element.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.CreateDebugLabel">
            <summary>
            Create green label in the upper-left.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.CreateTooltip">
            <summary>
            Create tooltip visual element.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.UpdateDebugLabel">
            <summary>
            Update upper-left green text.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.UpdateCursor">
            <summary>
            Update software cursor visual element.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_UIToolkit.UpdateTooltip">
            <summary>
            Find hovered element and update tooltip visibility/text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Glazier_UIToolkit.gameLayer">
            <summary>
            Container for SleekWindow element.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Glazier_UIToolkit.overlayLayer">
            <summary>
            Container for top-level visual elements.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Glazier_UIToolkit.previousTooltipElement">
            <summary>
            Element under the cursor on the previous frame.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Glazier_UIToolkit.tooltipFocusTimer">
            <summary>
            Duration in seconds the cursor has been over the element.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.ECON_HASH">
            <summary>
            EconInfo.json hash does not match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.HASH_MASTER_BUNDLE">
            <summary>
            Master bundle hashes do not match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.WORKSHOP_ADVERTISEMENT_MISMATCH">
            <summary>
            Workshop usage advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.CUSTOM">
            <summary>
            Used by client transport to show a custom localized message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.LATE_PENDING_STEAM_AUTH">
            <summary>
            Server has not received an auth session response from Steam yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.LATE_PENDING_STEAM_ECON">
            <summary>
            Server has not received an economy response from Steam yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.LATE_PENDING_STEAM_GROUPS">
            <summary>
            Server has not received a groups response from Steam yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.NAME_PRIVATE_LONG">
            <summary>
            Player nickname exceeds limit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.NAME_PRIVATE_INVALID">
            <summary>
            Player nickname contains invalid characters.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.NAME_PRIVATE_NUMBER">
            <summary>
            Player nickname should not be a number.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.TIMED_OUT_LOGIN">
            <summary>
            Server did not respond to EServerMessage.Authenticate
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.HASH_RESOURCES">
            <summary>
            Player resources folders don't match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.AUTH_NETWORK_IDENTITY_FAILURE">
            <summary>
            The network identity in the ticket does not match the server authenticating the ticket.
            This can happen if server's Steam ID has changed from what the client thinks it is.
            For example, joining a stale entry in the server list. (public issue #4101)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SERVER_MAP_ADVERTISEMENT_MISMATCH">
            <summary>
            Level name advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SERVER_VAC_ADVERTISEMENT_MISMATCH">
            <summary>
            VAC status advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SERVER_BATTLEYE_ADVERTISEMENT_MISMATCH">
            <summary>
            BattlEye status advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SERVER_MAXPLAYERS_ADVERTISEMENT_MISMATCH">
            <summary>
            Max players advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SERVER_CAMERAMODE_ADVERTISEMENT_MISMATCH">
            <summary>
            Camera mode advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SERVER_PVP_ADVERTISEMENT_MISMATCH">
            <summary>
            Combat mode advertised on server list does not match during connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.SKIN_COLOR_WITHIN_THRESHOLD_OF_TERRAIN_COLOR">
            <summary>
            Player's skin color is too similar to one of <see cref="F:SDG.Unturned.LevelAsset.terrainColorRules"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.STEAM_ID_MISMATCH">
            <summary>
            Steam ID reported by net transport doesn't match client's reported Steam ID.
            This was exploited to fill the server queue with fake players.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamConnectionFailureInfo.CONNECT_RATE_LIMITING">
            <summary>
            Received too many connection requests from player in a short window.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekChatEntryV2.shouldFadeOutWithAge">
            <summary>
            Does this label fade out as the chat message gets older?
            </summary>
        </member>
        <member name="P:SDG.Unturned.SleekChatEntryV2.representingChatMessage">
            <summary>
            Chat message values to show.
            </summary>
        </member>
        <member name="E:SDG.Unturned.InteractableObjectBinaryState.onStateInitialized">
            <summary>
            Invoked after state is first loaded, synced from server when entering relevancy, or reset.
            </summary>
        </member>
        <member name="E:SDG.Unturned.InteractableObjectBinaryState.onStateChanged">
            <summary>
            Invoked after interaction changes state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryState.modHookCounter">
            <summary>
            Number of event hooks monitoring or controlling this.
            Used to allow client to control remote objects on server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreMenu.ApplySearchTextFilter">
            <summary>
            Remove items that do not match search text.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreMenu.RefreshPage">
            <summary>
            Note SetListing also calls RefreshInCart.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreMenu.CreateFilterCategoryButtons">
            <summary>
            Cannot be created until store data is available.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.optionsButton">
            <summary>
            Toggle button to open/close advanced filters panel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.showOwnedToggle">
            <summary>
            On/off checkbox for including already-owned items in filter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.optionsPanel">
            <summary>
            Container for advanced options.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.pageBox">
            <summary>
            Displays the current page number.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.viewCartButton">
            <summary>
            Only visible when cart is not empty.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.pageIndex">
            <summary>
            [0, pageCount)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.areListingsDirty">
            <summary>
            If true, listings should be re-filtered when opening the menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.ECategoryFilter.Bundles">
            <summary>
            Collections of multiple items. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.ECategoryFilter.Specials">
            <summary>
            Discounted items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.ECategoryFilter.New">
            <summary>
            Items marked as new in the Status.json file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreMenu.ECategoryFilter.Featured">
            <summary>
            Items marked as featured in the Status.json file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.QuestAsset.abandonmentRewardsList">
            <summary>
            Rewards to grant when quest is removed without completing.
            Not granted when player finishes quest.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WorkshopDownloadConfig">
            <summary>
            Configuration for DedicatedUGC.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.File_IDs">
            <summary>
            Published workshop file IDs to download.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Ignore_Children_File_IDs">
            <summary>
            Published workshop file IDs whose children (dependencies) should be skipped.
            Useful if workshop author lists dependencies as a way of advertising.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Query_Cache_Max_Age_Seconds">
            <summary>
            Controls SetAllowCachedResponse. Disabled when set to zero.
            Balance between item change frequency and allowing cached results when query fails.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Max_Query_Retries">
            <summary>
            Number of total times to try re-submitting failed workshop queries before aborting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Use_Cached_Downloads">
            <summary>
            Should items already installed be loaded?
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Should_Monitor_Updates">
            <summary>
            Should used items be monitored for updates?
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Shutdown_Update_Detected_Timer">
            <summary>
            Seconds to wait before shutting down after an update is detected.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Shutdown_Update_Detected_Message">
            <summary>
            Message broadcasted when shutdown timer begins.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadConfig.Shutdown_Kick_Message">
            <summary>
            Message sent to players when shutdown timer completes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadConfig.get">
            <summary>
            Get instance if loaded, but do not load.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadConfig.getOrLoad">
            <summary>
            Get instance, or load if not yet loaded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.INPCCondition.uiRequirementIndices">
            <summary>
            If set, only show this condition in the UI when conditions with these indices are met.
            For example don't show "arrest the criminal (name)" until "investigate crime" is completed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.INPCCondition.isAssociatedWithFlag(System.UInt16)">
            <summary>
            Is this condition influenced by a given quest flag?
            Used by level objects to determine if local player's flag change may affect visibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.INPCCondition.GatherAssociatedFlags(System.Collections.Generic.HashSet{System.UInt16})">
            <summary>
            Replacement for isAssociatedWithFlag to fix quest conditions and somewhat improve perf.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectInteractabilityNav.NONE">
            <summary>
            State doesn't affect AI collision.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectInteractabilityNav.ON">
            <summary>
            AI collision is blocked when object state is ON.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectInteractabilityNav.OFF">
            <summary>
            AI collision is blocked when object state is OFF.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EObjectRubbleNavMode">
            <summary>
            Controls how rubble affects Nav game object.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectRubbleNavMode.Unaffected">
            <summary>
            Default. Destruction of rubble sections does not affect whether Nav game object is active or not.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectRubbleNavMode.DeactivateIfAllDead">
            <summary>
            AI collision is blocked when any sections are alive. Once all sections are dead AI collision is unblocked.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WebUtils.ParseThirdPartyUrl(System.String,System.String@,System.Boolean,System.Boolean)">
            <summary>
            The game uses Process.Start to open web links when the Steam overlay is unavailable, which could be exploited
            to e.g. download and execute files. To prevent this we only allow valid http or https urls.
            </summary>
            <param name="autoPrefix">If true, prefix with https:// if neither http:// or https:// is specified.</param>
        </member>
        <member name="M:SDG.Unturned.WebUtils.CanParseThirdPartyUrl(System.String,System.Boolean,System.Boolean)">
            <summary>
            This version just doesn't return the parsed URL.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTable.GetRandomAsset">
            <summary>
            Resolve spawn table asset if set, otherwise find asset by legacy in-editor ID configuration.
            Returned asset is not necessarily a vehicle asset yet: It can also be a VehicleRedirectorAsset which the
            vehicle spawner requires to properly set paint color.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTable.GetRandomLegacyVehicleId">
            <summary>
            Used when spawn table asset is not assigned. Pick a random legacy ID using in-editor list of spawns.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMaskAsset.FilterDegradationRateMultiplier">
            <summary>
            Multiplier for how quickly deadzones deplete a gasmask's filter quality.
            e.g., 2 is faster (2x) and 0.5 is slower.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemMaskAsset.cosmeticPreviewMythicId">
            <summary>
            Hack for previewing the "aura" cosmetic items.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NPCTool.getActiveHoliday">
            <summary>
            Was redirected to HolidayUtil but kept for plugin backwards compatibility.
            Refer to HolidayUtil for explanation of this weird situation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NPCTool.isHolidayActive(SDG.Unturned.ENPCHoliday)">
            <summary>
            Was redirected to HolidayUtil but kept for plugin backwards compatibility.
            Refer to HolidayUtil for explanation of this weird situation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GlazierImage_uGUI.pivotTransform">
            <summary>
            The base transform does not rotate, instead a child transform is created with the pivot in the center.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GlazierImage_uGUI.desiredTexture">
            <summary>
            To work around a uGUI bug we always a sign a texture, even if desiredTexture is null.
            </summary>
        </member>
        <member name="E:SDG.Unturned.CommandWindow.onTitleChanged">
            <summary>
            Broadcasts after dedicated server name changes.
            Command IO interface binds to this rather than having a title-specific method.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CommandWindow.shouldCreateDefaultConsole">
            <summary>
            Should the default console I/O handler be created?
            Plugins can disable on the command line when overriding handler.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CommandWindow.shouldCreateLegacyConsole">
            <summary>
            Should the legacy blocking (game thread) console be created?
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.Log(System.Object)">
            <summary>
            Log white information.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.LogWarning(System.Object)">
            <summary>
            Log yellow warning.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.LogError(System.Object)">
            <summary>
            Log red error.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.internalLogInformation(System.String)">
            <summary>
            Print white message to console.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.internalLogWarning(System.String)">
            <summary>
            Print yellow message to console.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.internalLogError(System.String)">
            <summary>
            Print red message to console.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.HandleException(System.String,System.Exception)">
            <summary>
            Cannot use UnturnedLog here because it may recursively call CommandWindow if another exception is thrown.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.update">
            <summary>
            Called during Unity Update loop.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.shutdown">
            <summary>
            Called during OnApplicationQuit.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandWindow.removeDefaultIOHandler">
            <summary>
            Helper for plugins that want to replace the default without the shouldCreateDefaultConsole flag.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.hasNextDialogue">
            <summary>
            If true, the player can press Interact [F] when there are no responses
            and the "next" dialogue will be opened.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.dialoguePageIndex">
            <summary>
            Each dialogue message is separated into multiple pages.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.pageFormattedText">
            <summary>
            Current page localized text with name_npc and name_char formatted in.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.pageAnimationTime">
            <summary>
            Seconds elapsed while viewing current page not including pause timer.
            Used to gradually show the message text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.pauseTimer">
            <summary>
            Seconds to wait before resuming pageAnimationTime counting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.animatedTextBuilder">
            <summary>
            Appends chars from pageFormattedText according to pageAnimationTime.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.animatedTextClosingRichTags">
            <summary>
            Rich text formatting tags to close those opened by visible text in animatedTextBuilder.
            For example, if animatedTextBuilder includes an opening color=#, this includes the closing color markup.
            Required depending on Glazier used.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.animatedCharsVisibleCount">
            <summary>
            Number of chars of pageFormattedText currently visible.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.pageAnimationTimeVisibleCharsOffset">
            <summary>
            Added to animation visible chars to skip time on markup.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.responsesVisibleTime">
            <summary>
            Seconds elapsed since responses started becoming visible.
            Used to gradually enable responses rather than all at once.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCDialogueUI.visibleResponsesCount">
            <summary>
            Animated toward total number of responses to make them gradually visible.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerNPCDialogueUI.CanAdvanceToNextPage">
            <summary>
            If true, animation is finished and there is another page to show when Interact [F] is pressed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerNPCDialogueUI.IsDialogueAnimating">
            <summary>
            If true, text on current page is in the process of gradually appearing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerNPCDialogueUI.OpenCurrentDialogue">
            <summary>
            Used by quest UI to return to current dialogue.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerNPCDialogueUI.UpdatePage">
            <summary>
            Update timers and UI for current page index.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerNPCDialogueUI.AdvancePage">
            <summary>
            Called when the player presses Interact [F] in dialogue screen.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerNPCDialogueUI.SkipAnimation">
            <summary>
            Show complete text for the current page and make responses visible.
            Called if dialogue animation is disabled, and when the player presses Interact [F] during animation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectInteractabilityHint.CUSTOM">
            <summary>
            Use "Interact" token from translation file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDescriptionBuilder.shouldRestrictToLegacyContent">
            <summary>
            If true, description should only be populated with contents from prior to the auto-layout UI changes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDescriptionBuilder.stringBuilder">
            <summary>
            BuildDescription implementations can use this to concatenate longer strings.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EEquipableModelParent">
            <summary>
            Which parent to use when attaching an equipped/useable item to the player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.shouldAlwaysLoadItemPrefab">
            <summary>
            Helper for plugins that want item prefabs server-side.
            e.g. Allows item icons to be captured on dedicated server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.econIconUseId">
            <summary>
            Hack for Kuwait aura icons.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.useableType">
            <summary>
            Useable subclass.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.canPlayerEquip">
            <summary>
            Can this useable be equipped by players?
            True for most items, but allows modders to create sentry-only weapons.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.canUseUnderwater">
            <summary>
            Can this useable be equipped while underwater?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.iconCameraOrthographicSize">
            <summary>
            Vertical half size of icon camera.
            Values less than zero are disabled.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.econIconCameraOrthographicSize">
            <summary>
            Vertical half size of economy icon camera.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.isEligibleForAutomaticIconMeasurements">
            <summary>
            Should the newer automatic placement and orthographic size for axis-aligned icon cameras be used?
            Enabled by default, but optionally disabled for manual adjustment.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.EquipableModelParent">
            <summary>
            Which parent to use when attaching an equipped/useable item to the player.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.ShouldAttachEquippedModelToLeftHand">
            <summary>
            If true, equipable prefab is a child of the left hand rather than the right.
            Defaults to false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.shouldProcedurallyAnimateInertia">
            <summary>
            Whether viewmodel should procedurally animate inertia of equipped item.
            Useful for low-quality older animations, but modders may wish to disable for high-quality newer animations.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.shouldLeftHandedCharactersMirrorEquippedItem">
            <summary>
            Defaults to true. If false, the equipped item model is flipped to counteract the flipped character.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.isEligibleForAutoStatDescriptions">
            <summary>
            If true, stats like damage, accuracy, health, etc. are automatically appended to the description.
            Defaults to true.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.item">
            <summary>
            Nelson 2024-12-11: This can now be null for cosmetic items (<see cref="F:SDG.Unturned.ItemAsset.isPro"/>). For those items it wasn't
            used outside of the main menu 3D item preview, in which case the clothing prefab is typically a better
            visualization.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.equipablePrefab">
            <summary>
            Optional alternative item prefab specifically for the PlayerEquipment prefab spawned.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.instantiatedItemName">
            <summary>
            Name to use when instantiating item prefab.
            By default the asset legacy id is used, but it can be overridden because some
            modders rely on the name for Unity's legacy animation component. For example
            in Toothy Deerryte's case there were a lot of duplicate animations to work
            around the id naming, simplified by overriding name.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.equipableMovementSpeedMultiplier">
            <summary>
            Movement speed multiplier while the item is equipped in the hands.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.inspectAudio">
            <summary>
            Sound to play when inspecting the equipped item.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.inventoryAudio">
            <summary>
            Sound to play when moving or rotating the item in the inventory.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.shouldDropOnDeath">
            <summary>
            When a player dies with this item, should an item drop be spawned?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.allowManualDrop">
            <summary>
            Can player click the drop button on this item?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.sharedSkinLookupID">
            <summary>
            If this item is compatible with skins for another item, lookup that item's ID instead.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.SharedSkinShouldApplyVisuals">
            <summary>
            Defaults to true. If false, skin material and mesh are not applied when <see cref="P:SDG.Unturned.ItemAsset.sharedSkinLookupID"/> is
            set. For example, a custom axe can transfer the kill counter and ragdoll effect from a vanilla item's skin
            without also transferring the material and mesh.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.shouldFriendlySentryTargetUser">
            <summary>
            Should friendly-mode sentry guns target a player who has this item equipped?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.isDangerous">
            <summary>
            Kept in case any plugins refer to it.
            Renamed to shouldFriendlySentryTargetUser.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemAsset.canBeUsedInSafezone(SDG.Unturned.SafezoneNode,System.Boolean)">
            <summary>
            Should players be allowed to start primary/secondary use of this item while inside given safezone?
            If returns false the primary/secondary inputs are set to false.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.shouldDeleteAtZeroQuality">
            <summary>
            Should this item be deleted when using and quality hits zero?
            e.g. final melee hit shatters the weapon.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.shouldDestroyItemColliders">
            <summary>
            Should the game destroy all child colliders on the item when requested?
            Physics items in the world and on character preview don't request destroy,
            but items attached to the character do. Mods might be using colliders
            in unexpected ways (e.g., riot shield) so they can disable this default.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemAsset.doesItemTypeHaveSkins">
            <summary>
            Are there any official skins for this item type?
            Skips checking for base textures if item cannot have skins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemAsset.updateUseableType(SDG.Unturned.DatDictionary)">
            <summary>
            Find useableType by useable name.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_RarityAndType">
            sortOrder values for description lines.
            Difference in value greater than 100 creates an empty line.
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_Weapon_NonExplosive_Common">
            <summary>
            Properties common to Gun and Melee.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_BuildableCommon">
            <summary>
            Properties common to Barricade and Structure.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_Weapon_Explosive_RangeAndDamage">
            <summary>
            Properties common to Gun, Consumable, and Throwable.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_Weapon_NonExplosive_PlayerDamage">
            <summary>
            Properties common to Gun and Melee.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_Weapon_NonExplosive_ZombieDamage">
            <summary>
            Properties common to Gun and Melee.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_Weapon_NonExplosive_AnimalDamage">
            <summary>
            Properties common to Gun and Melee.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemAsset.DescSort_Weapon_NonExplosive_OtherDamage">
            <summary>
            Properties common to Gun and Melee.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MasterBundle">
            <summary>
            Remaps asset load requests into a large asset bundle rather than small individual asset bundles.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundle.cfg">
            <summary>
            Config that contains the actual large AssetBundle.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundle.relativePath">
            <summary>
            Asset path relative to the master AssetBundle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekItemStoreListing.cartImage">
            <summary>
            Icon visible when this listing is in the cart.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekItemStoreListing.stampLabel">
            <summary>
            "SALE" or "NEW" text visible when applicable.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GlazierToggle_IMGUI.TooltipText">
            <summary>
            Tooltip text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GlazierToggle_IMGUI.content">
            <summary>
            Holds tooltip text
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.compressedVoiceBuffer">
            <summary>
            Speaker writes compressed audio to this buffer.
            Listener copies network buffer here for decompression.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.DECOMPRESSED_VOICE_BUFFER">
            <summary>
            Listener writes decompressed PCM data to this buffer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.RECORDING_POLL_INTERVAL">
            <summary>
            Seconds interval to wait between asking recording subsystem for voice data.
            Rather than polling every frame we wait until data has accumulated to send.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.PLAYBACK_DELAY">
            <summary>
            Seconds to wait before playing back newly received data.
            Allows a few samples to buffer up so that we don't stutter as more arrive.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.SILENCE_DURATION">
            <summary>
            Seconds to wait after playback before stopping audio source.
            We zero this portion of the clip to prevent pops.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.EXPECTED_ASKVOICE_PER_SECOND">
            <summary>
            Max calls to askVoice server will allow per second before blocking their voice data.
            Prevents spamming many tiny requests bogging down server output.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.EXPECTED_BYTES_PER_SECOND">
            <summary>
            Max compressed bytes server will allow per second before blocking their voice data.
            When logging compressed size they averaged 3000-5000 per second, so this affords some wiggle-room.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice._isTalking">
            <summary>
            Internal value managed by isTalking.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.isTalking">
            <summary>
            Is this player broadcasting their voice?
            Used in the menus to show an indicator who's talking.
            Locally set when recording starts/stops, and remotely when voice data starts/stops being received.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerVoice.onTalkingChanged">
            <summary>
            Broadcasts after isTalking changes.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.canHearRadio">
            <summary>
            Can this player currently hear global (radio) voice chat?
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.hasEarpiece">
            <summary>
            Is the player wearing an earpiece?
            Allows global (radio) voice chat to be heard without equipping the walkie-talkie item.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.hasUseableWalkieTalkie">
            <summary>
            Is a UseableWalkieTalkie currently equipped?
            Set by useable's equip and dequip events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.playbackUsingWalkieTalkie">
            <summary>
            Was the most recent voice data we received sent using walkie talkie?
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.hasPendingVoiceData">
            <summary>
            Has voice data recently been received, but we're waiting slightly to begin playback?
            Important to give clip a chance to buffer up so that we don't stutter as more samples arrive.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.isPlayingVoiceData">
            <summary>
            AudioSource.isPlaying is not trustworthy.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.pendingPlaybackDelay">
            <summary>
            Timer counting down to begin playback of recently received voice data.
            We use a timer rather than availableSamples.Count because a very short phrase could be less than threshold.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.availablePlaybackTime">
            <summary>
            Timer counting down to end playback.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.pollRecordingTimer">
            <summary>
            Accumulated realtime since we last polled data from voice subsystem.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.lastAskVoiceRealtime">
            <summary>
            Last time askVoiceChat was invoked over network.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.recentVoiceCalls">
            <summary>
            Number of times askVoiceChat has been called recently, to prevent calling it many times
            with tiny durations getting server to relay many packets to clients.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.recentVoiceBytes">
            <summary>
            Total of recent compressed voice payload lengths.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.recentVoiceDuration">
            <summary>
            Realtime since this recent conversation began.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerVoice.onRelayVoice">
            <summary>
            Only used by plugins.
            Called on server to allow plugins to override the default area and walkie-talkie voice channels.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.handleRelayVoiceCulling_RadioFrequency(SDG.Unturned.PlayerVoice,SDG.Unturned.PlayerVoice)">
            <summary>
            Default culling handler when speaking over walkie-talkie.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.handleRelayVoiceCulling_Proximity(SDG.Unturned.PlayerVoice,SDG.Unturned.PlayerVoice)">
            <summary>
            Default culling handler when speaking in proximity.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.ReceiveVoiceChatRelay(SDG.Unturned.ServerInvocationContext@)">
            <summary>
            Called by owner to relay voice data to clients.
            Not using rate limit attribute because it internally tracks bytes per second.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.ReceivePlayVoiceChat(SDG.Unturned.ClientInvocationContext@)">
            <summary>
            Called by server to relay voice data from clients.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.isBeingDestroyed">
            <summary>
            Set to true during OnDestroy to make sure we don't start recording again.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.SteamIsRecording">
            <summary>
            If true, SteamUser.StartVoiceRecording has been called without a corresponding call to
            SteamUser.StopVoiceRecording yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.inputToggleState">
            <summary>
            If true, voice toggle is in ON mode.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice._inputWantsToRecord">
            <summary>
            Internal value managed by inputWantsToRecord.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.inputWantsToRecord">
            <summary>
            Set by updateInput based on whether voice is enabled, key is held, is alive, etc.
            Reset to false during OnDestroy to stop recording.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.updateInput">
            <summary>
            Called during Update on owner client to start/stop recording.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.updateRecording">
            <summary>
            Called during Update on owner client to record voice data.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.playWalkieTalkieSound">
            <summary>
            Play walkie-talkie squawk at our position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerVoice.updatePlayback">
            <summary>
            Start and stop playback of received audio stream.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.canEverRecord">
            <summary>
            Will this component ever need to record voice data?
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerVoice.canEverPlayback">
            <summary>
            Will this component ever need to play voice data?
            In release builds this is only true for remote clients, but in debug we may want to locally listen.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.audioSource">
            <summary>
            Player's voice audio source cached during Start.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.audioClip">
            <summary>
            Looping voice audio clip.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.audioData">
            <summary>
            Playback buffer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.steamOptimalSampleRate">
            <summary>
            Steam does less work on the main thread if we request samples at the native decompresser sample rate,
            so the re-sampling can be done on the Unity audio thread instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.secondsPerSample">
            <summary>
            1 / frequency
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerVoice.zeroSamples">
            <summary>
            Number of samples to zero after writing new audio data.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableMannequin.isObstructedByPlayers">
            <summary>
            Are any players standing on the mannequin?
            Used to prevent exploiting pose switches to push through objects.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemFarmAsset.harvestRewardExperience">
            <summary>
            Amount of experience to reward harvesting player.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemFarmAsset.isAffectedByAgricultureSkill">
            <summary>
            If true, harvesting has a chance to provide a second item.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemFarmAsset.shouldRainAffectGrowth">
            <summary>
            If true, rain will finish growing the plant.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemFarmAsset.harvestRewardsList">
            <summary>
            NPC rewards to grant upon harvesting the crop.
            </summary>
        </member>
        <member name="T:SDG.Unturned.VendorSellingItem">
            <summary>
            Represents an item the vendor is selling to players.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VendorSellingItem.GetGunStateOverride(SDG.Unturned.ItemGunAsset)">
            <summary>
            Refer to NPCItemReward state.
            </summary>
        </member>
        <member name="T:SDG.Unturned.VendorSellingVehicle">
            <summary>
            Represents a vehicle the vendor is selling to players.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VendorSellingVehicle.FindAsset">
            <summary>
            Returned asset is not necessarily a vehicle asset yet: It can also be a VehicleRedirectorAsset which the
            vehicle spawner requires to properly set paint color.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VendorSellingVehicle.paintColor">
            <summary>
            If set, takes priority over VehicleRedirectorAsset's paint color and over VehicleAsset's default paint color.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInventoryUI.dragOutsideHandler">
            <summary>
            Added during the UI refactor to catch unhandled mouse clicks during drag.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInventoryUI.selectionFrame">
            <summary>
            Contains inspect item box and invisible button.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInventoryUI.outsideSelectionInvisibleButton">
            <summary>
            Added during the UI refactor to catch mouse clicks outside the selection box.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerDashboardInventoryUI.setMiscButtonsEnabled(System.Boolean)">
            <summary>
            Annoying frustrating workaround for IMGUI. Disable inventory headers, grids and slots while selection is open
            to prevent them from interfering with selection menu.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerDashboardInventoryUI.WasEventConsumed">
            <summary>
            Was ConsumeEvent called during this frame?
            This is a hack to prevent firing when clicking in the UI on the same frame it closes.
            Moved from SleekWindow and Event.current.Use() during UI refactor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerDashboardInventoryUI.refreshDraggedVisualPosition">
            <summary>
            Move item drag visual to the cursor's position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CosmeticPreviewCapture.RenderDefaultCharacter">
            <summary>
            Render character with hair and skin otherwise it might be cyan.
            (public issue #3615)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ParticleSystemCollisionAudio.materialPropertyName">
            <summary>
            If set, audio clip associated with physics material will take priority.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ParticleSystemCollisionAudio.speedThreshold">
            <summary>
            Collision with speed lower than this value will not play a sound.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ParticleSystemCollisionAudio.OnParticleTrigger">
            <summary>
            Currently triggers are only used for water.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EconSortMode_Rarity">
            <summary>
            Sorts higher rarity items into the front of the list.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EconSortMode_Name">
            <summary>
            Sorts name alphabetically to the front of the list.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EconSortMode_Type">
            <summary>
            Sorts type alphabetically to the front of the list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherComponentBase.globalBlendAlpha">
            <summary>
            [0, 1] blends towards one while active regardless of local volume.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherComponentBase.localVolumeBlendAlpha">
            <summary>
            [0, 1] blends towards one if current volume bitwise AND with asset is non-zero.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherComponentBase.EffectBlendAlpha">
            <summary>
            Lesser of global or volume blend alphas. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherComponentBase.hasTickedBlending">
            <summary>
            If blending was not ticket yet then local blend can use global value, e.g. loading into rain storm.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherComponentBase.isFullyTransitionedIn">
            <summary>
            Is blendAlpha at 100%?
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherComponentBase.puddleWaterLevel">
            <summary>
            [0, 1] Rain puddle alpha cutoff.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherComponentBase.puddleIntensity">
            <summary>
            [0, 1] Rain puddle ripples alpha.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ClientInvocationContext">
            <summary>
            Optional parameter for error logging.
            </summary>
        </member>
        <member name="T:SDG.Unturned.HashStream">
            <summary>
            Run hash algorithm for all data passing through a stream.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MenuWorkshopSubscriptionsUI">
            <summary>
            Repurposed from the Modules UI because it was unused.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandLine.TryGetSteamConnect(System.String,System.UInt32@,System.UInt16@,System.String@)">
            <summary>
            When Steam parses a steam://connect/ip:port URL it requires the query port (e.g. 27015).
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandLine.TryParseValue(System.String,System.String,System.String@)">
             <summary>
             Handles these cases:
             key value -> value
             key=value -> value
             key = value -> value
             key  =  value -> value
             key "value with spaces" -> value with spaces
             key "value with \" quotation marks" -> value with " quotation marks
            
             Tested in CommandLineTests.cs
             </summary>
        </member>
        <member name="P:SDG.Unturned.Dedicator.IsDedicatedServer">
            <summary>
            Is the application running as a headless server?
            Replacement for isDedicated property. The property could not be changed to const in dedicated-server-only
            builds without potentially breaking plugins. Only development builds can be run as both client or server.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Dedicator.isStandaloneDedicatedServer">
            <summary>
            Are we currently running the standalone dedicated server app?
            </summary>
        </member>
        <member name="F:SDG.Unturned.Dedicator.offlineOnly">
            <summary>
            Should dedicated server disable requests to internet?
            While in LAN mode skips the Steam backend connection and workshop item queries.
            Needs a non-Steam networking implementation before it will be truly offline only.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerUI.ShouldIgnoreHintAndMessageRequests">
            <summary>
            Hints/messages are the pop-up texts below the interaction prompt, e.g. "reload" or "full moon rises". 
            Got a complaint that the item placement obstructed hint was shown if placing multiple signs.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerUI.updateGroupLabels">
            <summary>
            Adjust screen positioning and visibility of player name widgets to match their world-space counterparts.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerUI.updateHitmarkers">
            <summary>
            Update hitmarker visibility, and their world-space positions if user enabled that.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerUI.updateHintsAndMessages">
            <summary>
            Disable hints and messages if no longer applicable.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerUI.updateVoteDisplay">
            <summary>
            Disable vote popup if enough time has passed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerUI.updatePauseTimeScale">
            <summary>
            Pause the game if playing singleplayer and menu is open.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerUI.canOpenMenus">
            <summary>
            Many places checked that the cursor and chat were closed to see if a menu could be opened. Moved here to
            also consider that useable might have a menu open.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableSentry.GetBulletDamageMultiplier(System.Single)">
            <summary>
            Calculate damage multiplier for individual bullet.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableSentry.CalculateChanceToHitSpreadMultiplier(System.Single)">
            <summary>
            Each shot has a percentage chance to hit the target. Higher values are more likely to hit. e.g., it
            decreases from 1.0 at point blank to 0.0 at the weapon's maximum range. This chance is affected by the
            gun's spread.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuPlayServersUI.presetsContainer">
            <summary>
            Contains presetsScrollView which contains customPresetsContainer and defaultPresetsContainer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuPlayServersUI.mainListContainer">
            <summary>
            Contains column buttons and server list itself.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuPlayServersUI.SynchronizeFilterButtons">
            <summary>
            Synchronize widgets with their values.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelIconCache">
            <summary>
            Each level should have a 380x80 Icon.png file.
            This class caches them so that the server list can show them quickly.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ArenaPlayer.lastAreaDamage">
            <summary>
            Time.time damage was last dealt so that damage is applied once per second.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ArenaPlayer.timeOutsideArea">
            <summary>
            Timer increased while taking damage, and reset to zero while inside zone.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AirdropInfo.dropPosition">
            <summary>
            Calculated position (not directly replaced) to spawn falling box.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelManager.isArenaMode">
            <summary>
            Is the active level an Arena mode map?
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelManager.getArenaTarget(UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,System.Single@)">
            <summary>
            Find a new smaller circle within the old circle and clamp it to the playable level area.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAssetBase.fadeInDuration">
            <summary>
            Seconds between weather event starting and reaching full intensity.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAssetBase.fadeOutDuration">
            <summary>
            Seconds between weather event ending and reaching zero intensity.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAssetBase.ambientAudio">
            <summary>
            Sound clip to play. Volume matches the intensity.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAssetBase.componentType">
            <summary>
            Component to spawn for additional weather logic.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAssetBase.volumeMask">
            <summary>
            If per-volume mask AND is non zero the weather will blend in.
            </summary>
        </member>
        <member name="T:SDG.Unturned.PhysicsMaterialAsset">
            <summary>
            Expands upon Unity physics material properties for gameplay features.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialAsset.physicMaterialNames">
            <summary>
            Originally considered assets for each legacy material with fallback to main material, but the fallback
            would mean a failed lookup for every property in the vast majority of cases.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialAsset.isArable">
            <summary>
            If true, crops can be planted on this material.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialAsset.hasOil">
            <summary>
            If true, oil drills can be placed on this material.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialAsset.characterAccelerationMultiplier">
            <summary>
            For custom friction mode, multiplies character acceleration.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialAsset.characterDecelerationMultiplier">
            <summary>
            For custom friction mode, multiplies character deceleration.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialAsset.characterMaxSpeedMultiplier">
            <summary>
            For custom friction mode, multiplies character max speed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VolumeManagerBase.allManagers">
            <summary>
            Auto-registering list of volume manager subclasses for level editor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VolumeManager`2.allowInstantiation">
            <summary>
            Should calling InstantiateVolume create a new volume?
            False for deprecated (landscape hole volume) types.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UnturnedDatEx">
            <summary>
            These are methods moved from the Data class which rely on core types and so cannot go in the UnturnedDat assembly.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedDatEx.ParseGuidOrLegacyId(SDG.Unturned.DatDictionary,System.String,System.Guid@)">
            <summary>
            Intended as a drop-in replacement for existing assets with property uint16s.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableTrap.explosion2">
            <summary>
            Kept because lots of modders have been using this script in Unity,
            so removing legacy effect id would break their content.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PurchaseNode.radius">
            <summary>
            This value is confusing because in the level editor it is the normalized radius, but in-game it is the square radius.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GraphicsSettingsData.FarClipDistance">
            <summary>
            Far clip plane multiplier in-game.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GraphicsSettingsData.EditorFarClipDistance">
            <summary>
            Far clip plane multiplier in level editor.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MasterBundleReference`1">
            <summary>
            Essentially identical to ContentReference, but MasterBundle is more convenient.
            Perhaps in the future all asset/content systems will be consolidated.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleReference`1.isNull">
            <summary>
            Are name or path null or empty?
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleReference`1.isValid">
            <summary>
            Are both name and path non-null and non-empty?
            </summary>
        </member>
        <member name="F:SDG.Unturned.MasterBundleReference`1.name">
            <summary>
            Name of master bundle file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MasterBundleReference`1.path">
            <summary>
            Path to Unity asset within asset bundle.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerTool.findSteamPlayerByChannel(System.Int32)">
            <summary>
            Find client with given RPC channel ID.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWorkshopDownloadRestrictionResult.NoRestrictions">
            <summary>
            Workshop item does not have any IP restrictions in place.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWorkshopDownloadRestrictionResult.NotWhitelisted">
            <summary>
            Workshop item has an IP whitelist, and server IP is not on it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWorkshopDownloadRestrictionResult.Blacklisted">
            <summary>
            Workshop item has an IP blacklist, and server IP is on it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWorkshopDownloadRestrictionResult.Allowed">
            <summary>
            Workshop item does have IP restrictions, and server IP is allowed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWorkshopDownloadRestrictionResult.Banned">
            <summary>
            Workshop item has been banned by an admin.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EWorkshopDownloadRestrictionResult.PrivateVisibility">
            <summary>
            Workshop item is hidden from everyone.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WorkshopDownloadRestrictions">
            <summary>
            Utilities for testing whether a particular server is allowed to download a workshop item.
            Available from client and server side so that clients can help enforce restrictions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WorkshopDownloadRestrictions.IP_RESTRICTIONS_KVTAG">
            <summary>
            Workshop item key-value tag storing IP whitelist and blacklist.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadRestrictions.getAllowedIpsTagValue(Steamworks.UGCQueryHandle_t,System.UInt32)">
            <summary>
            Get ip restrictions value if set, otherwise null.
            Can be called from client or server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadRestrictions.getRestrictionResult(System.String,System.UInt32)">
            <summary>
            Test whether IP is whitelisted or blacklisted in filter.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadRestrictions.splitAllowedIPs(System.String,System.String[]@,System.String[]@)">
            <summary>
            Split x,y-z format into whitelist [x, y] and blacklist [z].
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadRestrictions.parseAllowedIPs(System.String,System.UInt32[]@,System.UInt32[]@)">
            <summary>
            Split whitelist-blacklist format and parse string IPs into integer IPs.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopDownloadRestrictions.parseStringIps(System.String[],System.UInt32[]@)">
            <summary>
            Parse CIDR string IPs into integer IPs.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.playerDamageFood">
            <summary>
            Added to player's food value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.playerDamageWater">
            <summary>
            Added to player's water value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.playerDamageVirus">
            <summary>
            Added to player's virus value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.playerDamageHallucination">
            <summary>
            Added to player's hallucination value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.animalOrPlayerDamageMultiplier">
            <summary>
            Get animal or player damage based on game mode config.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.zombieOrPlayerDamageMultiplier">
            <summary>
            Get zombie or player damage based on game mode config.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.allowFleshFx">
            <summary>
            Should player/animal/zombie surface be nulled on hit?
            Requested by spyjack for a chainsaw-style shield that was overboard with the blood.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemWeaponAsset.bypassAllowedToDamagePlayer">
            <summary>
            Should this weapon bypass the DamageTool.allowedToDamagePlayer test?
            Used by weapons that heal players in PvE.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemWeaponAsset.BuildExplosiveDescription(SDG.Unturned.ItemDescriptionBuilder,SDG.Unturned.Item)">
            <summary>
            Please refer to ItemWeaponAsset.BuildDescription for an explanation of why this is necessary.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemWeaponAsset.BuildNonExplosiveDescription(SDG.Unturned.ItemDescriptionBuilder,SDG.Unturned.Item)">
            <summary>
            Please refer to ItemWeaponAsset.BuildDescription for an explanation of why this is necessary.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LocalHwid">
             <summary>
             Utility for getting local hardware ID.
            
             One option for future improvement would be using Windows Management Infrastructure (WMI) API:
             https://github.com/SmartlyDressedGames/Unturned-3.x/issues/1593
             </summary>
        </member>
        <member name="F:SDG.Unturned.LocalHwid.MAX_HWIDS">
            <summary>
            Maximum number of HWIDs before server will reject connection request.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LocalHwid.GetHwids">
            <summary>
            Get the local hardware ID(s).
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPluginAdvertising.NotifyGameServerReady">
            <summary>
            Called once key/values can be set.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LodGroupExtension.GetCullingScreenSize(UnityEngine.LODGroup)">
            <summary>
            Lod group will be culled when screen size is smaller than this value.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LodGroupExtension.ClampCulling(UnityEngine.LODGroup,System.Single)">
            <summary>
            Clamp the culling screen percentage to be less than or equal to a maximum value.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LodGroupExtension.DisableCulling(UnityEngine.LODGroup)">
            <summary>
            Prevent the lowest LOD from being culled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.armor">
            <summary>
            Multiplier to incoming damage. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.explosionArmor">
            <summary>
            Multiplier to explosive damage. Defaults to <see cref="P:SDG.Unturned.ItemClothingAsset.armor"/> value if Armor_Explosion isn't specified.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.fallingDamageMultiplier">
            <summary>
            Armor against falling damage. Defaults to 1.0, i.e., take the normal amount of damage.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.preventsFallingBrokenBones">
            <summary>
            If true on any worn clothing item, bones never break when falling.
            Defaults to false.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemClothingAsset.shouldMirrorLeftHandedModel">
            <summary>
            Left-handed character skeleton is mirrored, so most item models are mirrored again to preserve appearance.
            Unfortunately this does not work well for some items e.g. the particle system on Elver/Dango glasses.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemClothingAsset.wearAudio">
            <summary>
            Sound to play when equipped.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.skinOverride">
            <summary>
            If set, find a child meshrenderer with this name and change its material to the character skin material.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.TakesPriorityOverCosmetic">
            <summary>
            The player can be wearing both a "real" in-game item and a cosmetic item in the same clothing slot.
            If true, the real item is shown rather than the cosmetic item. For example, night vision goggles
            are shown over any glasses cosmetic because of their gameplay-related green glow.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemClothingAsset.priorityOverCosmeticOverride">
            <summary>
            Overrides value of TakesPriorityOverCosmetic if <see cref="F:SDG.Unturned.ItemClothingAsset.hasPriorityOverCosmeticOverride"/> is true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemClothingAsset.hasPriorityOverCosmeticOverride">
            <summary>
            If true, the value of <see cref="F:SDG.Unturned.ItemClothingAsset.priorityOverCosmeticOverride"/> is used rather than <see cref="M:SDG.Unturned.ItemClothingAsset.GetDefaultTakesPriorityOverCosmetic"/>.
            Defaults to false. True if <see cref="F:SDG.Unturned.ItemClothingAsset.priorityOverCosmeticOverride"/> is set.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemClothingAsset.ClothingPrefab">
            <summary>
            For 3D clothes. Ideally, this wouldn't be type specific, but we have a separate prefab property for each
            type of clothing at the moment.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemClothingAsset.GetDefaultTakesPriorityOverCosmetic">
            <summary>
            The player can be wearing both a "real" in-game item and a cosmetic item in the same clothing slot.
            This is called on the real item if <see cref="F:SDG.Unturned.ItemClothingAsset.priorityOverCosmeticOverride"/> has not been set.
            If true, the real item is shown rather than the cosmetic item. If false, the cosmetic item can be seen.
            </summary>
        </member>
        <member name="M:SDG.Unturned.OneShotAudioDefinition.ShuffleClips(System.Collections.Generic.List{UnityEngine.AudioClip})">
            <summary>
            Durstenfeld version of Fisher-Yates shuffle:
            https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm
            </summary>
        </member>
        <member name="M:SDG.Unturned.OneShotAudioDefinition.ReshuffleClips(System.Collections.Generic.List{UnityEngine.AudioClip})">
            <summary>
            Same as above, but prevent the last clip from being shuffled to the front in order to prevent repeats.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OneShotAudioDefinition.editorClips">
            <summary>
            Ensures we do not modify the asset in editor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Blueprint.withoutAttachments">
            <summary>
            If true, and transferState is enabled, delete attached items.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Blueprint.questConditions">
            <summary>
            Must match conditions to craft.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Blueprint.questRewards">
            <summary>
            Extra rewards given after crafting. Not displayed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Blueprint.canBeVisibleWhenSearchedWithoutRequiredItems">
            <summary>
            2023-05-27: requested by Renaxon because some Arid blueprints are debug-only and
            should not be visible when players search by name. (the 3.23.7.0 update made
            non-craftable blueprints searchable for Buak)
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.APP_VERSION_PACKED">
            <summary>
            App version string packed into a 32-bit number for replication.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.localizationRoot">
            <summary>
            Path to directory containing "Editor", "Menu", "Player", "Curse_Words.txt", etc files.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.battlEyeClientSendPacket(System.IntPtr,System.Int32)">
            <summary>
            Called clientside by BattlEye when it needs us to send a packet to the server.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Provider.onBattlEyeKick">
            <summary>
            Event for plugins when BattlEye wants to kick a player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.battlEyeServerSendPacket(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Called serverside by BattlEye when it needs us to send a packet to a player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.updateRichPresence">
            <summary>
            Call whenever something impacting rich presence changes for example loading a server or changing lobbies.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.CurrentServerAdvertisement">
            <summary>
            Only used on client.
            Information about current game server retrieved through Steam's "A2S" query system.
            Available when joining using the Steam server list API (in-game server browser)
            or querying the Server's A2S port directly (connect by IP menu), but not when
            joining by Steam ID.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.IsVacActiveOnCurrentServer">
            <summary>
            On client, is current server protected by VAC?
            Set after initial response is received.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.IsBattlEyeActiveOnCurrentServer">
            <summary>
            On client, is current server protected by BattlEye?
            Set after initial response is received.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.players">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.isWaitingForAuthenticationResponse">
            <summary>
            After client submits EServerMessage.Authenticate we are waiting
            for the EClientMessage.Accepted response.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.sentAuthenticationRequestTime">
            <summary>
            Realtime that client sent EServerMessage.Authenticate request.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.waitingForExpectedWorkshopItems">
            <summary>
            File IDs the client thinks the server advertised it was using, or null if UGC response was pending.
            Prevents the server from advertising a smaller or fake list of items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.authorityHoliday">
            <summary>
            Needed before loading level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.getServerWorkshopFileIDs">
            <summary>
            Only safe to use serverside.
            Get the list of workshop ids that a client needs to download when joining.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.registerServerUsingWorkshopFileId(System.UInt64)">
            <summary>
            Only safe to use serverside.
            Lets clients know that this workshop id is being used on the server, and that they need to download it when joining.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.allocPlayerChannelId">
            <summary>
            Channel id was 32-bits, but now that it is in the RPC header it can be 8-bits since there never that many
            players online. The "manager" components are on channel 1, and each player has a channel.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.hasRoomForNewConnection">
            <summary>
            Should the network transport layer accept incoming connections?
            If both the queue and connected slots are full then incoming connections are ignored.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.findPendingPlayer(SDG.NetTransport.ITransportConnection)">
            <summary>
            Find player in the queue associated with a client connection.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.findPlayer(SDG.NetTransport.ITransportConnection)">
            <summary>
            Find player associated with a client connection.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.findTransportConnection(Steamworks.CSteamID)">
            <summary>
            Find net transport layer connection associated with a client steam id. This could be a pending player in the
            queue, or a fully connected player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.findTransportConnectionSteamId(SDG.NetTransport.ITransportConnection)">
            <summary>
            Find player steam id associated with connection, otherwise nil if not found.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.verifyNextPlayerInQueue">
            <summary>
            If there's space on the server, asks player at front of queue for their verification to begin playing.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.onLoginSpawning">
            <summary>
            Called when determining spawnpoint during player login.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.isWaitingForConnectResponse">
            <summary>
            Is client waiting for response to ESteamPacket.CONNECT request?
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.sentConnectRequestTime">
            <summary>
            Realtime that client sent ESteamPacket.CONNECT request.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.canCurrentlyHandleClientTransportFailure">
            <summary>
            Nelson 2023-08-09: adding because in some cases, namely workshop download and level loading,
            we can't properly handle client transport failures because these loading systems don't
            currently support cancelling partway through. (public issue #4036)
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.clientTransport">
            <summary>
            Manages client to server communication.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.serverTransport">
            <summary>
            Manages server to client communication.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.connect(SDG.Unturned.ServerConnectParameters,SDG.Unturned.SteamServerAdvertisement,System.Collections.Generic.List{Steamworks.PublishedFileId_t})">
            <summary>
            Connect to server entry point on client.
            Requests workshop details for download prior to loading level.
            Once workshop is ready launch() is called.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.onClientTransportReady">
            <summary>
            Callback once client transport is ready to send messages.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.onClientTransportFailure(System.String)">
            <summary>
            Callback when something goes wrong and client must disconnect.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.launch">
            <summary>
            Multiplayer load level entry point on client.
            Called once workshop downloads are finished, or we know the server is not using workshop.
            Once level is loaded the connect packet is sent to the server.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Provider.onCommenceShutdown">
            <summary>
            Event for plugins prior to kicking players during shutdown.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.isVacActive">
            <summary>
            Set on the server when initializing Steam API.
            Used to notify pending clients whether VAC is active.
            Set on clients after initial response is received.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.isBattlEyeActive">
            <summary>
            Set on the server when initializing BattlEye API.
            Used to notify pending clients whether BE is active.
            Set on clients after initial response is received.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.disconnect">
            <summary>
            Client should call RequestDisconnect instead to ensure all disconnects have a logged reason.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.handleServerReady">
            <summary>
            Internet server callback when backend is ready.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.maybeLogCuratedMapFallback(System.String)">
            <summary>
            If missing map is a curated map then log information about how to install it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.STEAM_KEYVALUE_MAX_VALUE_LENGTH">
            <summary>
            Was not able to find documentation for this unfortunately,
            but it seems the max length is 127 characters as of 2022-09-12.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.AdvertiseFullDescription(System.String)">
            <summary>
            Set key/value tags on Steam server advertisement so that client can display text in browser.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.AdvertiseConfig">
            <summary>
            Set key/value tags on Steam server advertisement so that client can display server config in browser.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.send(Steamworks.CSteamID,SDG.Unturned.ESteamPacket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Primarily kept for backwards compatibility with plugins. Some RPCs that reply to sender also use this but
            should be tidied up.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.remapSteamPacketType(SDG.Unturned.ESteamPacket@)">
            <summary>
            Hack to deal with the oversight of reordering the ESteamPacket enum during net messaging rewrite causing
            older plugins to send wrong packet type.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.sendToClient(SDG.NetTransport.ITransportConnection,SDG.Unturned.ESteamPacket,System.Byte[],System.Int32)">
            <summary>
            Send to a connected client.
            </summary>
        </member>
        <member name="T:SDG.Unturned.Provider.WorkshopRequestLog">
            <summary>
            Workshop info is requested prior to authenticating so that it can be downloaded before joining,
            but cheat devs are abusing this to spam the server with workshop requests. This class keeps
            track of who and when requested that information.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.WorkshopRequestLog.sender">
            <summary>
            Hash code of remote connection.
            </summary>
        </member>
        <member name="T:SDG.Unturned.Provider.CachedWorkshopResponse">
            <summary>
            The server ignores workshop info requests if it's been less than 30 seconds,
            so we cache that info for 1 minute in-case we try to connect again right away.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.holiday">
            <summary>
            This information is needed before the level is loaded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.serverName">
            <summary>
            Advertised server name. e.g., "Nelson's Unturned Server"
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.levelName">
            <summary>
            Name of map to load.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.gameMode">
            <summary>
            Legacy difficulty mode that should be removed eventually.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.cameraMode">
            <summary>
            Perspective settings.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.ip">
            <summary>
            Server's IP from when we originally received response.
            Used to test download restrictions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.CachedWorkshopResponse.realTime">
            <summary>
            Last realtime this cache was updated.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.shouldNetIgnoreSteamId(Steamworks.CSteamID)">
            <summary>
            Hacked-together initial implementation to refuse network messages from specific players.
            On PC some cheats send garbage packets in which case those clients should be blocked.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.refuseGarbageConnection(Steamworks.CSteamID,System.String)">
            <summary>
            Close connection, and refuse all future connection attempts from a remote player.
            Used when garbage messages are received from hacked clients to avoid wasting time on them.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider._constNetEvents">
            <summary>
            Private to prevent plugins from changing the value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.useConstNetEvents">
            <summary>
            Should buffers used by plugin network events be read-only copies?
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.getChannelHeader(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            First four bytes of RPC messages are the channel id.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.bypassVersion">
            <summary>
            Should players be allowed to join this server regardless of whether their version number matches ours?
            Useful to allow players to join debug mode servers.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.canClientVersionJoinServer(System.UInt32)">
            <summary>
            Is version number supplied by client compatible with us?
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.NotifyClientsInQueueOfPosition">
            <summary>
            Notify players waiting to join server if their position in the queue has changed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.KickClientsBlockingUpQueue">
            <summary>
            Prevent any particular client from delaying the server connection queue process.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.clMaxPlayersLimit">
            <summary>
            Allows hosting providers to limit the configurable max players value from the command-line.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.ip">
            <summary>
            Deprecated-ish IPv4 to bind listen socket to. Set by bind command.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.bindAddress">
            <summary>
            Local address to bind listen socket to. Set by bind command.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.port">
            <summary>
            Steam query port.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.GetServerConnectionPort">
            <summary>
            If hosting a server, get the game traffic port.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.resetConfig">
            <summary>
            Called while running
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.WriteConnectedMessage(SDG.NetPak.NetPakWriter,SDG.Unturned.SteamPlayer,SDG.Unturned.SteamPlayer)">
            <summary>
            Used to build packet about each existing player for new player, and then once to build a packet
            for existing players about the new player. Note that in this second case forPlayer is null
            because the packet is re-used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.SendInitialGlobalState(SDG.Unturned.SteamPlayer)">
            <summary>
            Not exactly ideal, but this a few old "once per player" client->server RPCs.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Provider.onRejectingPlayer">
            <summary>
            Event for plugins when rejecting a player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.notifyKickedInternal(SDG.NetTransport.ITransportConnection,System.String)">
            <summary>
            Notify client that they were kicked.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.notifyBannedInternal(SDG.NetTransport.ITransportConnection,System.String,System.UInt32)">
            <summary>
            Notify client that they were banned.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.dismiss(Steamworks.CSteamID)">
            <summary>
            Player left server by canceling their ticket, or we are disconnecting them without telling them.
            Does not send any packets to the disconnecting player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.clientsKickedForTransportConnectionFailureCount">
            <summary>
            Number of transport connection failures on this frame.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.OnServerTransportConnectionFailure(SDG.NetTransport.ITransportConnection,System.String,System.Boolean)">
            <summary>
            Callback when a pending player or existing player unexpectedly loses connection at the transport level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.GetServerIsFavorited(System.UInt32,System.UInt16)">
            <summary>
            Check whether a server is one of our favorites or not.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.SetServerIsFavorited(System.UInt32,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Set whether a server is one of our favorites or not.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.openURL(System.String)">
            <summary>
            Open URL in the steam overlay, or if disabled use the default browser instead.
            Warning: any third party url should be checked by WebUtils.ParseThirdPartyUrl.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.CanFavoriteCurrentServer">
            <summary>
            Steam's favorites list requires that we know the server's IPv4 address and port,
            so we can't favorite when joining by Steam ID.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.toggleCurrentServerFavorited">
            <summary>
            Toggle whether we've favorited the server we're currently playing on.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.ToggleCurrentServerBookmarked">
            <summary>
            Toggle whether we've bookmarked the server we're currently playing on.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.backendRealtimeSeconds">
            <summary>
            Number of seconds since January 1st, 1970 GMT as reported by backend servers.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.unixEpochDateTime">
            <summary>
            Current UTC as reported by backend servers.
            Used by holiday events to keep timing somewhat synced between players. 
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.isBackendRealtimeAvailable">
            <summary>
            Has the initial backend realtime been queried yet?
            Not available immediately on servers because SteamGameServerUtils cannot be used until the actual Steam instance is available.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.onBackendRealtimeAvailable">
            <summary>
            Invoked after backend realtime becomes available.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.initAutoSubscribeMaps">
            <summary>
            In here because we want to call this very early in startup after initializing provider,
            but with plenty of time to hopefully install maps prior to reaching the main menu.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.WriteSteamAppIdFileAndEnvironmentVariables">
            <summary>
            This file is of particular importance to the dedicated server because otherwise Steam networking sockets
            will say the certificate is for the wrong app. When launching the game outside Steam this sets the app.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.LoadStatusData">
            <summary>
            Hackily exposed as an easy way for editor code to check the verison number.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Provider.isApplicationQuitting">
            <summary>
            Has the onApplicationQuitting callback been invoked?
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.onApplicationQuitting">
            <summary>
            Moved from OnApplicationQuit when that was deprecated.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.steamAppInstallDirectory">
            <summary>
            Useful to load files from Steam install of the game while running in the editor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Provider.onApplicationWantsToQuit">
            <summary>
            Moved from OnApplicationQuit when Application.CancelQuit was deprecated.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Provider.shouldCheckForGoldUpgrade">
            <summary>
            A couple of players have reported the PRO_DESYNC kick because their client thinks they own the gold upgrade,
            but the Steam backend thinks otherwise. This option is a bit of a hack to work around the problem for them.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMonetizationTag.Unspecified">
            <summary>
            Host has not specified a value.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMonetizationTag.Any">
            <summary>
            Not an actual tag. Used for filtering.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMonetizationTag.None">
            <summary>
            Host has specified that the server does not sell anything for real money.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMonetizationTag.NonGameplay">
            <summary>
            Host has specified that the server does have a real money shop, but does not sell anything which affects gameplay.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMonetizationTag.Monetized">
            <summary>
            Host has specified that the server does have a real money shop which sells benefits that affect gameplay.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EPlugins">
            <summary>
            Server list filter for plugin usage.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ClientTextChatMessenger">
            <summary>
            Allows Unity events to send text chat messages from the client, for example to execute commands.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ClientTextChatMessenger.DefaultText">
            <summary>
            Text to use when SendDefaultTextChatMessage is invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ClientTextChatMessenger.EChannel.Global">
            <summary>
            All players on the server will see the message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ClientTextChatMessenger.EChannel.Local">
            <summary>
            Only nearby players will see the message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ClientTextChatMessenger.Channel">
            <summary>
            Chat mode to send request in.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingRain.NONE">
            <summary>
            Corresponds to not active and not blending with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingRain.PRE_DRIZZLE">
            <summary>
            Corresponds to transitioning in with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingRain.DRIZZLE">
            <summary>
            Corresponds to active with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingRain.POST_DRIZZLE">
            <summary>
            Corresponds to transitioning out with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingSnow.NONE">
            <summary>
            Corresponds to not active and not blending with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingSnow.PRE_BLIZZARD">
            <summary>
            Corresponds to transitioning in with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingSnow.BLIZZARD">
            <summary>
            Corresponds to active with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELightingSnow.POST_BLIZZARD">
            <summary>
            Corresponds to transitioning out with new weather system. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelLighting.rainyness">
            <summary>
            Kept for backwards compatibility with mod hooks, plugins, and events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelLighting.snowyness">
            <summary>
            Kept for backwards compatibility with mod hooks, plugins, and events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelLighting.CustomWeatherInstance.eventBlendAlpha">
            <summary>
            [0, 1] used to avoid invoking BlendAlphaChanged every frame.
            Compared against globalBlendAlpha not taking into account local volume.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelLighting.hash">
            <summary>
            Hash of lighting config.
            Prevents using the level editor to make night time look like day.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelLighting.levelFogColor">
            <summary>
            Level designed target fog color.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelLighting.levelFogIntensity">
            <summary>
            Level designed target fog intensity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelLighting.levelAtmosphericFog">
            <summary>
            Level designed target atmospheric fog intensity.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelLighting.getWaterSurfaceElevation(System.Single)">
            <summary>
            If global ocean plane is enabled then return the worldspace height,
            otherwise return the optional default value. Default for volume based
            water is -1024, but atmosphere measure uses a default of zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelLighting.tickCustomWeatherBlending(System.UInt32)">
            <summary>
            Ticked on dedicated server as well as client so that server can listen for weather events.
            </summary>
            <param name="localVolumeMask">On dedicated server this is always 0xFFFFFFFF.</param>
        </member>
        <member name="M:SDG.Unturned.LevelLighting.resetForMainMenu">
            <summary>
            Reset any global shader properties that may affect the main menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ZombieDifficultyAsset.Allow_Horde_Beacon">
            <summary>
            Can horde beacons be placed in the associated bounds?
            </summary>
        </member>
        <member name="T:SDG.Unturned.VehiclePhysicsProfileAsset">
            <summary>
            Overrides vehicle physics values in bulk without building asset bundles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCallValidation.ONLY_FROM_SERVER">
            <summary>
            Only RPCs from the server will be allowed to invoke this method.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCallValidation.SERVERSIDE">
            <summary>
            RPCs are only allowed to invoke this method if we're running as server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCallValidation.ONLY_FROM_OWNER">
            <summary>
            Only RPCs from the owner of the object will be allowed to invoke this method.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamCall.ratelimitHz">
            <summary>
            Maximum number of calls per-second per-player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamCall.ratelimitSeconds">
            <summary>
            Minimum seconds between calls per-player.
            Initialized from ratelimitHz when gathering RPCs.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamCall.rateLimitIndex">
            <summary>
            Index into per-connection rate limiting array.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamCall.legacyName">
            <summary>
            Backwards compatibility for older invoke by name code e.g. plugins.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamChannel.CHANNEL_ID_HEADER_SIZE">
            <summary>
            If changing header size remember to update PlayerManager and allocPlayerChannelId.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamChannel.VOICE_DATA_OFFSET">
            <summary>
            How far to shift compressed voice data.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamChannel.IsLocalPlayer">
            <summary>
            If true, this object is owned by a locally-controlled player.
            For example, some code is not run for "remote" players.
            Always true in singleplayer. Always false on dedicated server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.GetOwnerTransportConnection">
            <summary>
            Use on server when invoking client methods on the owning player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.GatherRemoteClientConnectionsExcludingOwner">
            <summary>
            Replacement for ESteamCall.NOT_OWNER.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamChannel.onTriggerReceive">
            <summary>
            Don't use this. Originally added so that Rocketmod didn't have to inject into the game's assembly.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.receive(Steamworks.CSteamID,System.Byte[],System.Int32,System.Int32)">
            <returns>True if the call succeeded, or false if the sender should be refused.</returns>
        </member>
        <member name="F:SDG.Unturned.SteamChannel.onTriggerSend">
            <summary>
            Don't use this. Originally added so that Rocketmod didn't have to inject into the game's assembly.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.markDirty">
            <summary>
            Calls array needs rebuilding the next time it is used.
            Should be invoked when adding/removing components with RPCs.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamChannel.callArrayDirty">
            <summary>
            Does array of RPCs need to be rebuilt?
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.buildCallArray">
            <summary>
            Find methods with SteamCall attribute, and gather them into an array.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.encodeVoicePacket(System.Byte,System.Int32@,System.Byte[]@,System.Byte[],System.UInt16,System.Boolean)">
            <summary>
            Encode byte array of voice data to send.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamChannel.decodeVoicePacket(System.Byte[],System.UInt32@,System.Boolean@)">
            <summary>
            Decode voice parameters from byte array.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerSpotLightConfig.isEnabled">
            <summary>
            If true, light contributes to player spotlight. Defaults to true.
            
            Can be set to false for modders with a custom light setup. For example, this was added
            for a modder who is using melee lights to toggle a lightsaber-style glow.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EPluginWidgetFlags">
            <summary>
            32-bit mask granting server plugins additional control over custom UIs.
            Only replicated to owner.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.Modal">
            <summary>
            Enables cursor movement while not in a vanilla menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.NoBlur">
            <summary>
            Disable background blur regardless of other UI state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ForceBlur">
            <summary>
            Enable background blur regardless of other UI state.
            Takes precedence over NoBlur.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowInteractWithEnemy">
            <summary>
            Enable title card while focusing a nearby player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowDeathMenu">
            <summary>
            Enable explanation and respawn buttons while dead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowHealth">
            <summary>
            Enable health meter in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowFood">
            <summary>
            Enable food meter in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowWater">
            <summary>
            Enable water meter in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowVirus">
            <summary>
            Enable virus/radiation/infection meter in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowStamina">
            <summary>
            Enable stamina meter in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowOxygen">
            <summary>
            Enable oxygen meter in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowStatusIcons">
            <summary>
            Enable icons for bleeding, broken bones, temperature, starving, dehydrating, infected, drowning, full moon,
            safezone, and arrested status.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowUseableGunStatus">
            <summary>
            Enable UseableGun ammo and firemode in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowVehicleStatus">
            <summary>
            Enable vehicle fuel, speed, health, battery charge, and locked status in the HUD.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowCenterDot">
            <summary>
            Enable center dot when guns are not equipped.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.ShowReputationChangeNotification">
            <summary>
            Enable popup when in-game rep is increased/decreased.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPluginWidgetFlags.Default">
            <summary>
            Default flags set when player spawns.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EPlayerAdminUsageFlags">
            <summary>
            32-bit mask indicating to the server which admin powers are being used.
            Does not control which admin powers are available.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerAdminUsageFlags.Freecam">
            <summary>
            Player is using spectator camera.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerAdminUsageFlags.Workzone">
            <summary>
            Player is using barricade/structure transform tools.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerAdminUsageFlags.SpectatorStatsOverlay">
            <summary>
            Player is using overlay showing player names and positions.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Player.OnAdminUsageChanged">
            <summary>
            Per-player event invoked when admin usage flags change.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Player.OnAnyPlayerAdminUsageChanged">
            <summary>
            Event invoked when any player's admin usage flags change.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Player.onPlayerStatIncremented">
            <summary>
            Used by plugins.
            </summary>
        </member>
        <member name="E:SDG.Unturned.Player.onLocalPluginWidgetFlagsChanged">
            <summary>
            Invoked on client when a plugin changes the widget flags. 
            </summary>
        </member>
        <member name="P:SDG.Unturned.Player.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.ReceiveScreenshotRelay(SDG.Unturned.ServerInvocationContext@)">
            <summary>
            Not rate limited because server tracks number of expected screenshots.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.sendBrowserRequest(System.String,System.String)">
            <summary>
            Request client to open a given URL.
            Allows plugins to open web browser, but also gives client the chance to ignore it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.sendRelayToServer(System.UInt32,System.UInt16,System.String,System.Boolean)">
            <summary>
            Tell client to join a specific server.
            Disconnects client and sends them to the join server screen.
            Only used by plugins.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Player.inPluginModal">
            <summary>
            Is this player currently in a plugin's modal dialog?
            Enables cursor movement while not in a vanilla menu.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.serversideSetPluginModal(System.Boolean)">
            <summary>
            Tell the client whether to be in plugin modal mode or not.
            Kept from prior to introduction of pluginWidgetFlags.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Player.AdminUsageFlags">
            <summary>
            Which admin powers are currently in use by the client.
            Reported to the server by the client.
            Does not control which admin powers are available.
            Note: Hacks can prevent this notification from being sent.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.ClientSetAdminUsageFlags(SDG.Unturned.EPlayerAdminUsageFlags)">
            <summary>
            Called on the client to notify the server of admin usage changes (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.ClientSetAdminUsageFlagActive(SDG.Unturned.EPlayerAdminUsageFlags,System.Boolean)">
            <summary>
            Called on the client to notify the server of admin usage changes (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.teleportToRandomSpawnPoint">
            <summary>
            Teleport to a random player spawn designated in the level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.teleportToBed">
            <summary>
            Teleport to bed, if player has set one.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Player.maxRateLimitedActionsPerSecond">
            <summary>
            How many calls to <see cref="M:SDG.Unturned.Player.tryToPerformRateLimitedAction"/> will succeed per second.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Player.rateLimitedActionsCredits">
            <summary>
            How many rate limited actions have been performed recently.
            Increased after performing each rate limited action, and decreased over time.
            Cannot perform actions when greater than one.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.tryToPerformRateLimitedAction">
            <summary>
            Note: new official code should be using per-method rate limit attribute.
            This is kept for backwards compatibility with plugins however.
            
            Call this method before any requests the client can spam to the server.
            </summary>
            <returns>Should your code proceed with the rate limited action?</returns>
        </member>
        <member name="M:SDG.Unturned.Player.updateRateLimiting">
            <summary>
            Call every frame to cool down rate limiting.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.InitializePlayerStart">
            <summary>
            This code was in the Start message, and should happen before other initialization.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Player.InitializePlayer">
            <summary>
            Hacky replacement for Start() that runs after net ids are assigned but before sending player state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Player.isExpectingDestroy">
            <summary>
            Nelson 2024-11-11: Added to help narrow down if player is destroyed outside of Provider.removePlayer.
            (public issue #4760)
            </summary>
        </member>
        <member name="F:SDG.Unturned.CullingVolume.isManagedByLevelObject">
            <summary>
            Flag in case levelObject is destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.INTERACT">
            <summary>
            Poorly named. Specific to InteractableObjectQuest.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.NPC_CUSTOM">
            <summary>
            Directly uses input string for custom message popups.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.BUILD_ON_OCCUPIED_VEHICLE">
            <summary>
            Player cannot build on a vehicle with occupied seats.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.NOT_ALLOWED_HERE">
            <summary>
            Horde beacon cannot be built here.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.CANNOT_BUILD_ON_VEHICLE">
            <summary>
            Item type is not allowed on vehicles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.TOO_FAR_FROM_HULL">
            <summary>
            Item must be placed closer to vehicle hull.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.CANNOT_BUILD_WHILE_SEATED">
            <summary>
            Player cannot build while seated in a vehicle because some vehicles are abusable to stick the camera through a wall.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.CLIMB">
            <summary>
            Interacting with ladder.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.HOUSING_PLANNER_TUTORIAL">
            <summary>
            Popup when equipping housing planner "press T to show items"
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.PLACEMENT_OBSTRUCTED_BY">
            <summary>
            Popup when structure is blocked by something named we can format into the message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.FREEFORM_BUILDABLE_NOT_ALLOWED">
            <summary>
            Notice that freeform buildables are blocked by <see cref="F:SDG.Unturned.GameplayConfigData.Allow_Freeform_Buildables">Allow_Freeform_Buildables</see>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.PLACEMENT_OBSTRUCTED_BY_GROUND">
            <summary>
            Popup when structure is blocked by terrain.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EPlayerMessage.NOT_PAINTABLE">
            <summary>
            Vehicle doesn't support spray paints.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GunStatsExporter">
            <summary>
            Nelson 2024-11-29: Curious to put all the gun stats in one place for easier comparison. Rather rudimentary at
            the moment so not including in the update.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EDriverTurretViewmodelMode">
            <summary>
            Controls how first-person arms are moved for turrets operated from the driver's seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDriverTurretViewmodelMode.OffscreenWhileAiming">
            <summary>
            Default. Pushes first-person arms off-screen while aiming. Originally implemented for the Fighter Jet where
            it looks weird if your arms are still visible when the camera zooms in while "aiming."
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDriverTurretViewmodelMode.AlwaysOffscreen">
            <summary>
            Push first-person arms off-screen when equipped.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDriverTurretViewmodelMode.AlwaysOnscreen">
            <summary>
            No particular use in mind, but included for completeness.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.fireDelaySound">
            <summary>
            Sound to play when input is pressed but weapon has a fire delay.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.gunshotRolloffDistance">
            <summary>
            Maximum distance the gunshot can be heard.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.rangeRangefinder">
            <summary>
            Override Rangefinder attachment's maximum range.
            Defaults to range value.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.instakillHeadshots">
            <summary>
            Can this weapon instantly kill players by headshots?
            Only valid when game config also enables this.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.infiniteAmmo">
            <summary>
            Can this weapon be fired without consuming ammo?
            Some mods use this for turrets.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.ammoPerShot">
            <summary>
            Ammo quantity to consume per shot fired.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.fireDelay">
            <summary>
            Simulation steps to wait after input before firing.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.allowMagazineChange">
            <summary>
            Can magazine be changed by player?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.canAimDuringSprint">
            <summary>
            Can player ADS while sprinting and vice versa?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.aimInDuration">
            <summary>
            Seconds from pressing "aim" to fully aiming down sights.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.shouldScaleAimAnimations">
            <summary>
            If true, Aim_Start and Aim_Stop animations are scaled according to actual aim duration.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.requiresNonZeroAttachmentCaliber">
            <summary>
            Defaults to false. If true, attachments must specify at least one non-zero caliber.
            Requested by Great Hero J to block vanilla attachments in VGR.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.spreadSprint">
            <summary>
            Spread multiplier while sprinting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.spreadCrouch">
            <summary>
            Spread multiplier while crouched.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.spreadProne">
            <summary>
            Spread multiplier while prone.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.spreadSwimming">
            <summary>
            Spread multiplier while swimming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.spreadMidair">
            <summary>
            Spread multiplier while not grounded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.aimingRecoilMultiplier">
            <summary>
            Recoil magnitude multiplier while the gun is aiming down sights.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.recoilSprint">
            <summary>
            Recoil magnitude while sprinting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.recoilCrouch">
            <summary>
            Recoil magnitude while crouched.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.recoilProne">
            <summary>
            Recoil magnitude while prone.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.recoilSwimming">
            <summary>
            Recoil magnitude while swimming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.recoilMidair">
            <summary>
            Recoil magnitude while not grounded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.damageFalloffRange">
            <summary>
            [0, 1] percentage of maximum range where damage begins decreasing toward falloff multiplier.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.damageFalloffMaxRange">
            <summary>
            [0, 1] percentage of maximum range where damage finishes decreasing toward falloff multiplier.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.damageFalloffMultiplier">
            <summary>
            [0, 1] percentage of damage to apply at damageFalloffMaxRange.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.projectileLifespan">
            <summary>
            Seconds before physics projectile is destroyed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.canEverJam">
            <summary>
            Is this gun setup to have a change of jamming?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.jamQualityThreshold">
            <summary>
            [0, 1] quality percentage that jamming will start happening.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.jamMaxChance">
            <summary>
            [0, 1] percentage of the time that shots will jam the gun when at 0% quality.
            Chance of jamming is blended between 0% at jamQualityThreshold and jamMaxChance% at 0% quality.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGunAsset.unjamChamberAnimName">
            <summary>
            Name of the animation to play when unjamming chamber.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemGunAsset.aimingMovementSpeedMultiplier">
            <summary>
            Movement speed multiplier while the gun is aiming down sights.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DialogueMessage.prevGuid">
            <summary>
            Please refer to <see cref="M:SDG.Unturned.DialogueMessage.FindPrevDialogueAsset"/>.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DialogueMessage.prev">
            <summary>
            Please refer to <see cref="M:SDG.Unturned.DialogueMessage.FindPrevDialogueAsset"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DialogueMessage.FindPrevDialogueAsset">
             <summary>
             The dialogue to go to when a message has no available responses.
             If this is not specified the previous dialogue is used as a default.
             If neither is available then a default "goodbye" response is added.
            
             For example, Chief_Police_Doughnuts_Accepted dialogue has a single message
             "Let's just keep this between the two of us." shown with "prev" dialogue
             set to the NPC's root dialogue asset.
             </summary>
        </member>
        <member name="M:SDG.Unturned.Useable.startPrimary">
            <returns>True if primary action was started and stopPrimary should be called in the future.
            Useful to allow input to be held until action executes.</returns>
        </member>
        <member name="M:SDG.Unturned.Useable.startSecondary">
            <returns>True if secondary action was started and stopSecondary should be called in the future.
            Useful to allow input to be held until action executes.</returns>
        </member>
        <member name="P:SDG.Unturned.Useable.isUseableShowingMenu">
            <summary>
            Does useable have a menu open?
            If so pause menu, dashboard, and other menus cannot be opened.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemPlaceableAsset">
            <summary>
            Common base for barricades and structures.
            2023-01-16: not ideal to be adding this so late in development, but at least it is a step in the right direction.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemPlaceableAsset.CanZombiesTarget">
            <summary>
            If true, this item is eligible for zombies to detect and attack when stuck.
            Defaults to true.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemPlaceableAsset.salvageItemRef">
            <summary>
            Item recovered when picked up below 100% health.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemPlaceableAsset.minItemsDroppedOnDestroy">
            <summary>
            Minimum number of items to drop when destroyed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemPlaceableAsset.maxItemsDroppedOnDestroy">
            <summary>
            Maximum number of items to drop when destroyed.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemPlaceableAsset.itemDroppedOnDestroy">
            <summary>
            Spawn table for items dropped when destroyed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemPlaceableAsset.FindDefaultSalvageItemAsset">
            <summary>
            By default a crafting ingredient is salvaged.
            </summary>
        </member>
        <member name="T:SDG.Unturned.Rk4Spring3">
            <summary>
            Thanks to Glenn Fiedler for this RK4 implementation article:
            https://gafferongames.com/post/integration_basics/
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring3.stiffness">
            <summary>
            Higher values return to the target position faster.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring3.damping">
            <summary>
            Higher values reduce bounciness and settle at the target position faster.
            e.g. a value of zero will bounce back and forth for a long time (indefinitely?)
            </summary>
        </member>
        <member name="T:SDG.Unturned.InteractableObjectQuestEventHook">
            <summary>
            Can be added to any GameObject with a Dropper, Note, or Quest interactable object in its parents.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectQuestEventHook.OnUsed">
            <summary>
            Invoked on authority when interactable object is used successfully.
            Only invoked on clients if ShouldReplicate is true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectQuestEventHook.ShouldReplicate">
            <summary>
            If true, the server will replicate the OnUsed event to clients as well.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectQuestEventHook.Reliable">
            <summary>
            If ShouldReplicate is enabled, should the RPC be called in reliable mode?
            Unreliable might not be received by clients.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectQuestEventHook.OverrideRelevantDistance">
            <summary>
            Applied if greater than zero. Defaults to 128.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClaimManager.canBuildOnVehicle(UnityEngine.Transform,Steamworks.CSteamID,Steamworks.CSteamID)">
            <param name="isClaim">True if it's a new claim flag.</param>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.minStealthRadius">
            <summary>
            Player stealth radius cannot go below this value.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.fallDamageSpeedThreshold">
            <summary>
            Deal damage and break legs if speed is greater than this value.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.enableAdminFasterSalvageDuration">
            <summary>
            By default players in singleplayer and admins in multiplayer have a faster salvage time.
            This option was requested for maps with entirely custom balanced salvage times.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.resolvedCraftingBlacklists">
            <summary>
            Cached result of finding all craftingBlacklists.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.schedulableWeathers">
            <summary>
            Determines which weather can naturally occur in this level.
            Null if empty.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.perpetualWeatherRef">
            <summary>
            If set, this weather will always be active and scheduled weather is disabled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelAsset.DeathMusicRef">
            <summary>
            Audio clip to play in 2D when a player dies.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.shouldAnimateBackgroundImage">
            <summary>
            Defaults to false because some servers have rules and info on the loading screen.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.globalWeatherMask">
            <summary>
            Volume weather mask used while not inside an ambience volume.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.skillRules">
            <summary>
            Allows level to override skill max levels.
            Null if empty, otherwise matches 1:1 with PlayerSkills._skills.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.hasClouds">
            <summary>
            If false, clouds are removed from the skybox.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelAsset.terrainColorRules">
            <summary>
            Players are kicked from multiplayer if their skin color is within threshold of any of these rules.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LODGroupAdditionalData">
            <summary>
            Optional Unturned extensions to the LOD Group component.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LODGroupAdditionalData.ELODBiasOverride">
            <summary>
            Could be extended, e.g. to clamp cull size separately from the per-LOD sizes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LODGroupAdditionalData.ELODBiasOverride.IgnoreLODBias">
            <summary>
            Unturned will adjust per-LOD sizes to counteract LOD bias.
            Elver has carefully tuned LOD sizes for the interior of the mall, so LOD bias affecting them is undesirable.
            Note that due to a Unity bug only LOD0 can be greater than 100%.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GroupManager.isPlayerInGroupExitQueue(SDG.Unturned.Player)">
            <summary>
            Is player already waiting to exit their group?
            </summary>
        </member>
        <member name="M:SDG.Unturned.GroupManager.requestGroupExit(SDG.Unturned.Player)">
            <summary>
            Add player to exit queue if enabled, or immediately remove.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GroupManager.cancelGroupExit(SDG.Unturned.Player)">
            <summary>
            Remove player from queue if they're waiting to exit their group.
            </summary>
        </member>
        <member name="E:SDG.Unturned.VehicleManager.OnPreDestroyVehicle">
            <summary>
            Invoked immediately before Destroy vehicle.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VehicleManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleManager.shouldRespawnReloadedVehicles">
            <summary>
            If true, a vehicle asset has been replaced.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.findVehicleByNetInstanceID(System.UInt32)">
            <summary>
            Find vehicle with matching replicated instance ID.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnVehicleV2(System.UInt16,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnVehicleV2(System.UInt16,UnityEngine.Vector3,UnityEngine.Quaternion,System.Nullable{UnityEngine.Color32})">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If paintColor is set that takes priority, otherwise if
            redirector's SpawnPaintColor is set, that color is used,
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnLockedVehicleForPlayerV2(System.UInt16,UnityEngine.Vector3,UnityEngine.Quaternion,SDG.Unturned.Player)">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnLockedVehicleForPlayerV2(System.UInt16,UnityEngine.Vector3,UnityEngine.Quaternion,SDG.Unturned.Player,System.Nullable{UnityEngine.Color32})">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If paintColor is set that takes priority, otherwise if
            redirector's SpawnPaintColor is set, that color is used,
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnVehicleV2(SDG.Unturned.Asset,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnVehicleV2(SDG.Unturned.Asset,UnityEngine.Vector3,UnityEngine.Quaternion,System.Nullable{UnityEngine.Color32})">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If paintColor is set that takes priority, otherwise if
            redirector's SpawnPaintColor is set, that color is used,
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnLockedVehicleForPlayerV2(SDG.Unturned.Asset,UnityEngine.Vector3,UnityEngine.Quaternion,SDG.Unturned.Player)">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnLockedVehicleForPlayerV2(SDG.Unturned.Asset,UnityEngine.Vector3,UnityEngine.Quaternion,SDG.Unturned.Player,System.Nullable{UnityEngine.Color32})">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If paintColor is set that takes priority, otherwise if
            redirector's SpawnPaintColor is set, that color is used,
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.SpawnVehicleV3(SDG.Unturned.VehicleAsset,System.UInt16,System.UInt16,System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.UInt16,System.UInt16,Steamworks.CSteamID,Steamworks.CSteamID,System.Boolean,System.Byte[][],System.Byte,UnityEngine.Color32)">
            <summary>
            Added so that garage plugins do not need to invoke RPC manually.
            </summary>
            <param name="batteryCharge">zero spawns without a battery, ushort.MaxValue indicates the battery should be randomly spawned according to asset configuration, other values force a battery to spawn.</param>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.SpawnVehicleV3(SDG.Unturned.VehicleAsset,System.UInt16,System.UInt16,System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.UInt16,System.UInt16,Steamworks.CSteamID,Steamworks.CSteamID,System.Boolean,System.Byte[][],System.Byte)">
            <summary>
            For backwards compatibility. This older method spawns a vehicle with a random paint color. (set paintColor
            to zero for a random paint color)
            </summary>
            <param name="batteryCharge">zero spawns without a battery, ushort.MaxValue indicates the battery should be randomly spawned according to asset configuration, other values force a battery to spawn.</param>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.spawnVehicleInternal(SDG.Unturned.Asset,UnityEngine.Vector3,UnityEngine.Quaternion,Steamworks.CSteamID,Steamworks.CSteamID,System.Nullable{UnityEngine.Color32})">
            <summary>
            Used by external spawn vehicle methods.
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used,
            unless preferredColor.a is byte.MaxValue.
            </summary>
            <param name="owner">Owner to lock vehicle for by default. Used to lock vehicles to the player who purchased them.</param>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.sendVehicleHeadlights">
            <summary>
            Client-side request server to toggle headlights.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.sendVehicleBonus">
            <summary>
            As client request server to use bonus feature like towing hook or police sirens.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.askVehiclesHelper(SDG.NetTransport.ITransportConnection,System.Int32,System.Int32)">
            <summary>
            Helper for servers with huge numbers of vehicles.
            Called with fixed span of indexes e.g. [0, 10), then [10, 20). This function then clamps the final span to the vehicle count.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.ServerForcePassengerIntoVehicle(SDG.Unturned.Player,SDG.Unturned.InteractableVehicle)">
            <summary>
            Does as few tests as possible while maintaining base game expectations.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.forceRemovePlayer(Steamworks.CSteamID)">
            <summary>
            Force remove player from vehicle they were in, if any.
            Called when player disconnects to tidy up and run callbacks.
            </summary>
            <returns>True if player was in a vehicle, false otherwise.</returns>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.removePlayerTeleportUnsafe(SDG.Unturned.InteractableVehicle,SDG.Unturned.Player,UnityEngine.Vector3,System.Single)">
            <summary>
            Remove player from vehicle and teleport them to an unchecked destination.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.canUseSpawnpoint(SDG.Unturned.VehicleSpawnpoint)">
            <summary>
            Is spawnpoint open for vehicle?
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.findRandomSpawn">
            <summary>
            Try to find a random spawnpoint to spawn a vehicle while server is running.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.addVehicleAtSpawn(SDG.Unturned.VehicleSpawnpoint)">
            <summary>
            Add a new vehicle at given spawnpoint.
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.addVehicleAtSpawnAndReplicate(SDG.Unturned.VehicleSpawnpoint)">
            <summary>
            Add a new vehicle at given spawnpoint and replicate to clients.
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleManager.UpdateDecay">
            <summary>
            Called on server each frame to slowly damage abandoned vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleManager.NETIDS_PER_VEHICLE">
            <summary>
            +0 = InteractableVehicle
            +1 = root transform
            +X = VehicleBarricadeRegion
            Asset does not know number of train cars, so we always reserve slack.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleManager.SPEED_INT_BIT_COUNT">
            <summary>
            Speed is unsigned, so 8 bits allows a range of [0, 256).
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleManager.FORWARD_VELOCITY_INT_BIT_COUNT">
            <summary>
            Velocity is signed, so 9 bits allows a range of [-256, 256).
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandTeleport.raycastFromSkyToPosition(UnityEngine.Vector3@)">
            <summary>
            Cast a ray from the sky to find highest point.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandTeleport.raycastFromNearPosition(UnityEngine.Vector3@)">
            <summary>
            Cast a ray from slightly above point so indoor teleport nodes work.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WebImage.texture">
            <summary>
            If set, we are responsible for destroying texture.
            </summary>
        </member>
        <member name="F:SDG.Unturned.FoliageEditor.EFoliageMode.BAKE">
            <summary>
            This is a bit of a hack in order to simplify the foliage menu when most of the time editors are either
            manually placing foliage or automatically baking it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.FoliageEditor.getBrushAlpha(System.Single)">
            <summary>
            Get brush strength multiplier where strength decreases past falloff. Use this method so that different falloffs e.g. linear, curved can be added.
            </summary>
            <param name="distance">Percentage of <see cref="P:SDG.Unturned.FoliageEditor.brushRadius"/>.</param>
        </member>
        <member name="F:SDG.Unturned.Grenade.explosion">
            <summary>
            Kept because lots of modders have been using this script in Unity,
            so removing legacy effect id would break their content.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Grenade.shouldDestroySelf">
            <summary>
            Hack for modders using grenade component as a way to deal radial damage. Not a good long term solution but
            widely requested for the meantime until I get the chance to rewrite some of the health stuff.
            </summary>
        </member>
        <member name="T:SDG.Unturned.Rk4Spring">
            <summary>
            Thanks to Glenn Fiedler for this RK4 implementation article:
            https://gafferongames.com/post/integration_basics/
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring.stiffness">
            <summary>
            Higher values return to the target position faster.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring.damping">
            <summary>
            Higher values reduce bounciness and settle at the target position faster.
            e.g. a value of zero will bounce back and forth for a long time (indefinitely?)
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4Spring.MAX_TIMESTEP">
            <summary>
            At low framerate deltaTime can be so high the spring explodes unless we use a fixed timestep.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AirdropAsset.barricadeRef">
            <summary>
            Interactable storage barricade to spawn at the drop position.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AirdropAsset.model">
            <summary>
            Prefab to spawn falling from the aircraft.
            </summary>
        </member>
        <member name="T:SDG.Unturned.HousingEdge">
            <summary>
            Initially these were structs so that they would be adjacent in memory and therefore faster to iterate lots of them,
            but making them classes lets them reference each other which significantly simplifies finding adjactent housing parts.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingEdge.forwardFloors">
            <summary>
            Item along positive direction.
            Can be multiple on existing saves or if players found an exploit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingEdge.backwardFloors">
            <summary>
            Item along negative direction.
            Can be multiple on existing saves or if players found an exploit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingEdge.walls">
            <summary>
            Item between floors.
            Can be multiple on existing saves or if players found an exploit.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingEdge.HasFullHeightWall">
            <summary>
            Is there a wall in this slot, and is it full height (not rampart)?
            </summary>
        </member>
        <member name="P:SDG.Unturned.HousingEdge.CanAttachRoof">
             <summary>
             This check prevents placing roof onto the upper edge of a rampart because ramparts
             create an edge at full wall height even though they are short.
             
             Ideally in the future wall height will become configurable and remove
             the need for this check.
            
             See public issue #3590.
             </summary>
        </member>
        <member name="F:SDG.Unturned.HousingVertex.position">
            <summary>
            Position at the base of the pillar.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingVertex.rotation">
            <summary>
            Yaw if placing pillar at this vertex.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingVertex.pillars">
            <summary>
            Pillar or post currently occupying this slot.
            Can be multiple on existing saves or if players found an exploit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingVertex.floors">
            <summary>
            Can be zero if pillar is floating, or up to six in the center of a triangular circle.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingVertex.HasFullHeightPillar">
            <summary>
            Is there a pillar in this slot, and is it full height (not post)?
            </summary>
        </member>
        <member name="F:SDG.Unturned.EHousingPlacementResult.MissingGround">
            <summary>
            Floors must be placed touching the terrain, or a fake-terrain object like a grassy cliff model.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EHousingPlacementResult.ObstructedByGround">
            <summary>
            Pillars can be partly underground or inside a designated allowed underground area. Otherwise,
            if the very top of the pillar is underground placement is blocked. (public issue #4250)
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.EDGE_LENGTH">
            <summary>
            Side length of square and triangular floor/roof.
            Walls can be slightly less, but we treat them as if they are the full length.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.WALL_PIVOT_OFFSET">
            <summary>
            Vertical distance from edge center to wall pivot.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.RAMPART_PIVOT_OFFSET">
            <summary>
            Vertical distance from edge center to rampart pivot.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.LINK_TOLERANCE">
            <summary>
            If position is nearly equal within this threshold then edges/vertices will connect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.MAX_PLACEMENT_DISTANCE">
            <summary>
            Maximum distance from player's viewpoint to allow placement.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.MAX_FIND_EMPTY_SLOT_DISTANCE">
            <summary>
            How far to search for empty slot best match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.MIN_FIND_EMPTY_SLOT_COSINE">
            <summary>
            Cosine of the angle between ray direction and direction toward slot must be greater than this.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.PLACEMENT_OVERLAP_PADDING">
            <summary>
            When validating item placement expand physics overlap this much.
            Useful to ensure slightly-touching overlaps (e.g. pillar touching the pillar above) are handled properly.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.CHARACTER_OVERLAP_PADDING">
            <summary>
            Ensure players, vehicles, zombies, animals, etc are not within this distance of pending placement.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.TRIANGLE_APEX_PIVOT_OFFSET">
            <summary>
            Distance from triangle pivot to apex of triangle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.TRIANGLE_INNER_RADIUS">
            <summary>
            Radius of circle within triangle edges.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.TRIANGLE_CENTER_PIVOT_OFFSET">
            <summary>
            Distance from triangle pivot to center of triangle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.FOUNDATION_TOP_MARGIN">
            <summary>
            Small threshold to allow placing even with existing barricades on the floor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.HOUSE_OVERLAP_LAYER_MASK">
            <summary>
            House overlap is approximately the same size as the housing item's collider(s), and is intended to check whether
            any pre-existing barricades or structural items are in the way. For example whether a wall cannot be placed because
            there is a storage crate in the way, or if a foundation is blocked by another slightly rotated foundation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.CHARACTER_OVERLAP_LAYER_MASK">
            <summary>
            Character overlap is slightly larger than the house overlap, and checks whether any players, vehicles, animals, zombies, etc
            are nearby. This is necessary because when house and characters were combined in a single physics query it was possible to
            stand *just* close enough to step into the collider as it was spawned.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.LinkConnections(SDG.Unturned.StructureDrop)">
            <summary>
            Called when a housing item is spawned or after moving an existing item.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.UnlinkConnections(SDG.Unturned.StructureDrop)">
            <summary>
            Called before a housing item is destroyed or before moving a housing item.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.FindVertex(UnityEngine.Vector3)">
            <summary>
            Search grid for existing vertex at approximately equal position.
            Considers adjacent grid cells if near cell boundary to avoid issues with floating point inaccuracy. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.FindEdge(UnityEngine.Vector3)">
            <summary>
            Search grid for existing edge at approximately equal position.
            Considers adjacent grid cells if near cell boundary to avoid issues with floating point inaccuracy. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.LinkFloorEdge(SDG.Unturned.StructureDrop,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Find existing edge and add connection, or add new empty edge.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.LinkFloorVertex(SDG.Unturned.StructureDrop,UnityEngine.Vector3)">
            <summary>
            Find existing vertex and add connection, or add new empty vertex.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.LinkWall(SDG.Unturned.StructureDrop,System.Single)">
            <summary>
            Find existing edge and set associated wall, or add an empty edge at wall's location.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.UnlinkWall(SDG.Unturned.StructureDrop)">
            <summary>
            Find slot occupied by wall and remove if no longer attached to anything.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.LinkPillar(SDG.Unturned.StructureDrop,UnityEngine.Vector3)">
            <summary>
            Find existing vertex and set associated pillar, or add an empty vertex at pillar's location.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.UnlinkPillar(SDG.Unturned.StructureDrop)">
            <summary>
            Find slot occupied by pillar and remove if no longer attached to anything.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.IgnoreVertexFloorsExceptNearPosition(SDG.Unturned.HousingVertex,UnityEngine.Vector3,System.Single)">
            <summary>
            Hack to prevent ignoring floor which might be overlapping pending floor placement.
            For example when placing a square floor on the opposite edge of a spot which has a triangular floor
            we do not want to ignore the triangular floor during the physics query.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.TestTriangleOverlapsCommon(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.String@)">
            <summary>
            Used by triangular floor and roof validation to test for collisions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.ValidateWallPlacement(UnityEngine.Vector3@,System.Single,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Ensure wall fits in an empty slot.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.ValidatePillarPlacement(UnityEngine.Vector3@,System.Single,System.String@)">
            <summary>
            Ensure pillar fits in an empty slot.
            </summary>
        </member>
        <member name="M:SDG.Unturned.HousingConnections.GetModelYaw(UnityEngine.Transform)">
            <summary>
            Nelson 2024-06-26: With structure rotation replicated as a quaternion we need to be smarter about extracting
            yaw from model transform. Quaternion.eulerAngles.y isn't necessarily the yaw anymore.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HousingConnections.ignoreDrops">
            <summary>
            Working buffer for placement overlap tests.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamChannelMethod.contextParameterIndex">
            <summary>
            Index of the context parameter, if not None.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamChannelMethod.attribute">
            <summary>
            Reflected attribute that was used to find this method.
            Contains extra information about how to call it.
            </summary>
        </member>
        <member name="T:SDG.Unturned.OncePerFrameGuard">
            <summary>
            True once per frame, false otherwise.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Carepackage.barricadeID">
            <summary>
            Item ID of barricade to spawn after landing.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Carepackage.barricadeAsset">
            <summary>
            Barricade to spawn after landing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Carepackage.squishPlayersUnderBox(UnityEngine.Transform)">
            <summary>
            Kill any players inside the spawned interactable box.
            Uses hardcoded size of 4 x 4 x 4.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EServerListCurationAction">
            <summary>
            Determines how to handle a server if it matches a rule.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerListCurationAction.Label">
            <summary>
            Apply label and continue processing rules. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerListCurationAction.Allow">
            <summary>
            Show the server in the list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerListCurationAction.Deny">
            <summary>
            Hide the server from the list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationRule.action">
            <summary>
            Note: Port (if set) refers to the Steam query port.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationRule.inverted">
            <summary>
            If true, negate whether this rule matches. i.e., binary NOT.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationRule.latestBlockedServerCount">
            <summary>
            Incremented during server list refresh for each server blocked by this rule.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ServerListCurationAsset.Icon">
            <summary>
            Optional image bundled alongside the asset file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DestroyEventHook.AuthorityOnly">
            <summary>
            If true the event will only be invoked in offline mode and on the server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerBarricadeStereoUI.lastUpdateVolumeRealtime">
            <summary>
            Hack to prevent hitting volume rate limit because (at least as of 2022-05-24) we do not have an event for finished dragging.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Animal.isUpdated">
            <summary>
            Whether this animal was updated in this network tick and needs to be resent.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Animal.alertDamagedFromPoint(UnityEngine.Vector3)">
            <summary>
            Alert this animal that it was damaged from a given position.
            Offensive animals investigate the position, whereas other animals run away.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Animal.alertRunAwayFromPoint(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Alerts this animal that it needs to run away.
            </summary>
            <param name="newPosition">The position to run away from.</param>
        </member>
        <member name="M:SDG.Unturned.Animal.alertPoint(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Keep for plugin backwards compatibility.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Animal.undergroundTestTimer">
            <summary>
            Reduces frequency of UndergroundAllowlist checks because it can be expensive with lots of entities and volumes. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.ResourceHash.GatherFilePaths(System.String)">
            <param name="dataPath">Unturned_Data folder path</param>
        </member>
        <member name="F:SDG.Unturned.ResourceHash.shouldSkipHashing">
            <summary>
            Useful to check whether hashing is causing problems.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ResourceHash.shouldLogHash">
            <summary>
            Useful to narrow down why a player is getting kicked for modified resource files when joining a server.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Road.roadIndex">
            <summary>
            Only set in play mode for determing if we should cache brute force lengths.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EGizmoLayer.World">
            <summary>
            Checkered lines when occluded, solid lines when visible.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EGizmoLayer.Foreground">
            <summary>
            Solid lines regardless of depth.
            </summary>
        </member>
        <member name="T:SDG.Unturned.RuntimeGizmos">
            <summary>
            In-game debug drawing utility similar to Unity's editor Gizmos.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RuntimeGizmos.Box(UnityEngine.Matrix4x4,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,SDG.Unturned.EGizmoLayer)">
            <param name="center">Local space relative to matrix.</param>
        </member>
        <member name="M:SDG.Unturned.RuntimeGizmos.GridXZ(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.Color,System.Single,SDG.Unturned.EGizmoLayer)">
            <summary>
            Wireframe grid on the XZ plane.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RuntimeGizmos.BoxData.localCenter">
            <summary>
            Center relative to matrix.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RuntimeGizmos.SphereData.localCenter">
            <summary>
            Center relative to matrix.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RuntimeGizmos.LateUpdate">
            <summary>
            LateUpdate so that the most up-to-date gizmos and main camera position are used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RuntimeGizmos.OnDrawGizmos">
            <summary>
            Callback to draw in the Unity editor scene view.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RegionList`1.GetList(UnityEngine.Vector3)">
            <summary>
            Can be null if nothing has been added at position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RegionList`1.EnumerateListsInSquare(UnityEngine.Vector3,System.Single)">
            <summary>
            Does not add new lists to empty cells.
            </summary>
        </member>
        <member name="F:SDG.Unturned.RegionList`1.LIST_POOL_SIZE">
            <summary>
            Number of Lists to preallocate in batches.
            (GRID_SIZE * GRID_SIZE) % LIST_POOL_SIZE should be zero leftover.
            Reduces constructor performance cost. (public issue #4209)
            </summary>
        </member>
        <member name="T:SDG.Unturned.LegacyInputOutput">
            <summary>
            Matches the console behavior prior to command IO refactor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableFuel.EUseMode.Deposit">
            <summary>
            Add fuel to target.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableFuel.EUseMode.Withdraw">
            <summary>
            Remove fuel from target.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerManager.IsClientUnderFakeLagPenalty">
            <summary>
            Whether local client is currently penalized for potentially using a lag switch. Server has an equivalent check which reduces
            damage dealt, whereas the clientside check stops shooting in order to prevent abuse of inbound-only lagswitches. For example,
            if a cheater freezes enemy positions by dropping inbound traffic while still sending movement and shooting outbound traffic.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInformationUI.mapLocationsContainer">
            <summary>
            Labels for named locations.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInformationUI.mapArenaContainer">
            <summary>
            Contains arena outer circle and inner target points.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInformationUI.remotePlayerImages">
            <summary>
            Player avatars.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDashboardInformationUI.localPlayerImage">
            <summary>
            Arrow oriented with the local player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerDashboardInformationUI.ProjectWorldPositionToMap(UnityEngine.Vector3)">
            <summary>
            Convert level-space 3D position into normalized 2D position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerDashboardInformationUI.DeprojectMapToWorld(UnityEngine.Vector2)">
            <summary>
            Convert normalized 2D position into level-space 3D position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerDashboardInformationUI.OnDestroy">
            <summary>
            Temporary to unbind events because this class is static for now. (sigh)
            </summary>
        </member>
        <member name="T:SDG.Unturned.DynamicWaterTransparentSort">
            <summary>
            Manages render queue for transparent materials on non-stationary objects.
            Updates one material per frame.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DynamicWaterTransparentSort.HandleIsSeaChanged(System.Boolean)">
            <summary>
            Callback when camera above/under water changes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LandscapeMaterialAsset.christmasRedirect">
            <summary>
            Material to use during the Christmas event instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LandscapeMaterialAsset.halloweenRedirect">
            <summary>
            Material to use during the Halloween event instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LandscapeMaterialAsset.aprilFoolsRedirect">
            <summary>
            Material to use during the April Fools event instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerBrowserRequestUI.url">
            <summary>
            Nelson 2024-08-19: This link has been checked with WebUtils.CanParseThirdPartyUrl, but is not the
            potentially altered link to go through Steam's link filter. This way the UI shows the original link.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UnturnedLog">
            <summary>
            Unturned wrapper for Debug.Log, Debug.LogWarning, Debug.LogError, etc.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedLog.exception(System.Exception,System.String)">
            <summary>
            Log an exception with message providing context.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedLog.internalException(System.Exception)">
            <summary>
            Recursively logs inner exception.
            
            Should only be called by itself and exception because notifications
            to CommandWindow would otherwise get re-sent here as errors.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedLog.onBuiltinUnityLogMessageReceived(System.String,System.String,UnityEngine.LogType)">
             <summary>
             This is the ONLY place Unturned should be binding logMessageReceived.
            
             This gives us greater control over how logging is handled. In particular, Unity's
             headless builds route logs (including stack traces) through stdout which is undesirable
             for dedicated servers, so we only call Debug.Log* in the editor and development builds. 
             </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedLog.exception(System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception with message providing context.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Bumper.getInstigatorSteamID">
            <summary>
            Get SteamID of vehicle's driver, or nil if not driven.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Bumper.takeCrashDamage(System.Single,System.Boolean)">
            <summary>
            Crashed into something, if applicable take self damage from collision.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.replaceColorTags(System.String)">
            <summary>
            Remove all color rich formatting so that shadow text displays correctly.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.makeShadowContent(UnityEngine.GUIContent)">
            <summary>
            Shadow text needs the color tags removed, otherwise the shadow uses those colors.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.wrapWithColor(System.String,System.String)">
            <summary>
            Wrap text with color tags.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.wrapWithColor(System.String,UnityEngine.Color32)">
            <summary>
            Wrap text with color tags.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.wrapWithColor(System.String,UnityEngine.Color)">
            <summary>
            Wrap text with color tags.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.replaceNewlineMarkup(System.String@)">
            <summary>
            Replace br tags with newlines.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.isTextValidForSign(System.String)">
            <summary>
            Should player be allowed to write given text on a sign?
            Keep in mind that newer signs use TMP, whereas older signs use uGUI.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RichTextUtil.IsTextValidForServerListShortDescription(System.String)">
            <summary>
            Disable style, align, and space because they make server list unfair.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EPlayerKill">
            <summary>
            2023-01-25: fixing killing self with explosive to track kill under
            the assumption that this is only used for tracking stats. (public issue #2692)
            </summary>
        </member>
        <member name="M:SDG.Unturned.CargoBuilder.GetOrAddDeclaration(System.String)">
            <summary>
            Finds an existing "{{Cargo/name" (if any), otherwise adds a new one.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CargoBuilder.AddDeclaration(System.String)">
            <summary>
            Adds a new "{{Cargo/name" even if one already exists.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CargoExporter">
            <summary>
            Helper for wiki writers to dump game data into a useful format.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableSign.text">
            <summary>
            Actual unfiltered text.
            Kept because plugins might be referencing, and game should use directly once state byte array is refactored.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableSign.DisplayText">
            <summary>
            If profanity filter is enabled this filtered text is displayed on the 3D sign and in the note UI.
            Null or empty on the dedicated server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableSign.label_0">
            <summary>
            Legacy uGUI text on canvas.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableSign.label_1">
            <summary>
            Legacy uGUI text on canvas.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TokenSearchFilter">
            <summary>
            Splits string and compares substrings ignoring case.
            Tokens containing a colon ':' are ignored so that they can represent special filters like MasterBundleSearchFilter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NPCEffectReward.IsReliable">
            <summary>
            Should the RPC be called in reliable mode? Unreliable effects might not be received.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NPCEffectReward.OverrideRelevantDistance">
            <summary>
            Applied if greater than zero. Defaults to 128.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MenuSurvivorsClothingBoxUI.BoxEntry">
            <summary>
            Internal struct menu uses to sort items in box.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingBoxUI.BoxEntry.id">
            <summary>
            Item definition id.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingBoxUI.BoxEntry.rarity">
            <summary>
            Rarity used to sort mythical > legendary > epic > rare.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingBoxUI.BoxEntry.probability">
            <summary>
            [0, 1] calculated chance of this item being unboxed.
            Shown to player in item tooltips.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MenuSurvivorsClothingBoxUI.BoxEntryComparer">
            <summary>
            Sorts box entries from highest to lowest rarity.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuSurvivorsClothingBoxUI.formatQualityRarity(SDG.Unturned.EItemRarity)">
            <summary>
            Format qualityRarities as ##.#
            Does not use 'P' format because localized strings unfortunately already had % sign.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingBoxUI.unboxedItems">
            <summary>
            Items server told us we unboxed, but we wait for the animation to finish before showing.
            Typically one, but some newer boxes have bonus items occassionally.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingBoxUI.didUnboxMythical">
            <summary>
            Is one of the unboxed items mythical rarity?
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingBoxUI.boxEntries">
            <summary>
            Items in the box.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuSurvivorsClothingBoxUI.skipAnimation">
            <summary>
            Skip unboxing animation.
            Initial call rotates to just before the item, next call skips entirely.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuSurvivorsClothingBoxUI.hasAssetsForGrantedItems(System.Collections.Generic.List{Steamworks.SteamItemDetails_t})">
            <summary>
            Does client know about all the granted items?
            If not, either something is bad in the econ config (uh oh!) or client is out of date.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AssetValidation.searchGameObjectForErrors(SDG.Unturned.Asset,UnityEngine.GameObject)">
            <summary>
            Relatively efficiently find mesh components, and log an error if their mesh is missing, among other checks.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AssetValidation.InternalValidateRendererMultiLodRegistration(SDG.Unturned.Asset)">
            <summary>
            Unity warns about renderers registered with more than one LOD group, so we do our own validation as part of
            asset loading to make it easier to find these.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.SERVER">
            <summary>
            Replaced by ServerMethodHandle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.ALL">
            <summary>
            Replaced by ClientInstanceMethod.InvokeAndLoopback or ClientStaticMethod.InvokeAndLoopback.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.OTHERS">
            <summary>
            Replaced by ClientMethodHandle invoked with Provider.EnumerateClients_Remote.
            Unlike ESteamCall.CLIENTS this is not loopback invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.OWNER">
            <summary>
            Replaced by ClientMethodHandle invoked with SteamChannel.GetOwnerTransportConnection.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.NOT_OWNER">
            <summary>
            Replaced by ClientMethodHandle invoked with SteamChannel.EnumerateClients_RemoteNotOwner.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.CLIENTS">
            <summary>
            Replaced by ClientMethodHandle invoked with Provider.EnumerateClients.
            Unlike ESteamCall.OTHERS this will be loopback invoked in singleplayer or listen server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamCall.PEERS">
            <summary>
            May have been used by voice in early versions, but has been completely removed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CommandLineValue`1">
            <summary>
            Parses -X=Y from command-line.
            Ideally we could do "where T : TryParse" but for the meantime there are specialized subclasses.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NpcGlobalEventMessenger">
            <summary>
            Allows Unity events to broadcast Event NPC rewards.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NpcGlobalEventMessenger.DefaultEventId">
            <summary>
            Event ID to use when SendDefaultEventId is invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NpcGlobalEventMessenger.ShouldReplicate">
            <summary>
            The event messenger can only be triggered on the authority (server).
            If true, the server will replicate the event to clients.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ICommandInputOutput">
            <summary>
            Interface between the dedicated server command I/O and per-platform console.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ICommandInputOutput.initialize(SDG.Unturned.CommandWindow)">
            <summary>
            Called when this implementation is setup by command window.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ICommandInputOutput.shutdown(SDG.Unturned.CommandWindow)">
            <summary>
            Called when this implementation is deleted or application quits.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ICommandInputOutput.update">
            <summary>
            Called each Unity update.
            </summary>
        </member>
        <member name="E:SDG.Unturned.ICommandInputOutput.inputCommitted">
            <summary>
            Broadcasts when the enter key is pressed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ICommandInputOutput.outputInformation(System.String)">
            <summary>
            Print white message.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ICommandInputOutput.outputWarning(System.String)">
            <summary>
            Print yellow message.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ICommandInputOutput.outputError(System.String)">
            <summary>
            Print red message.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ConsoleWriterProxy.Write(System.Char)">
            <summary>
            This is the only /required/ override of text writer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelNodes.hasLegacyVolumesForConversion">
            <summary>
            If true then level should convert old node types to volumes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelNodes.hasLegacyNodesForConversion">
            <summary>
            If true then level should convert old non-volumes types to devkit objects.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelNodes.hash">
            <summary>
            Hash of nodes file.
            Prevents using the level editor to make noLight nodes visible.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DefaultEngineSoundControllerBase">
            <summary>
            Code common to <see cref="T:SDG.Unturned.DefaultEngineSoundController"/> and <see cref="T:SDG.Unturned.RpmEngineSoundController"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELevelObjectPlacementOrigin.MANUAL">
            <summary>
            Manually placed from the asset browser or old editor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELevelObjectPlacementOrigin.GENERATED">
            <summary>
            Spawned by foliage baking system.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ELevelObjectPlacementOrigin.PAINTED">
            <summary>
            Brushed on with the foliage tool.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WorkshopUtils">
            <summary>
            Utilities for calling workshop functions without worrying about client/server.
            This could be nicely refactored into a client and server interface, but not enough time for that right now.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopUtils.getQueryUGCNumKeyValueTags(Steamworks.UGCQueryHandle_t,System.UInt32)">
            <summary>
            Client/server safe version of GetQueryUGCNumKeyValueTags.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopUtils.getQueryUGCKeyValueTag(Steamworks.UGCQueryHandle_t,System.UInt32,System.UInt32,System.String@,System.String@)">
            <summary>
            Client/server safe version of GetQueryUGCKeyValueTag.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopUtils.findQueryUGCKeyValue(Steamworks.UGCQueryHandle_t,System.UInt32,System.String,System.String@)">
            <summary>
            Search for the value associated with a given key.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopUtils.getQueryUGCResult(Steamworks.UGCQueryHandle_t,System.UInt32,Steamworks.SteamUGCDetails_t@)">
             <summary>
            Client/server safe version of GetQueryUGCResult.
             </summary>
        </member>
        <member name="M:SDG.Unturned.WorkshopUtils.getQueryUGCBanned(Steamworks.UGCQueryHandle_t,System.UInt32)">
            <summary>
            Is file banned?
            </summary>
        </member>
        <member name="P:SDG.Unturned.GlazierBase.ShouldGameProcessKeyDown">
            <summary>
            Originally this was only in the uGUI implementation, but plugins can create uGUI text fields
            regardless of which glazier is used.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuPlaySingleplayerUI.featuredItemDefId">
            <summary>
            Stockpile item definition id with rev-share for the level creators.
            Randomly selected from associated items list.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EditorEnvironmentNodesUI.SyncSettings">
            <summary>
            Other menus can modify DevkitSelectionToolOptions so we need to sync our menu when opened.
            </summary>
        </member>
        <member name="P:SDG.Unturned.StructureManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureManager.destroyStructure(SDG.Unturned.StructureDrop,System.Byte,System.Byte,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Remove structure instance on server and client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureManager.sendHealthChanged(System.Byte,System.Byte,SDG.Unturned.StructureDrop)">
            <summary>
            Used by ownership change and damaged event to tell relevant clients the new health.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureManager.dropStructure(SDG.Unturned.Structure,UnityEngine.Vector3,System.Single,System.Single,System.Single,System.UInt64,System.UInt64)">
            <summary>
            Legacy function for UseableStructure.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureManager.dropReplicatedStructure(SDG.Unturned.Structure,UnityEngine.Vector3,UnityEngine.Quaternion,System.UInt64,System.UInt64)">
            <summary>
            Spawn a new structure and replicate it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureManager.ReceiveDestroyStructure(SDG.Unturned.ClientInvocationContext@,SDG.Unturned.NetId,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Not an instance method because structure might not exist yet, in which case we cancel instantiation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.StructureManager.ClearNetworkStuff">
            <summary>
            Not ideal, but there was a problem because onLevelLoaded was not resetting these after disconnecting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.StructureManager.pool">
            <summary>
            Maps prefab unique id to inactive list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.StructureManager.MIN_INSTANTIATIONS_PER_FRAME">
            <summary>
            Instantiate at least this many structures per frame even if we exceed our time budget.
            </summary>
        </member>
        <member name="F:SDG.Unturned.StructureManager.YAW_BIT_COUNT">
            <summary>
            Sending yaw only costs 1 bit (flag) plus yaw bits, so compared to the old 24-bit rotation we may as well
            make it high-precision. Quaternion mode uses 1+27 bits!
            </summary>
        </member>
        <member name="F:SDG.Unturned.StructureManager.NETIDS_PER_STRUCTURE">
            <summary>
            +0 = StructureDrop
            +1 = root transform
            </summary>
        </member>
        <member name="E:SDG.Unturned.ObjectManager.OnQuestObjectUsed">
            <summary>
            Invoked when askUseObjectQuest succeeds.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NetInvocationDeferralRegistry">
            <summary>
            When a client method is called on a target object that does not exist yet this class is responsible for
            deferring the invocation until the instance does exist. For example until finished async loading.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetInvocationDeferralRegistry.Defer(SDG.Unturned.NetId,SDG.Unturned.ClientInvocationContext@,SDG.Unturned.NetInvokeDeferred)">
            <summary>
            Called by generated methods when target object does not exist. If target object has been marked deferred
            then the method will be invoked after it exists.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetInvocationDeferralRegistry.MarkDeferred(SDG.Unturned.NetId,System.UInt32)">
            <summary>
            Add list of deferred invocations for key. Otherwise messages will be discarded assuming it was canceled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetInvocationDeferralRegistry.Cancel(SDG.Unturned.NetId,System.UInt32)">
            <summary>
            Remove pending invocations.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetInvocationDeferralRegistry.Invoke(SDG.Unturned.NetId,System.UInt32)">
            <summary>
            Invoke all deferred calls.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NetInvocationDeferralRegistry.DeferredInvocation.netId">
            <summary>
            Invocations are grouped by net id block to ensure order is preserved between related objects. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.NetInvocationDeferralRegistry.DeferredInvocation.callback">
            <summary>
            Not a member of ClientMethodInfo because it does not need to be looked up using reflection.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetInvocationDeferralRegistry.Clear">
            <summary>
            Called before loading level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerNPCVendorUI.MaybeRefresh">
            <summary>
            Update currency and owned items if inventory has changed and menu is open.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerNPCVendorUI.updateCurrencyOrExperienceBox">
            <summary>
            Update currency or experience depending what the vendor accepts.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetIdRegistry.GetTransformNetId(UnityEngine.Transform)">
            <summary>
            Get net ID only if transform is directly registered, not if transform is the child of a registered transform.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetIdRegistry.Dump">
            <summary>
            Log every registered pairing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetIdRegistry.Clear">
            <summary>
            Called before loading level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NetIdRegistry.transformPairings">
            <summary>
            Reverse pairing specifically for building net id + relative path name.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClientMethodHandle.GetWriterWithStaticHeader">
            <summary>
            Write header common to both static and instance methods, and return writer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCQuestUI.pendingResponse">
             <summary>
             Valid when opened in Begin or End mode.
             
             If the quest is ready to complete the UI is opened in End mode to allow
             the player to see what rewards they will receive after clicking continue. 
             Otherwise, in Begin mode the UI is opened to allow the player to review
             the conditions before accepting or declining the request.
            
             If the player cancels the pending response is NOT chosen.
             </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerNPCQuestUI.dialogueContext">
            <summary>
            Valid when opened in Begin or End mode.
            The player clicked pendingResponse in this dialogue to open the quest UI.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelNetIdRegistry">
            <summary>
            It is useful to be able to reference transforms generically over the network, for example to attach a bullet
            hole to a tree or vehicle without tagging it as a tree or vehicle, but most entities placed in the level do not
            have unique IDs. To work around this we count downward from uint.MaxValue for level objects to avoid conflicts
            with server-assigned net ids.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelNetIdRegistry.GetTreeNetId(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Each region can have ushort.MaxValue trees, and we reserve that entire block so that a region can be slightly
            modified on the client or server without breaking all netids in the level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelNetIdRegistry.GetRegularObjectNetId(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Each region can have ushort.MaxValue objects, and we reserve that entire block so that a region can be slightly
            modified on the client or server without breaking all netids in the level.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelNetIdRegistry.GetDevkitObjectNetId(System.UInt32)">
            <summary>
            Devkit instance IDs should already be fairly stable. There is no way any level is using more than 30 bits
            for the instance ID, so it should be safe to set those bits to prevent collisions with server net IDs.
            </summary>
        </member>
        <member name="T:SDG.Unturned.IDeferredAsset`1">
            <summary>
            Struct interface so that for transient asset bundles (older workshop mods) they can be preloaded
            and retrieved as-needed, but for master bundles the asset loading can be deferred until needed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NonDeferredAsset`1">
            <summary>
            Legacy implementation that preloads assets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Bundle.loadDeferred``1(System.String,SDG.Unturned.IDeferredAsset{``0}@,SDG.Unturned.LoadedAssetDeferredCallback{``0})">
            <summary>
            Save a reference to an object in the asset bundle, but defer loading it until requested by game code.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuDashboardUI.newAnnouncement">
            <summary>
            Has a new announcement been posted by the developer?
            If so, it is given priority over the featured workshop item.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.receiveNewsResponse">
            <summary>
            Called after newsResponse is updated from web request.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.readNewsPreview">
            <summary>
            Read News.txt file from Cloud directory to preview on main menu.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.featurePopularItem(System.UInt32)">
            <summary>
            Helper for handlePopularItemResults.
            If player has not dismissed item at index then proceed with query and return true.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuDashboardUI.featuredWorkshopTitleBannedWords">
            <summary>
            Nelson 2024-04-23: A concerned player raised the issue that mature content could potentially be returned in
            popular item results. Steam excludes certain mature content by default, but just in case, we check for these
            words and hide if contained in title.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.handlePopularItemResults(Steamworks.SteamUGCQueryCompleted_t)">
            <summary>
            Successfully queried popular workshop items.
            Tries to decide on an item that player has not dismissed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.onFeaturedQueryCompleted(Steamworks.SteamUGCQueryCompleted_t,System.Boolean)">
            <summary>
            Response about the item we decided to display.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.queryPopularWorkshopItems">
            <summary>
            Submit query for recently trending popular workshop items.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuDashboardUI.UpdateWorkshopFromLiveConfig">
            <summary>
            Entry point to deciding which workshop item is featured above recent announcements.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuDashboardUI.hasBegunQueryingLiveConfigWorkshop">
            <summary>
            Ensures workshop files are not refreshed more than once per main menu load.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuPlayServerListFiltersUI.SynchronizeFilterButtons">
            <summary>
            Synchronize widgets with their values.
            </summary>
        </member>
        <member name="T:SDG.Unturned.VendorBuying">
            <summary>
            Represents an item the vendor is buying from players.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsMaterialNetId.IsNull">
            <summary>
            Zero is treated as unset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerDeathUI.containerOnScreen">
            <summary>
            Has the contained been animated into visibility on-screen?
            Used to disable animating out if disabled.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LightLOD.HelperClass">
            <summary>
            Prevents static member from being initialized during MonoBehaviour construction. (Unity warning)
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemShirtAsset">
            <summary>
            Mesh Replacement Details
            .dat Flags:
            	Has_1P_Character_Mesh_Override True		Bool
            	Character_Mesh_3P_Override_LODs #		Int
            	Has_Character_Material_Override True	Bool
            Asset Bundle Objects:
            	Character_Mesh_1P_Override_#			GameObject with MeshFilter (mesh set to a skinned mesh)
            	Character_Mesh_3P_Override_#			GameObject with MeshFilter (mesh set to a skinned mesh)
            	Character_Material_Override				Material
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemShirtAsset.characterMeshOverride1pLODs">
            <summary>
            Replacements for the main 1st-person character mesh.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemShirtAsset.characterMeshOverride3pLODs">
            <summary>
            Replacements for the main 3rd-person character mesh.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemShirtAsset.characterMaterialOverride">
            <summary>
            Replacement for the main character material that typically has clothes and skin color.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_NameAscending">
            <summary>
            Sort servers by name A to Z.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_NameDescending">
            <summary>
            Sort servers by name Z to A.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_MapAscending">
            <summary>
            Sort servers by map name A to Z.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_MapDescending">
            <summary>
            Sort servers by map name Z to A.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_PlayersDefault">
            <summary>
            Sort servers by player count high to low.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_PlayersInverted">
            <summary>
            Sort servers by player count low to high.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_MaxPlayersDefault">
            <summary>
            Sort servers by max player count high to low.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_MaxPlayersInverted">
            <summary>
            Sort servers by max player count low to high.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_FullnessDefault">
            <summary>
            Sort servers by normalized player count high to low.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_FullnessInverted">
            <summary>
            Sort servers by normalized player count low to high.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_PingAscending">
            <summary>
            Sort servers by ping low to high.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListComparer_PingDescending">
            <summary>
            Sort servers by ping high to low.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SteamServerAdvertisement">
            <summary>
            Information about a game server retrieved through Steam's "A2S" query system.
            Available when joining using the Steam server list API (in-game server browser)
            or querying the Server's A2S port directly (connect by IP menu), but not when
            joining by Steam ID.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamServerAdvertisement.EInfoSource.DirectConnect">
            <summary>
            Join server by IP.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamServerAdvertisement.networkTransport">
            <summary>
            ID of network transport implementation to use.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamServerAdvertisement.pluginFramework">
            <summary>
            Known plugin systems.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamServerAdvertisement.IsAddressUsingSteamFakeIP">
            <summary>
            Probably just checks whether IP is link-local, but may as well use Steam's utility function.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamServerAdvertisement.NormalizedPlayerCount">
            <summary>
            Active player count divided by max player count.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamServerAdvertisement.PingUtilityScore">
            <summary>
            Nelson 2024-08-20: This score is intended to prioritize low ping without making it the be-all end-all. The
            old default of sorting by ping could put near-empty servers at the top of the list, and encouraged using
            anycast caching to make the server appear as low-ping as possible.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamServerAdvertisement.FullnessUtilityScore">
            <summary>
            Nelson 2024-08-20: This score is intended to prioritize servers around 75% capacity. My thought process is
            that near-empty and near-full servers are already easy to find, but typically if you want to play online you
            want a server with space for you and your friends. Unfortunately, servers with plenty of players but an even
            higher max players make a 50% score plenty good.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamServerAdvertisement.PlayerCountUtilityScore">
            <summary>
            Nelson 2024-08-20: This score is intended to balance out the downside of the fullness score decreasing for
            servers with very high max player counts, and over-scoring servers with low max players.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamServerAdvertisement.CalculateUtilityScore">
            <summary>
            Called before inserting to server list.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamServerAdvertisement.parseTagValue(System.String,System.String,System.String)">
            <summary>
            Parses value between two keys <stuff>thing</stuff> would parse thing
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamServerAdvertisement.deniedByRule">
            <summary>
            If set, this server was denied by a server curation list.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UnturnedPlayerLoop">
            <summary>
            Disables Unity native systems unused by Unturned.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PoolReference.excludeFromDestroyAll">
            <summary>
            Enabled for effects held by guns and sentries.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PoolReference.OnDestroy">
            <summary>
            Listen for OnDestroy callback because mods may be destroying themselves in unexpected ways (e.g., Grenade
            component) and still need to be cleaned up.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemTrapAsset.trapSetupDelay">
            <summary>
            Seconds after placement before damage can be dealt.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemTrapAsset.trapCooldown">
            <summary>
            Seconds interval between damage dealt.
            i.e., will not cause damage if less than this amount of time passed since the last damage.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierConstraintFrame_UIToolkit">
            <summary>
            UITK implementation consists of a container element which respects the regular position and size
            properties, and a child content element which fits itself in the container.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BezierTool.getPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="a">Start Vertex</param>
            <param name="b">Start Vertex + Start Tangent</param>
            <param name="c">End Vertex + End Tangent</param>
            <param name="d">End Vertex</param>
        </member>
        <member name="M:SDG.Unturned.BezierTool.getVelocity(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="a">Start Vertex</param>
            <param name="b">Start Vertex + Start Tangent</param>
            <param name="c">End Vertex + End Tangent</param>
            <param name="d">End Vertex</param>
        </member>
        <member name="M:SDG.Unturned.BezierTool.getLengthEstimate(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="a">Start Vertex</param>
            <param name="b">Start Vertex + Start Tangent</param>
            <param name="c">End Vertex + End Tangent</param>
            <param name="d">End Vertex</param>
        </member>
        <member name="M:SDG.Unturned.BezierTool.getTFromDistance(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Int32,System.Single)">
            <param name="a">Start Vertex</param>
            <param name="b">Start Vertex + Start Tangent</param>
            <param name="c">End Vertex + End Tangent</param>
            <param name="d">End Vertex</param>
            <param name="distance">World units length along curve.</param>
            <param name="uniformInterval">Spacing between points.</param>
            <param name="intervalTolerance">Max estimate distance from uniform interval before we have to retry.</param>
            <param name="attempts">How many times to retry if the estimate is too far off.</param>
            <param name="cachedLength">If length is already known pass it in, otherwise it's recalculated.</param>
            <returns>Time along curve. [0-1]</returns>
        </member>
        <member name="M:SDG.Unturned.BezierTool.getLengthBruteForce(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Int32)">
            <param name="a">Start Vertex</param>
            <param name="b">Start Vertex + Start Tangent</param>
            <param name="c">End Vertex + End Tangent</param>
            <param name="d">End Vertex</param>
            <param name="uniformInterval">Spacing between points.</param>
            <param name="intervalTolerance">Max estimate distance from uniform interval before we have to retry.</param>
            <param name="attempts">How many times to retry if the estimate is too far off.</param>
        </member>
        <member name="T:SDG.Unturned.BinaryRandomComponent">
            <summary>
            Single percentage randomness with two outcomes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BinaryRandomComponent.AuthorityOnly">
            <summary>
            If true the event will only be invoked in offline mode and on the server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BinaryRandomComponent.DefaultProbability">
            <summary>
            Percentage chance of event occurring.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BinaryRandomComponent.OnTrue">
            <summary>
            Invoked when random event occurs.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BinaryRandomComponent.OnFalse">
            <summary>
            Invoked when random event does NOT occur.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TerrainEditor.isPointerOnLandscape">
            <summary>
            Whether the pointer is currently in a spot that can be painted.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TerrainEditor.getBrushAlpha(System.Single)">
            <summary>
            Get brush strength multiplier where strength decreases past falloff. Use this method so that different falloffs e.g. linear, curved can be added.
            </summary>
            <param name="normalizedDistance">Percentage of <see cref="P:SDG.Unturned.TerrainEditor.brushRadius"/>.</param>
        </member>
        <member name="P:SDG.Unturned.SleekList`1.IndexOfCreateElementItem">
            <summary>
            Kind of hacky... Used by player list for group connections.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ConsoleInputOutputBase">
            <summary>
            Read commands from standard input, and write logs to standard output.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ConsoleInputOutputBase.notifyInputCommitted(System.String)">
            <summary>
            Broadcast the inputCommited event.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ConsoleInputOutputBase.synchronizeTitle(System.String)">
            <summary>
            Synchronize console's title bar text.
            Virtual because at one point Win32 SetTitleText was required.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ConsoleInputOutputBase.handleCancelEvent(System.Object,System.ConsoleCancelEventArgs)">
            <summary>
            Intercept the Ctrl-C or Ctrl-Break termination.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ConsoleInputOutputBase.handleTermination">
            <summary>
            Handle Ctrl-C or Ctrl-Break on the game thread.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ConsoleInputOutputBase.wantsToTerminate">
            <summary>
            Has Ctrl-C or Ctrl-Break signal been received?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ConsoleInputOutputBase.isTerminating">
            <summary>
            Is the Ctrl-C or Ctrl-Break signal being handled?
            </summary>
        </member>
        <member name="F:SDG.Unturned.AchievementStatusData.NPC_Achievement_IDs">
            <summary>
            Names of achievements that can be granted by NPC rewards.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuStatusData.PromoLevel">
            <summary>
            Name of promo level to additively load.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuStatusData.PromoStart">
            <summary>
            UTC when to begin load promo level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuStatusData.PromoEnd">
            <summary>
            UTC when to stop loading promo level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CuratedMapLink.Name">
            <summary>
            Folder name of the map when it was in the game.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CuratedMapLink.Workshop_File_Id">
            <summary>
            Published steam id for the file after it was moved to the workshop.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CuratedMapLink.Required_Workshop_File_Ids">
            <summary>
            Dependencies to subscribe to when subscribing through the in-game menu.
            e.g. Hawaii's assets are stored separately on the workshop.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CuratedMapLink.Visible_In_Singleplayer_Recommendations_List">
            <summary>
            Only applies if player is not subscribed to the workshop file.
            Should an advertisement be shown in the Menu > Singleplayer > Curated list?
            </summary>
        </member>
        <member name="F:SDG.Unturned.AutoSubscribeMap.Workshop_File_Id">
            <summary>
            Published steam id to subscribe to.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AutoSubscribeMap.Start">
            <summary>
            If logging in after this point, subscribe.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AutoSubscribeMap.End">
            <summary>
            If logging in before this point, subscribe. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.MapsStatusData.Curated_Map_Links">
            <summary>
            Maps not installed by default, but recommended from maps list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MapsStatusData.Auto_Subscribe">
            <summary>
            Maps to install to automatically.
            Used early in startup to hopefully install before reaching main menu.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TireMotionEffectInstance">
            <summary>
            When moving between physics materials we need to continue any previous tire kickup particles until they expire.
            This class manages the individual effect per-physics-material. Each wheel can have multiple at once. When the
            particles have despawned and the effect is no longer needed, the effect game object is returned to the effect
            pool and this class is returned to <see cref="F:SDG.Unturned.Wheel.motionEffectInstancesPool"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TireMotionEffectInstance.materialName">
            <summary>
            Name from <see cref="M:SDG.Unturned.PhysicsTool.GetMaterialName(UnityEngine.Vector3,UnityEngine.Transform,UnityEngine.Collider)"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TireMotionEffectInstance.gameObject">
            <summary>
            Instantiated effect. Null after returning to pool.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TireMotionEffectInstance.transform">
            <summary>
            Effect's transform. Null after returning to pool.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TireMotionEffectInstance.particleSystem">
            <summary>
            Component on gameObject. Null after returning to pool.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TireMotionEffectInstance.isReadyToPlay">
            <summary>
            Whether this effect should be emitting particles. False stops the particle system immediately, whereas true
            only starts playing on the next frame to avoid filling a gap between positions, e.g., after a jump.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TireMotionEffectInstance.hasTriedToInstantiateEffect">
            <summary>
            Prevents repeated lookups if asset is null, while allowing asset to be looked up each time this effect
            becomes active so that it can be iterated on without restarting the game.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.hasBrakes">
            <summary>
            Does this wheel affect brake torque?
            </summary>
        </member>
        <member name="P:SDG.Unturned.Wheel.isPhysical">
            <summary>
            Turn on/off physics as needed. Overridden by isAlive.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.replicatedSuspensionState">
            <summary>
            [0.0, 1.0] normalized position of wheel along suspension.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.animatedSuspensionState">
            <summary>
            [0.0, 1.0] normalized position animated toward replicatedSuspensionState.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.animatedModelSuspension">
            <summary>
            Model position interpolated toward animatedSuspensionState according to modelSuspensionSpeed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.rollAngleDegrees">
            <summary>
            [0, 360] angle of rotation around wheel axle. Measured in degrees because Quaternion.AngleAxis takes degrees.
            
            We track rather than using GetWorldPose so that we can alternate between using replicated and simulated
            results without snapping transforms.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.motionEffectInstances">
            <summary>
            List is created if this wheel has a collider and uses collider pose. Null when vehicle is destroyed to
            prevent creation of more effects.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Wheel.currentGroundEffect">
            <summary>
            Instance corresponding to current ground material. Doesn't necessarily mean the particle system is active.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.Reset">
            <summary>
            Called after construction and on all clients and server when a player stops driving.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.Explode">
            <summary>
            Called when vehicles explodes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.ClientSimulate(System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Called during FixedUpdate if vehicle is driven by the local player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.CalculateNormalizedSuspensionPosition(UnityEngine.Vector3)">
            <summary>
            Calculate suspension state from GetWorldPose result.
            
            Nelson 2024-03-25: Originally we used the result of GetWorldPose for the model transform and calculated
            the suspension state from it because I thought Unity was internally using the spring position that isn't
            (currently) exposed to the API. Whether or not it is, it seems fine to calculate the spring position using
            the ground hit point instead. We switched entirely away from GetWorldPose so that the wheel can retain
            its roll angle when transitioning between locally simulated and replicated.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.UpdateServerSuspensionAndPhysicsMaterial">
            <summary>
            Called during Update on dedicated server only if replicated suspension state is enabled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.TeleportSuspensionState(System.Single)">
            <summary>
            Set replicated suspension state AND animated suspension state when vehicle is first received.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:SDG.Unturned.Wheel.CalculateWheelSpeed">
            <summary>
            Supported when locally simulated and on remote clients.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.UpdateModel(System.Single)">
            <summary>
            Called during Update on client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.UpdateLocallyDriven(System.Single,System.Single)">
            <summary>
            Called during Update if vehicle is driven by the local player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Wheel.CheckForTraps">
            <summary>
            Called during Update on the server while vehicle is driven by player.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CollisionTeleporter">
            <summary>
            Seamlessly teleports player to an equivalent position at the destination upon contact.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CollisionTeleporter.DestinationTransform">
            <summary>
            Target position and rotation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CollisionTeleporter.GizmoColor">
            <summary>
            Only used in the Unity editor for visualization.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Asset.hasBeenReplaced">
            <summary>
            If true, an asset with the same ID or GUID has been added to the current asset mapping, replacing this one.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Asset.absoluteOriginFilePath">
            <summary>
            Null or empty if created at runtime, otherwise set by <see cref="T:SDG.Unturned.Assets"/> when loading.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Asset.originMasterBundle">
            <summary>
            Master bundle this asset loaded from.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Asset.requiredShaderUpgrade">
            <summary>
            Were this asset's shaders set to Standard and/or consolidated?
            Needed for vehicle rotors special case.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Asset.ignoreNPOT">
            <summary>
            Should texture non-power-of-two warnings be ignored?
            Unfortunately some third party assets have odd setups.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Asset.ignoreTextureReadable">
            <summary>
            Should read/write texture warnings be ignored?
            </summary>
        </member>
        <member name="P:SDG.Unturned.Asset.hash">
            <summary>
            Hash of the original input file.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Asset.clearHash">
            <summary>
            Maybe temporary? Used when something in-game changes the asset so that it shouldn't be useable on the server anymore.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Asset.GetTypeNameWithoutSuffix">
            <summary>
            Most asset classes end in "Asset", so in debug strings if asset is clear from context we can remove the unnecessary suffix.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Asset.GetTypeFriendlyName">
            <summary>
            Remove "Asset" suffix and convert to title case.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Asset.OnCreatedAtRuntime">
            <summary>
            Perform any initialization required when PopulateAsset won't be called.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Asset.LoadRedirectableAsset``1(SDG.Unturned.Bundle,System.String,SDG.Unturned.DatDictionary,System.String)">
            <summary>
            Planning ahead to potentially convert the game to use Unity's newer Addressables feature.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ProfanityFilter.hardcodedBannedWords">
            <summary>
            2023-04-17: suggestion is to have a hardcoded list of hate speech that gets filtered
            regardless of whether profanity filter is enabled. (https://forum.smartlydressedgames.com/t/22477)
            </summary>
        </member>
        <member name="T:SDG.Unturned.RedirectorAsset">
            <summary>
            Special asset type that isn't (shouldn't be) returned by asset Find methods. Instead, if found when resolving
            an asset legacy ID or GUID, Find is called again with the target specified by this asset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_uGUI.EnumerateLiveElements">
            <summary>
            Enumerate elements that are not in the pool.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Glazier_uGUI.ValidateNewElement(SDG.Unturned.GlazierElementBase_uGUI)">
            <summary>
            Sanity check all returned elements have a gameObject.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ELevelWeatherOverride">
            <summary>
            Map creator can specify a constant weather mode.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelTrainAssociation">
            <summary>
            Associates a train vehicle ID with the index of a road path to spawn it on.
            The level only spawns the train if this vehicle ID isn't present in the map yet, so every train on the map has to be different.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Use_Vanilla_Bubbles">
            <summary>
            Should underwater bubble particles be activated?
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Use_Underground_Whitelist">
            <summary>
            Should positions underground be clamped above ground?
            Underground volumes are used to whitelist valid positions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Allow_Holiday_Redirects">
            <summary>
            If true, certain objects redirect to load others in-game.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Has_Global_Electricity">
            <summary>
            If true, electric objects are always powered, and generators have no effect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Version">
            <summary>
            Display version in the format "a.b.c.d".
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.PackedVersion">
            <summary>
            Version string packed into integer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Tips">
            <summary>
            Number of custom tips defined in per-level localization file.
            Tip keys are read as Tip_#
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelInfoConfigData.Batching_Version">
            <summary>
            LevelBatching is currently only enabled if map creator has verified it works properly.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.path">
            <summary>
            Absolute path to the map folder.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.canAnalyticsTrack">
            <summary>
            Whether unity analytics should track this map's name. Don't want to burn all the analysis points!
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.isSpecial">
            <summary>
            Maps included with the game only, separate from category because arena maps are misc.
            Category is set as part of the config file. This is only mainly used to enable unity analytics tracking for map name.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.isFromWorkshop">
            <summary>
            Only used for play menu categories at the moment.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.hash">
            <summary>
            SHA1 hash of the Level.dat file.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.isCurated">
            <summary>
            Test whether this map's workshop file ID is in the curated maps list.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelInfo.feedbackUrl">
            <summary>
            Web URL to map feedback discussions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelInfo.GetPreviewImageFilePath">
            <summary>
            Preview.png should be 320x180
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelInfo.GetLoadingScreenImagePath">
            <summary>
            Get a random file path in the /Screenshots folder, or fallback to Level.png if it exists.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelInfo.GetRandomScreenshotPath">
            <summary>
            Get a random file path in the /Screenshots folder
            </summary>
        </member>
        <member name="T:SDG.Unturned.EServerMessage">
            <summary>
            When adding or removing entries remember to update NetMessages size and regenerate NetCode!
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.GetWorkshopFiles">
            <summary>
            Client requesting workshop files to download.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.ReadyToConnect">
            <summary>
            Client has loaded the level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.Authenticate">
            <summary>
            Client providing Steam login token.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.BattlEye">
            <summary>
            Client sending BattlEye payload to server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.PingRequest">
            <summary>
            Client sent a ping.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.PingResponse">
            <summary>
            Client responded to our ping.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.InvokeMethod">
            <summary>
            Client calling an RPC.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.ValidateAssets">
            <summary>
            Client providing asset GUIDs with their file hashes to check integrity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EServerMessage.GracefullyDisconnect">
            <summary>
            Client intends to disconnect. It is fine if server does not receive this message
            because players are also removed for transport failure (e.g. timeout) and for expiry
            of Steam authentication ticket. This message is useful to know the client instigated
            the disconnection rather than an error.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerContinuousIntegrationReport.ExitCode">
            <summary>
            Error code that the server exited with.
            0 is succesful, anything else is an error.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerContinuousIntegrationReport.ErrorMessage">
            <summary>
            Empty if successful,
            otherwise an explanation of the first error encountered.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedNexus.initialize">
            <summary>
            Register all built-in asset and useable types.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CustomWeatherEventHook">
            <summary>
            Can be added to any GameObject to receive weather events for a specific custom weather asset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CustomWeatherEventHook.WeatherAssetGuid">
            <summary>
            GUID of custom weather asset to listen for.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CustomWeatherEventHook.OnWeatherBeginTransitionIn">
            <summary>
            Invoked when custom weather is activated, or immediately if weather is fading in when registered.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CustomWeatherEventHook.OnWeatherEndTransitionIn">
            <summary>
            Invoked when custom weather finishes fading in, or immediately if weather is already fully active when registered.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CustomWeatherEventHook.OnWeatherBeginTransitionOut">
            <summary>
            Invoked when custom weather is deactivated and begins fading out.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CustomWeatherEventHook.OnWeatherEndTransitionOut">
            <summary>
            Invoked when custom weather finishes fading out and is destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CustomWeatherEventHook.parsedGuid">
            <summary>
            GUID parsed from WeatherAssetGuid parameter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.hasLoadedModel">
            <summary>
            Prevents calling getOrLoad redundantly if asset does not exist.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.OnServerModelLoaded(UnityEngine.GameObject)">
            <summary>
            Clip.prefab
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.OnClientModelLoaded(UnityEngine.GameObject)">
            <summary>
            Object.prefab
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.ShouldExcludeFromSatelliteCapture">
            <summary>
            If true, object will be hidden when rendering GPS/satellite view.
            Defaults to true if <see cref="P:SDG.Unturned.ObjectAsset.holidayRestriction"/> is set.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.ShouldLoadNavOnServer">
            <summary>
            If true, Nav game object will be instantiated in singleplayer and on dedicated server. Useful for objects
            which need to affect navmesh baking without colliding with zombies during gameplay.
            Defaults to true for "medium" and "large" objects.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.ShouldLoadNavInEditor">
            <summary>
            If true, Nav game object will be instantiated in the level editor. Useful for objects which need collision
            with zombies during gameplay without affecting navmesh baking.
            Defaults to true for "medium" and "large" objects.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.causesFallDamage">
            <summary>
            Should landing on this object inflict fall damage?
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.FindInteractabilityDialogueAsset">
            <summary>
            Property is not exposed at the moment because interactability properties should really be moved into some
            sort of sub-asset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.interactabilityChildPathOverride">
            <summary>
            Same as interactabilityDialogueRef, not public because it really needs to be cleaned up. :(
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.rubbleEffectGuid">
            <summary>
            Effect played when single segment is destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.rubbleFinaleGuid">
            <summary>
            Effect played when all segments are destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.rubbleBladeID">
            <summary>
            Weapon must have matching blade ID to damage object.
            Both weapons and objects default to zero so they can be damaged by default.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.rubbleRewardProbability">
            <summary>
            [0, 1] probability of dropping any rewards.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.RubbleCanZombiesDamage">
            <summary>
            If true, zombies can attack this object if it's blocking them. Defaults to false.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.RubbleZombieDamageMultiplier">
            <summary>
            Multiplier for damage from zombies if RubbleCanZombiesDamage is true.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.RubbleNavMode">
            <summary>
            Controls how rubble affects Nav game object.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.shouldAddKillTriggers">
            <summary>
            Should colliders in the Triggers GameObject with "Kill" name kill players?
            If Triggers GameObject is not set, searches Object instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.isGore">
            <summary>
            Should this object only be visible if gore is enabled?
            Allows pre-placed blood splatters to be hidden for younger players.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectAsset.holidayRestriction">
            <summary>
            Only activated during this holiday.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.christmasRedirect">
            <summary>
            Object to use during the Christmas event instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ObjectAsset.halloweenRedirect">
            <summary>
            Object to use during the Halloween event instead.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.getHolidayRedirect">
            <summary>
            Get asset ref to replace this one for holiday, or null if it should not be redirected.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.GetConditionAssociatedFlags">
            <summary>
            If any conditions use flags they will be added to a set,
            otherwise null is returned.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.recursivelyFixTag(UnityEngine.GameObject,System.String,System.String)">
            <summary>
            Recursively change all children including root from oldTag to newTag.
            Aborts if a child doesn't match the old tag because it might be something we shouldn't change the tag of.
            <return>True if tags were all successfully changed.</return>
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.recursivelyFixLayer(UnityEngine.GameObject,System.Int32,System.Int32)">
            <summary>
            Recursively change all children including root from oldLayer to newLayer.
            Aborts if a child doesn't match the old layer because it might be something we shouldn't change the layer of.
            <return>True if layers were all successfully changed.</return>
            </summary>
        </member>
        <member name="M:SDG.Unturned.ObjectAsset.ensureNavMeshReadable">
            <summary>
            Called if we have a valid Nav GameObject.
            Recast requires any meshes used on the Nav objects to be CPU readable, so we log errors here if they're not marked as such.
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCZombieKillsCondition.spawn">
            <summary>
            Should zombie(s) of the required type be spawned when player enters the area?
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCZombieKillsCondition.spawnQuantity">
            <summary>
            How many to spawn if spawning <see cref="P:SDG.Unturned.NPCZombieKillsCondition.spawn"/> is enabled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCZombieKillsCondition.LevelTableUniqueId">
            <summary>
            If greater than zero, find this zombie type configured in the level editor. For example, if the level editor
            lists "0 Fire (4)", then 4 is the unique ID, and if assigned to this condition a zombie from the "Fire"
            table will spawn.
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCZombieKillsCondition.nav">
            <summary>
            Navmesh index player must be within. If set to byte.MaxValue then anywhere on the map is eligible.
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCZombieKillsCondition.sqrRadius">
            <summary>
            Only kills within this radius around the player are tracked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NPCZombieKillsCondition.sqrMinRadius">
            <summary>
            Only kills outside this radius around the player are tracked.
            NSTM requested this for a sniping zombies quest.
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCZombieKillsCondition.usesBossInterval">
            <summary>
            If spawning is enabled, whether to use the timer between spawns.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemStoreBundleContentsMenu">
            <summary>
            Shows inspect buttons for each item mentioned in purchasable box or bundle's description text.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UnturnedPostProcess">
            <summary>
            Manages global post-process volumes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedPostProcess.applyUserSettings">
            <summary>
            Callback when in-game graphic settings change.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UnturnedPostProcess.notifyPerspectiveChanged">
            <summary>
            Callback when player changes perspective.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CommandLineFlag.applyEditorPreference">
            <summary>
            Unfortunately EditorPrefs cannot be used in constructor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DismissableTimeSpan.isRelevant">
            <summary>
            Is current UTC time within this time span, and player has not dismissed?
            </summary>
        </member>
        <member name="M:SDG.Unturned.DismissableTimeSpan.hasDismissedSpan">
            <summary>
            Has the current time span been dismissed?
            For example, player may have dismissed a previous event but not this current one.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DismissableTimeSpan.isNowWithinSpan">
            <summary>
            Is current UTC time within this time span?
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerMessageHandler_ValidateAssets">
            <summary>
            Allows file name to be included in kick message that client would otherwise not know.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerMessageHandler_ValidateAssets.MAX_ASSETS">
            <summary>
            Actual max value is plus one because message never contains zero items.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LocalNews.wasWorkshopItemDismissed(System.UInt64)">
            <summary>
            Has player dismissed the given workshop item?
            </summary>
        </member>
        <member name="M:SDG.Unturned.LocalNews.dismissWorkshopItem(System.UInt64)">
            <summary>
            Track that the player has dismissed the given workshop item.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LocalNews.hasAutoSubscribedToWorkshopItem(System.UInt64)">
            <summary>
            Has player already auto-subscribed to the given workshop item?
            </summary>
        </member>
        <member name="M:SDG.Unturned.LocalNews.markAutoSubscribedToWorkshopItem(System.UInt64)">
            <summary>
            Track that the player has auto-subscribed to the given workshop item.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CollisionUtil.EncapsulateColliderBounds(UnityEngine.GameObject,System.Boolean,UnityEngine.Bounds@)">
            <summary>
            Find colliders in gameObject and encapsulate their bounding boxes together.
            </summary>
            <returns>True if bounds were determined, false otherwise.</returns>
        </member>
        <member name="M:SDG.Unturned.CollisionUtil.ClosestPoint(UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean,System.Int32)">
            <summary>
            Find colliders in gameObject and the point closest to position, otherwise use gameObject position.
            </summary>
            <param name="layerMask">Collider is only included if its layer is enabled in layer mask.</param>
        </member>
        <member name="M:SDG.Unturned.CollisionUtil.OverlapSphere(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Does sphere overlap anything?
            </summary>
        </member>
        <member name="T:SDG.Unturned.LodGroupEnumerator">
            <summary>
            Allows foreach loop to iterate renderers defined in lod group.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekInventory.extraTooltip">
            <summary>
            Hack, we put this string on a newline for box probabilities.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ChatManager.onChatMessageReceived">
            <summary>
            Called on the client after a new message is inserted to the front of the list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ChatManager.onServerSendingMessage">
            <summary>
            Called on the server when preparing a message to be sent to a player.
            Allows controlling how %SPEAKER% is formatted for the receiving player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ChatManager.onServerFormattingMessage">
            <summary>
            Called on the server when formatting a player's message before sending to anyone.
            Allows structuring the message and where the player's name is, for example: '[CustomPluginRoleThing] %SPEAKER% - OriginalMessageText'
            </summary>
        </member>
        <member name="P:SDG.Unturned.ChatManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.receiveChatMessage(Steamworks.CSteamID,System.String,SDG.Unturned.EChatMode,UnityEngine.Color,System.Boolean,System.String)">
            <summary>
            Add a newly received chat message to the front of the list,
            and remove an old message if necessary.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ChatManager.recentlySentMessages">
            <summary>
            Previous messages sent to server from this client.
            Newest at the front, oldest at the back. Used to repeat chat commands.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.sendChat(SDG.Unturned.EChatMode,System.String)">
            <summary>
            Send a request to chat from the client to the server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.clientSendMessage_UnityEvent(SDG.Unturned.EChatMode,System.String,SDG.Unturned.ClientTextChatMessenger)">
            <summary>
            Allows Unity events to send text chat messages from the client, for example to execute commands.
            Messenger context is logged to help track down abusive assets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.serverSendMessage_UnityEvent(System.String,UnityEngine.Color,System.String,System.Boolean,SDG.Unturned.ServerTextChatMessenger)">
            <summary>
            Allows Unity events to broadcast text chat messages from the server.
            Messenger context is logged to help track down abusive assets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.say(Steamworks.CSteamID,System.String,UnityEngine.Color,System.Boolean)">
            <summary>
            Server send message to specific player.
            Used in vanilla for the welcome message.
            Should not be removed because plugins may depend on it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.say(Steamworks.CSteamID,System.String,UnityEngine.Color,SDG.Unturned.EChatMode,System.Boolean)">
            <summary>
            Server send message to specific player.
            Used in vanilla by help command to tell player about command options.
            Should not be removed because plugins may depend on it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.say(System.String,UnityEngine.Color,System.Boolean)">
            <summary>
            Server send message to all players.
            Used in vanilla by some alerts and broadcast command.
            Should not be removed because plugins may depend on it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ChatManager.serverSendMessage(System.String,UnityEngine.Color,SDG.Unturned.SteamPlayer,SDG.Unturned.SteamPlayer,SDG.Unturned.EChatMode,System.String,System.Boolean)">
            <summary>
            Serverside send a chat message to all players, or a specific player.
            </summary>
            <param name="text">Contents to display.</param>
            <param name="color">Default text color unless rich formatting overrides it.</param>
            <param name="fromPlayer">Player who sent the message (used for avatar), or null if send by a plugin.</param>
            <param name="toPlayer">Send message to only this player, or all players if null.</param>
            <param name="mode">Mostly deprecated, but global/local/group may be displayed.</param>
            <param name="iconURL">URL to a 32x32 .png to show rather than a player avatar, or null/empty.</param>
            <param name="useRichTextFormatting">Enable rich tags e.g., bold, italics in the message contents.</param>
        </member>
        <member name="M:SDG.Unturned.ChatManager.CopyCameraTransform">
            <summary>
            Nelson 2024-10-14: We might want to elaborate on this with "client-side chat commands" in the future, but
            for the meantime I've hacked in this one command.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGearAsset.hairOverride">
            <summary>
            If set, find a child meshrenderer with this name and change its material to the character hair material.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SpawnTable.legacyAssetId">
            <summary>
            If non-zero, legacy ID of final Asset to return.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SpawnTable.legacySpawnId">
            <summary>
            If non-zero, legacy ID of SpawnAsset to resolve.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SpawnTable.targetGuid">
            <summary>
            If both legacy IDs are zero this GUID will be used. If the target asset is
            a SpawnAsset it will be further resolved, otherwise the found asset is returned.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SpawnTable.isOverride">
            <summary>
            Can be enabled by spawn tables that insert themselves into other spawn tables using the roots list.
            If true, zeros the weight of child tables in the parent spawn table.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SpawnTable.hasNotifiedChild">
            <summary>
            Has this spawn been added as a root of its child spawn table?
            Used for debugging spawn hierarchy in editor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTable.FindAsset(SDG.Unturned.EAssetType)">
            <summary>
            Helper method for plugins because IDs are internal.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SpawnAsset.insertRoots">
            <summary>
            Parent spawn assets this would like to be inserted into.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnAsset.markOverridden">
            <summary>
            Zero weights of child spawn tables.
            Called when inserting a root marked isOverride.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SpawnAsset.areTablesDirty">
            <summary>
            Do tables need to be sorted and normalized?
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnAsset.sortAndNormalizeWeights">
            <summary>
            Sort children by weight ascending, and calculate their normalized chance as a percentage of total weight.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnAsset.EditorRemoveParentAtIndex(System.Int32)">
            <summary>
            Remove from roots, and if reference is valid remove us from their children.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnAsset.EditorRemoveChildAtIndex(System.Int32)">
            <summary>
            Remove from tables, and if referencing a child table remove us from their roots.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AnimalManager.addAnimal(System.UInt16,UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns an animal into the world.
            </summary>
            <param name="id">The ID of the animal.</param>
            <param name="point">Position to spawn the animal.</param>
            <param name="angle">Angle to spawn the animal.</param>
            <param name="isDead">Whether the animal is dead or not.</param>
        </member>
        <member name="M:SDG.Unturned.AnimalManager.getAnimal(System.UInt16)">
            <summary>
            Gets the animal at a specific index.
            </summary>
            <param name="index">The index of the animal.</param>
            <returns></returns>
        </member>
        <member name="M:SDG.Unturned.AnimalManager.TeleportAnimalBackIntoMap(SDG.Unturned.Animal)">
            <summary>
            Find replacement spawnpoint for an animal and teleport it there.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AnimalManager.askClearAllAnimals">
            <summary>
            Used in arena mode to reset all animals to dead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.placementPreviewTransform">
            <summary>
            Stripped-down version of structure prefab for previewing where the structure will be spawned.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.isPlacementPreviewValid">
            <summary>
            Whether preview object is currently highlighted positively.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.useAnimationStartTime">
            <summary>
            Time when "Use" animation clip started playing in seconds.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.useAnimationDuration">
            <summary>
            Length of "Use" animation clip in seconds.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.isWaitingForSoundTrigger">
            <summary>
            True when animation starts playing, false after placement sound is played.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.isUseAnimationPlaying">
            <summary>
            Whether the "Use" animation clip started playing.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.hasServerReceivedBuildRequest">
            <summary>
            If running as server, whether ReceiveBuildStructure has been called yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.isServerBuildRequestInitiallyApproved">
            <summary>
            Whether basic range and claim checks passed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.pendingPlacementPosition">
            <summary>
            Position the item should be spawned at.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.pendingPlacementYaw">
            <summary>
            Rotation the item should be spawned at.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.animatedRotationOffset">
            <summary>
            Interpolated toward customRotationOffset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.customRotationOffset">
            <summary>
            Allows players to flip walls.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableStructure.foundationPositionOffset">
            <summary>
            Vertical offset using scroll wheel.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UseableStructure.HasFinishedUseAnimation">
            <summary>
            Whether enough time has passed for "Use" animation to finish.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UseableStructure.HasReachedSoundTrigger">
            <summary>
            Whether animation has reached the time when placement sound should play.
            </summary>
        </member>
        <member name="T:SDG.Unturned.AssetBundleVersion">
            <summary>
            Used to aid backwards compatibility as much as possible when transitioning Unity versions breaks asset bundles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetBundleVersion.UNITY_5">
            <summary>
            Unity 5.5 and earlier per-asset .unity3d file.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetBundleVersion.UNITY_2017_LTS">
            <summary>
            When "master bundles" were first introduced in order to convert older Unity 5.5 asset bundles in bulk.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetBundleVersion.UNITY_2018_AND_2019_LTS">
            <summary>
            Unity 2018 needed a new version number in order to convert materials from 2017 LTS asset bundles. 2019 did not need a
            new version number, but in retrospect it seems unfortunate that we cannot distinguish them, so 2020 does have its own.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetBundleVersion.NEWEST">
            <summary>
            2021 LTS+
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.hasFinishedInitialStartupLoading">
            <summary>
            The first time asset loading finishes it will load the main menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.isLoadingAllAssets">
            <summary>
            If true, either loading during initial startup or full refresh.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.isLoadingFromUpdate">
            <summary>
            If true, currently searching locations added after initial startup loading.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Assets.hasLoadedUgc">
            <summary>
            Has initial client UGC loading step run yet?
            Used to defer asset loading for workshop installs that occured during startup.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Assets.hasLoadedMaps">
            <summary>
            Has initial map loading step run yet?
            Used to defer map loading for workshop installs that occured during startup.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.AssetMapping.legacyAssetsTable">
            <summary>
            Calling this "legacy" is a bit of a stretch because even most of the vanilla assets are
            built around the 16-bit IDs. Ideally no new code should be relying on 16-bit IDs however.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.AssetMapping.modificationCounter">
            <summary>
            Incremented when assets are added or removed.
            Used by boombox UI to only refresh songs list if assets have changed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.currentAssetMapping">
            <summary>
            In singleplayer and the level editor this is the same as defaultAssetMapping,
            but when playing on a server a subset of assets based on the server's workshop files is used.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.shouldLoadAnyAssets">
            <summary>
            Should folders be scanned for and load .dat and asset bundle files?
            Plugin developers find it useful to quickly launch the server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.wantsDeferLoadingAssets">
            <summary>
            Do we want to enable shouldDeferLoadingAssets?
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.shouldValidateAssets">
            <summary>
            Should extra validation be performed on assets as they load?
            Useful for developing, but it does slow down loading.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Assets.shouldDeferLoadingAssets">
            <summary>
            Should some specific asset types which opt-in be allowed to defer loading from asset bundles until used?
            Disabled by asset validation because all assets need to be loaded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.shouldLogWorkshopAssets">
            <summary>
            Should workshop asset names and IDs be logged while loading?
            Useful when debugging unknown workshop content.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.exportAssetsReport">
            <summary>
            Should a JSON report of all the game's assets be exported?
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.shouldCollectGarbageAggressively">
            <summary>
            Should GC and clear unused assets be called after every loading frame?
            Potentially useful for players running out of RAM, refer to:
            https://github.com/SmartlyDressedGames/Unturned-3.x-Community/issues/1352#issuecomment-751138105
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.shouldLogSpawnInsertions">
            <summary>
            Should modded spawn tables being inserted into parents be logged?
            Useful for debugging workshop spawn table problems.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.allMasterBundles">
            <summary>
            Loaded master bundles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.pendingMasterBundles">
            <summary>
            Loading master bundles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.coreMasterBundle">
            <summary>
            Master bundle from root /Bundles directory containing vanilla assets.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Assets.currentMasterBundle">
            <summary>
            While an asset is being loaded, this is the master bundle for that asset.
            Used by master bundle pointer as a default.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.find(SDG.Unturned.EAssetType,System.UInt16)">
            <summary>
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.find``1(SDG.Unturned.AssetReference{``0})">
            <summary>
            Find an asset by GUID reference.
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
            <returns>Asset with matching GUID if it exists, null otherwise.</returns>
        </member>
        <member name="M:SDG.Unturned.Assets.Find_UseDefaultAssetMapping``1(SDG.Unturned.AssetReference{``0})">
            <summary>
            Find an asset by GUID reference.
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            Maybe considered a hack? Ignores the current per-server asset mapping.
            </summary>
            <returns>Asset with matching GUID if it exists, null otherwise.</returns>
        </member>
        <member name="M:SDG.Unturned.Assets.load``1(SDG.Unturned.ContentReference{``0})">
            <summary>
            Load content from an assetbundle.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.find(System.Guid)">
            <summary>
            Find an asset by GUID reference.
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
            <returns>Asset with matching GUID if it exists, null otherwise.</returns>
        </member>
        <member name="M:SDG.Unturned.Assets.find``1(System.Guid)">
            <summary>
            Find an asset by GUID reference.
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
            <returns>Asset with matching GUID if it exists, null otherwise.</returns>
        </member>
        <member name="M:SDG.Unturned.Assets.FindEffectAssetByGuidOrLegacyId(System.Guid,System.UInt16)">
            <summary>
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.FindNpcAssetByGuidOrLegacyId``1(System.Guid,System.UInt16)">
            <summary>
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.FindVehicleAssetByGuidOrLegacyId(System.Guid,System.UInt16)">
            <summary>
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            Note: this method doesn't handle redirects by VehicleRedirectorAsset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.FindBaseVehicleAssetByGuidOrLegacyId(System.Guid,System.UInt16)">
            <summary>
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            Note: this method doesn't handle redirects by VehicleRedirectorAsset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.FindItemByGuidOrLegacyId``1(System.Guid,System.UInt16)">
            <summary>
            This method supports <see cref="T:SDG.Unturned.RedirectorAsset"/>.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.find``1(System.Collections.Generic.List{``0})">
            <summary>
            Append assets that extend from result type.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.FindAssetsByType_UseDefaultAssetMapping``1(System.Collections.Generic.List{``0})">
            <summary>
            Maybe considered a hack? Ignores the current per-server asset mapping.
            Append assets that extend from result type.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.ApplyServerAssetMapping(SDG.Unturned.LevelInfo,System.Collections.Generic.List{Steamworks.PublishedFileId_t})">
             <summary>
             While playing on server the client will use the same dictionary/list of assets the server uses in order
             to reduce issues with ID conflicts.
            
             2023-05-27: server now ALSO uses the same logic to ensure IDs are applied in consistent order regardless
             of multi-threaded loading order.
             </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.findMasterBundleByPath(System.String)">
            <summary>
            Search all loaded master bundles for one in path's hierarchy.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.findMasterBundleByName(System.String,System.Boolean)">
            <summary>
            Find loaded master bundle by name.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.UnloadAllMasterBundles">
            <summary>
            Unload all asset bundles from memory, and empty known list.
            Called when reloading assets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.TryLoadFile(SDG.Unturned.AssetsWorker.AssetDefinition)">
            <summary>
            Catches exceptions thrown by LoadFile to avoid breaking loading.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.RequestAddSearchLocation(System.String,SDG.Unturned.AssetOrigin)">
            <summary>
            Called when a new workshop item is installed either on client or server. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.reload(System.String)">
            <summary>
            Reload assets in given folder.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Assets.hasUnlinkedSpawns">
            <summary>
            Do we have any new spawn assets that have not been linked yet?
            Used to skip linking spawns if not required when downloading assets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.linkSpawns">
            <summary>
            Can now be safely called multiple times on client in order to handle spawns for downloaded maps.
            Spawn tables have "roots" which allow mods to insert custom spawns into the vanilla spawn tables.
            This method is used after workshop assets are loaded on client, or after the dedicated server is done downloading workshop content.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.CheckForBlueprintErrors">
            <summary>
            Look through all item blueprints and log errors if there are duplicates.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.CheckForNpcErrors">
            <summary>
            Look through all dialogue and check that their referenced
            dialogueID or vendorID is an actual loaded asset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.CleanupMemory">
            <summary>
            Manually run asset unload and garbage collection in the hope
            that it will minimize RAM allocated during loading.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.AddDedicatedServerUgcSearchLocations">
            <summary>
            Helper for Assets.init.
            Load all non-map assets from:
            	/Bundles/Workshop/Content
            	/Servers/ServerID/Workshop/Content
            	/Servers/ServerID/Bundles
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.AddClientUgcSearchLocations">
            <summary>
            Helper for Assets.init.
            Load all non-map assets from subscribed UGC.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.AddSandboxSearchLocations">
            <summary>
            Helper for modders creating workshop content.
            Loads folders in the "Sandbox" directory the same way workshop files are loaded.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.AddMapSearchLocations">
            <summary>
            Helper for Assets.init.
            Load all assets in each map's Bundles folder, and content in map's Content folder.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Assets.TestDedicatedServerSteamRedist">
            <summary>
            Not the tidiest place for this, but it allows startup to pause and show error message.
            Occasionally there have been reports of the steamclient redist files being out of date on the dedicated
            server causing problems. For example: https://github.com/SmartlyDressedGames/Unturned-3.x-Community/issues/2866#issuecomment-965945985
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuSurvivorsClothingDeleteUI.salvageItem(System.Int32,System.UInt64)">
            <summary>
            Note: inventory service does not support exchanging multiple items simultaneously.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerInvocationContext">
            <summary>
            Optional parameter for error logging and responding to the invoker.
            </summary>
        </member>
        <member name="T:SDG.Unturned.OneShotAudioHandle">
            <summary>
            Wraps audio source to prevent caller from meddling with it, and to allow the implementation
            to change in the future if necessary.
            </summary>
        </member>
        <member name="M:SDG.Unturned.OneShotAudioParameters.#ctor(UnityEngine.AudioClip)">
            <summary>
            2D audio.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OneShotAudioParameters.parent">
            <summary>
            Optional parent transform to attach the audio source to.
            </summary>
        </member>
        <member name="F:SDG.Unturned.OneShotAudioParameters.spatialBlend">
            <summary>
            0 = 2D, 1 = 3D
            </summary>
        </member>
        <member name="T:SDG.Unturned.PooledAudioSource">
            <summary>
            Associates an ID with the instance of the sound being played. This ensures that if Stop() is called
            on an old handle it will not stop playing the audio if the component has already been recycled.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PooledAudioSource.isInPool">
            <summary>
            True while inactive, false while playing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AudioSourcePool.PlayCoroutine(SDG.Unturned.PooledAudioSource,System.Int32,System.Single)">
            <summary>
            Timer needs playId as well in case source has been recycled by the time duration expires.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NetTransportFactory">
            <summary>
            Not extendable until transport API is better finalized.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NPCHintReward.duration">
            <summary>
            How many seconds message should popup.
            </summary>
        </member>
        <member name="F:SDG.Unturned.HotkeyInfo.id">
            <summary>
            Which item ID we thought was there. If the item ID currently at the coordinates doesn't match we clear this hotkey.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EAttackInputFlags">
             <summary>
             Start/Stop input is encoded as 2 bits, 1 bit for Start flag and 1 bit for Stop flag.
             
             Prior to 2023-03-16 it was a single bit. The server would Start if true and the previous frame was false,
             and vice versa call Stop if false and the previous frame was true. The problem with that approach was when
             the client FPS is higher than the simulation FPS a series of repeated attack presses would be treated as a
             continuous held attack input. Semi-auto guns were difficult to shoot at their max rate of fire. Sending both
             allows the server to theoretically call Start every simulation frame as opposed to only half.
            
             First approach was to OR Start if held, otherwise OR Stop. This doesn't work because for example when Aim is
             pressed the Stop flag will already be enabled, so the gun Starts aiming, Stops aiming, Starts aiming, and then
             stays aiming rather than just Start and stay aiming. Instead we only want Stop to be sent once.
             </summary>
        </member>
        <member name="F:SDG.Unturned.EAttackInputFlags.Start">
            <summary>
            Wants to "start" primary or secondary input. (e.g., Useable.startPrimary)
            </summary>
        </member>
        <member name="F:SDG.Unturned.EAttackInputFlags.Stop">
            <summary>
            Wants to "stop" primary or secondary input. (e.g., Useable.stopPrimary)
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerEquipment.OnUseableChanged_Global">
            <summary>
            Invoked from tellEquip after change.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerEquipment.useableSkin">
            <summary>
            Skin applied to the currently equipped useable.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerEquipment.isUseableShowingMenu">
            <summary>
            Does equipped useable have a menu open?
            If so pause menu, dashboard, and other menus cannot be opened.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerEquipment.localWantsToAim">
            <summary>
            For aiming toggle input.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.getUseableRagdollEffect">
            <summary>
            Get ragdoll effect to use when the current weapon deals damage.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.ServerBindItemHotkey(System.Byte,SDG.Unturned.ItemAsset,System.Byte,System.Byte,System.Byte)">
            <summary>
            It should be safe to call this immediately because hotkeys are loaded in InitializePlayer.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.ClearDuplicateHotkeys(System.Int32)">
            <summary>
            Prevent multiple hotkeys from referencing the same item.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.fixStatTrackerHookScale(UnityEngine.Transform)">
            <summary>
            Left-handed characters need the stat tracker to be flipped on the X axis so that the text reads properly.
            ItemTool doesn't know about left/right handedness, so for the moment that's handled here because only players need this fixed up.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.syncStatTrackTrackerVisibility(UnityEngine.Transform)">
            <summary>
            Match stat tracker gameobject's isActive to whether skins are visible.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.syncAllStatTrackerVisibility">
            <summary>
            Match all stat tracker visibilities to whether skins are visible.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.equip(System.Byte,System.Byte,System.Byte)">
            <summary>
            Called clientside to ask server to equip an item in the inventory.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.ClientEquipAfterItemDrag(System.Byte,System.Byte,System.Byte)">
            <summary>
            Hacked-in to bypass regular clientside checks when client would predict the item at given coords.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.useStepA">
            <summary>
            Remove the item from inventory so that if we die before <see cref="M:SDG.Unturned.PlayerEquipment.useStepB"/> the item isn't dropped
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.useStepB">
            <summary>
            Finish dequipping from <see cref="M:SDG.Unturned.PlayerEquipment.useStepA"/>
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerEquipment.OnPunch_Global">
            <summary>
            Invoked before dealing damage regardless of whether the punch impacted anything.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.simulate_MustDequip">
            <summary>
            (Temporarily?) separated out from simulate to try and get a better exception call stack.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.simulate_UseableInput(System.UInt32,SDG.Unturned.EAttackInputFlags,SDG.Unturned.EAttackInputFlags,System.Boolean)">
            <summary>
            (Temporarily?) separated out from simulate to try and get a better exception call stack.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.simulate_PunchInput(System.UInt32,SDG.Unturned.EAttackInputFlags,SDG.Unturned.EAttackInputFlags)">
            <summary>
            (Temporarily?) separated out from simulate to try and get a better exception call stack.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.bindHotkey(System.Byte)">
            <summary>
            Allow UI to process input [0, 9] key press when cursor is visible.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.hotkey(System.Byte)">
            <summary>
            Process input [0, 9] key press.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerEquipment.CaptureAttackInputs(SDG.Unturned.EAttackInputFlags@,SDG.Unturned.EAttackInputFlags@)">
            <summary>
            Called by input when preparing for simulation frame.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ThreadUtil.setupGameThread">
            <summary>
            Called once by Setup.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ThreadUtil.IsGameThread(System.Threading.Thread)">
            <summary>
            Extension method for Thread class.
            Plugins use this.
            I might have accidentally removed it due to zero refs and Pustalorc was mad:
            https://github.com/SmartlyDressedGames/Unturned-3.x-Community/discussions/4131
            </summary>
        </member>
        <member name="M:SDG.Unturned.ThreadUtil.assertIsGameThread">
            <summary>
            Throw an exception if current thread is not the game thread.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ThreadUtil.ConditionalAssertIsGameThread">
            <summary>
            Only on dedicated server: throw an exception if current thread is not the game thread.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableHousingPlanner.RefreshAvailableItems">
            <summary>
            Search inventory for housing items, count the quantity of each, and remove
            duplicate entries from the list because it is used for the UI.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.placementPreviewTransform">
            <summary>
            Stripped-down version of structure prefab for previewing where the structure will be spawned.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.isPlacementPreviewValid">
            <summary>
            Whether preview object is currently highlighted positively.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.pendingPlacementPosition">
            <summary>
            Position the item should be spawned at.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.pendingPlacementYaw">
            <summary>
            Rotation the item should be spawned at.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.animatedRotationOffset">
            <summary>
            Interpolated toward customRotationOffset.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.customRotationOffset">
            <summary>
            Allows players to flip walls.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.foundationPositionOffset">
            <summary>
            Vertical offset using scroll wheel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableHousingPlanner.selectedItemBox">
            <summary>
            Box in the HUD with selected item name and quantity.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamItemStore.GetCurrencyFormatInfo(System.String)">
            <summary>
            Steam currency codes seem to be ISO 4217, however the documentation (as of 2021-01-29) does not say so.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamItemStore.IsOverlayEnabledForCheckout">
            <summary>
            If overlay is disabled there is no point showing the in-game item store because the player will not be able
            to checkout. We request listings regardless in order to show the "sale" label automatically.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ThreadedWindowsConsoleInputOutput">
            <summary>
            Windows-specific extensions of Windows console input.
            Uses the Win32 API to force a console to be created and destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedPaths.RootDirectory">
            <summary>
            Directory the game files are installed in. For the editor this is the /Builds/Shared directory.
            Windows and Linux: contains the executable and the Unturned_Data directory.
            MacOS: contains the Unturned.app bundle.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.FindVehicleByLegacyIdAndHandleRedirects(System.UInt16)">
            <summary>
            Handles VehicleRedirectorAsset (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.FindVehicleByLegacyIdAndHandleRedirectsWithLoadColor(System.UInt16,UnityEngine.Color32@)">
            <summary>
            Handles VehicleRedirectorAsset returning load paint color override (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.FindVehicleByLegacyIdAndHandleRedirectsWithSpawnColor(System.UInt16,UnityEngine.Color32@)">
            <summary>
            Handles VehicleRedirectorAsset returning spawn paint color override (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.FindVehicleByGuidAndHandleRedirects(System.Guid)">
            <summary>
            Handles VehicleRedirectorAsset (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.FindVehicleByGuidAndHandleRedirectsWithLoadColor(System.Guid,UnityEngine.Color32@)">
            <summary>
            Handles VehicleRedirectorAsset returning load paint color override (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.FindVehicleByGuidAndHandleRedirectsWithSpawnColor(System.Guid,UnityEngine.Color32@)">
            <summary>
            Handles VehicleRedirectorAsset returning spawn paint color override (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.HandleRedirects(SDG.Unturned.Asset)">
            <summary>
            Handles VehicleRedirectorAsset (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.HandleRedirectsWithLoadColor(SDG.Unturned.Asset,UnityEngine.Color32@)">
            <summary>
            Handles VehicleRedirectorAsset returning load paint color override (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.HandleRedirectsWithSpawnColor(SDG.Unturned.Asset,UnityEngine.Color32@)">
            <summary>
            Handles VehicleRedirectorAsset returning spawn paint color override (if any) and returns actual vehicle asset (if any).
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.SpawnVehicleForPlayer(SDG.Unturned.Player,SDG.Unturned.Asset)">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VehicleTool.giveVehicle(SDG.Unturned.Player,System.UInt16)">
            <summary>
            Supports redirects by VehicleRedirectorAsset. If redirector's SpawnPaintColor is set, that color is used.
            </summary>
            <returns>true if matching vehicle asset was found. (Not necessarily whether vehicle was spawned.)</returns>
        </member>
        <member name="M:SDG.Unturned.ItemToolAsset.canBeUsedInSafezone(SDG.Unturned.SafezoneNode,System.Boolean)">
            <summary>
            Tools like carjacks and tires can be used in safezone by admins for maintenance.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierFactory.Create">
            <summary>
            Create glazier implementation. Invoked early during startup.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemBarrelAsset.gunshotRolloffDistanceMultiplier">
            <summary>
            Multiplier for the maximum distance the gunshot can be heard.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IConvenientSavedata.DeleteBool(System.String)">
            <returns>true if key existed and was removed.</returns>
        </member>
        <member name="T:SDG.Unturned.ConvenientSavedata">
            <summary>
            Unturned equivalent of unity's PlayerPrefs.
            Convenient for saving one-off key-value pairs.
            </summary>
        </member>
        <member name="T:SDG.Unturned.PhysicsMaterialNetTable">
            <summary>
            String table specifically for Unity physics material names.
            Implemented so that tires can more efficiently replicate which ground material they are touching.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsMaterialNetTable.GetNetId(System.String)">
            <summary>
            Get an ID that can be used to reference a physics material name over the network. If given material name
            isn't supported (e.g., not registered in a PhysicsMaterialAsset or over max material limit) returns
            <see cref="F:SDG.Unturned.PhysicsMaterialNetId.NULL"/> instead.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsMaterialNetTable.GetMaterialName(SDG.Unturned.PhysicsMaterialNetId)">
            <summary>
            Get name of a physics material from network ID. Returns null if ID is null, e.g., if the sent name wasn't
            registered or was over the max material limit.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsMaterialNetTable.Clear">
            <summary>
            Called when resetting network state.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsMaterialNetTable.ServerPopulateTable">
            <summary>
            Called on server and singleplayer before loading level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PhysicsMaterialNetTable.idBitCount">
            <summary>
            Number of bits needed to replicate PhysicsMaterialNetId.
            </summary>
        </member>
        <member name="T:SDG.Unturned.IExplosionDamageable">
            <summary>
            Implemented by components to support taking damage from explosions.
            Not intended for external use (yet?) and may need to change. 
            </summary>
        </member>
        <member name="P:SDG.Unturned.IExplosionDamageable.IsEligibleForExplosionDamage">
            <summary>
            Used to exclude dead entities from further evaluation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IExplosionDamageable.GetClosestPointToExplosion(UnityEngine.Vector3)">
            <summary>
            Used to sort damage from nearest to furthest.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ExplosionDamageParameters">
            <summary>
            Intended for internal use only.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ExplosionPoolData">
            <summary>
            Data that we pool to reduce allocations, but needs to be separate per-invocation of explosion in case it's
            invoked recursively. (for example, by blowing up a vehicle)
            </summary>
        </member>
        <member name="E:SDG.Unturned.DamageTool.damagePlayerRequested">
            <summary>
            Replacement for playerDamaged.
            </summary>
        </member>
        <member name="E:SDG.Unturned.DamageTool.damageZombieRequested">
            <summary>
            Replacement for zombieDamaged.
            </summary>
        </member>
        <member name="E:SDG.Unturned.DamageTool.damageAnimalRequested">
            <summary>
            Replacement for animalDamaged.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamageTool.explosionDataPool">
            <summary>
            Refer to ExplosionPoolData for pooling explanation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.getStructureRootTransform(UnityEngine.Transform)">
            <summary>
            Was necessary when structures were children of level transform.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.getResourceRootTransform(UnityEngine.Transform)">
            <summary>
            Was necessary when trees were children of ground transform.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.getPlayerExplosionArmor(SDG.Unturned.Player)">
            <summary>
            Get average explosionArmor of player's equipped clothing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.GetZombieExplosionArmor(SDG.Unturned.Zombie)">
            <summary>
            Refer to getPlayerExplosionArmor for explanation of total/average.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.damageZombie(SDG.Unturned.DamageZombieParameters,SDG.Unturned.EPlayerKill@,System.UInt32@)">
            <summary>
            Do damage to a zombie.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.damage(SDG.Unturned.Zombie,UnityEngine.Vector3,System.Single,System.Single,SDG.Unturned.EPlayerKill@,System.UInt32@,SDG.Unturned.EZombieStunOverride,SDG.Unturned.ERagdollEffect)">
            <summary>
            Legacy function replaced by damageZombie.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.damage(SDG.Unturned.Zombie,SDG.Unturned.ELimb,UnityEngine.Vector3,SDG.Unturned.IDamageMultiplier,System.Single,System.Boolean,SDG.Unturned.EPlayerKill@,System.UInt32@,SDG.Unturned.EZombieStunOverride,SDG.Unturned.ERagdollEffect)">
            <summary>
            Legacy function replaced by damageZombie.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.damageAnimal(SDG.Unturned.DamageAnimalParameters,SDG.Unturned.EPlayerKill@,System.UInt32@)">
            <summary>
            Do damage to an animal.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.damage(SDG.Unturned.Animal,UnityEngine.Vector3,System.Single,System.Single,SDG.Unturned.EPlayerKill@,System.UInt32@,SDG.Unturned.ERagdollEffect)">
            <summary>
            Legacy function replaced by damageAnimal.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.damage(SDG.Unturned.Animal,SDG.Unturned.ELimb,UnityEngine.Vector3,SDG.Unturned.IDamageMultiplier,System.Single,SDG.Unturned.EPlayerKill@,System.UInt32@,SDG.Unturned.ERagdollEffect)">
            <summary>
            Legacy function replaced by damageAnimal.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.explode(UnityEngine.Vector3,System.Single,SDG.Unturned.EDeathCause,Steamworks.CSteamID,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{SDG.Unturned.EPlayerKill}@,SDG.Unturned.EExplosionDamageType,System.Single,System.Boolean,System.Boolean,SDG.Unturned.EDamageOrigin,SDG.Unturned.ERagdollEffect)">
            <summary>
            This unwieldy mess is the original explode function, but should be maintained for backwards compatibility with plugins.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamageTool.emptyKillsList">
            <summary>
            Used if explosion won't damage anything.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.explode(SDG.Unturned.ExplosionParameters,System.Collections.Generic.List{SDG.Unturned.EPlayerKill}@)">
            <summary>
            Do radial damage.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.impact(UnityEngine.Vector3,UnityEngine.Vector3,SDG.Unturned.EPhysicsMaterial,System.Boolean)">
            <summary>
            Server spawn impact effect for all players within range.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.impact(UnityEngine.Vector3,UnityEngine.Vector3,SDG.Unturned.EPhysicsMaterial,System.Boolean,Steamworks.CSteamID,UnityEngine.Vector3)">
            <summary>
            Server spawn impact effect for all players within range. Optional "spectator" receives effect regardless of distance.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.impact(UnityEngine.Vector3,UnityEngine.Vector3,System.UInt16,Steamworks.CSteamID,UnityEngine.Vector3)">
            <summary>
            Server spawn effect by ID for all players within range. Optional "spectator" receives effect regardless of distance.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.ServerTriggerImpactEffectForMagazinesV2(SDG.Unturned.EffectAsset,UnityEngine.Vector3,UnityEngine.Vector3,SDG.Unturned.SteamPlayer)">
            <summary>
            Server spawn effect for all players within range and instigator receives effect regardless of distance.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DamageTool.LocalSpawnBulletImpactEffect(UnityEngine.Vector3,UnityEngine.Vector3,System.String,UnityEngine.Transform)">
            <summary>
            parent should only be set if that system also calls ClearAttachments, otherwise attachedEffects will leak memory.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Attachments.SelectAttachmentParent(UnityEngine.Transform,SDG.Unturned.ItemCaliberAsset)">
            <summary>
            Nelson 2024-11-15: By default, attachments use their corresponding "hook" transform. For example, magazines
            use the "Magazine" transform as their parent. If a child of the hook transform matches a caliber in the
            attachment's caliber list that is used instead.
            </summary>
        </member>
        <member name="P:SDG.Unturned.VendorAsset.enableSorting">
            <summary>
            Should the buying and selling lists be alphabetically sorted?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerCrafting.ServerRefreshOwnerCrafting">
            <summary>
            Requested for plugin use.
            Notifies owner they should refresh the crafting menu.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerCrafting.getIgnoringBlueprint(SDG.Unturned.Blueprint)">
            <summary>
            Get whether this player is ignoring a blueprint.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerCrafting.setIgnoringBlueprint(SDG.Unturned.Blueprint,System.Boolean)">
            <summary>
            Set whether this player is ignoring a blueprint.
            This is a kludge to help with accidentally crafting items like blindfolds.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ScreenEx">
            <summary>
            Extensions to the built-in Screen class.
            We have run into multiple problems with the Screen.resolutions property over the years, so this class aims to
            protect against bad data.
            </summary>
        </member>
        <member name="T:SDG.Unturned.PhysicMaterialCustomData">
            <summary>
            Work-in-progress plan to allow modders to create custom physics effects.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicMaterialCustomData.IsArable(System.String)">
            <summary>
            Can crops be planted on a given material?
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicMaterialCustomData.HasOil(System.String)">
            <summary>
            Can oil drills be placed on a given material?
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeRegion.IndexOfBarricadeByRootTransform(UnityEngine.Transform)">
            <summary>
            New code should not use this. Only intended for backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeRegion.FindBarricadeByRootFast(UnityEngine.Transform)">
            <summary>
            Ideally the interactable components should have a reference to their barricade, but that will maybe happen
            after the NetId rewrites. For the meantime this is to avoid calling FindBarricadeByRootTransform. If we go
            the component route then FindBarricadeByRootTransform will do the same as this method.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelZombies.FindTableIndexByUniqueId(System.Int32)">
            <returns>-1 if table was not found.</returns>
        </member>
        <member name="M:SDG.Unturned.GlazierUtils_UIToolkit.AddClickableActivators(UnityEngine.UIElements.Clickable)">
            <summary>
            By default, clickable only responds to LeftMouse without the Control modifier.
            Unturned (currently) filters left/right mouse and modifiers outside Glazier,
            so add activators for left/right and control modifier to all clickables.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierUtils_UIToolkit.GetFontStyle(UnityEngine.FontStyle)">
            <summary>
            USS best practices mentions inline styles have a higher memory overhead, so we
            only apply an inline value if it doesn't match the default :root font style.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierUtils_UIToolkit.GetTextAlignment(UnityEngine.TextAnchor)">
            <summary>
            USS best practices mentions inline styles have a higher memory overhead, so we
            only apply an inline value if it doesn't match the default :root text alignment.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsTool.GetLegacyMaterialByName(System.String)">
            <summary>
            Get legacy enum corresponding to Unity physics material object name.
            Moved from obsolete <cref>checkMaterial</cref> method.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierElementBase_uGUI">
            <summary>
            Base class for uGUI implementations of primitive building block widgets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_uGUI.ConstructNew">
            <summary>
            Called after constructor when not populating from component pool.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_uGUI.ConstructFromPool(SDG.Unturned.GlazierElementBase_uGUI.PoolData)">
            <summary>
            Called after constructor when re-using components from pool.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_uGUI.SynchronizeColors">
            <summary>
            Synchronize uGUI component colors with background/text/image etc. colors.
            Called when custom UI colors are changed, and after constructor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_uGUI.SynchronizeTheme">
            <summary>
            Synchronize uGUI component sprites with theme sprites.
            Called when custom UI theme is changed, and after constructor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_uGUI.ReleaseIntoPool">
            <returns>False if element couldn't be released into pool and should be destroyed.</returns>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_uGUI.EnableComponents">
            <summary>
            Unity recommends enabling components after parenting into the destination hierarchy.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GlazierElementBase_uGUI.AttachmentTransform">
            <summary>
            RectTransform children should be attached to. Overridden by ScrollView content panel.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GlazierElementBase_uGUI.ShouldHaveLayoutElementComponent">
            <summary>
            This helper property's purpose is to:
            - Ensure other properties don't accidentally remove LayoutElement if others need it.
            - Ensure LayoutElement is destroyed before returning to pool.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerConnectParameters">
             <summary>
             Parameters for connecting to a game server.
            
             Admittedly there are other parameters to the Connect method,
             but those are for detecting advertisement discrepencies and can be null.
             </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConnectParameters.address">
            <summary>
            Server's public IP address of a Steam "Fake IP" address.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConnectParameters.queryPort">
            <summary>
            Port for Steam's "A2S" query system. This the port we refer to when
            sharing a server's address (e.g., 127.0.0.1:queryport).
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConnectParameters.connectionPort">
            <summary>
            Port for game traffic. i.e., Steam manages the query port socket while
            we manage the connection port socket. The game assumes it's the query
            port plus one. NOTE HOWEVER after the introduction of "Fake IP" support
            (2023-12-07) the connection port is the same as the query port for fake
            IPs. In keeping with the spirit of fake values to simplify existing code,
            we act as if the connection port is plus one except in the appropriate
            ClientTransport code when the fake IP is detected.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerConnectParameters.steamId">
            <summary>
            Referred to as "Server Code" in menus.
            Used if address is zero.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EffectSpawner">
            <summary>
            Allows Unity events to spawn effects.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectSpawner.DefaultEffectAssetGuid">
            <summary>
            GUID of effect asset to spawn when SpawnDefaultEffect is invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectSpawner.AuthorityOnly">
            <summary>
            If true the server will spawn the effect and replicate it to clients,
            otherwise clients will predict their own local copy.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectSpawner.Reliable">
            <summary>
            Should the RPC be called in reliable mode? Unreliable effects might not be received.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectSpawner.OverrideTransform">
            <summary>
            Transform to spawn the effect at.
            If unset this game object's transform will be used instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectSpawner.OverrideRelevantDistance">
            <summary>
            Applied if greater than zero. Defaults to 128.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LoadingUI.placeholderCamera">
            <summary>
            Camera used while transitioning between scenes to prevent the "no cameras rendering" warning.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LoadingUI.lastLoading">
            <summary>
            Set to Time.frameCount + 1 while loading.
            In the past used realtime, but that was unreliable if an individual frame took too long.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LoadingUI.PickNonLevelBackgroundImage">
            <summary>
            Select a loading image while on the startup screen or a level without any images.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Regions.getUnsafeCoordinates(UnityEngine.Vector3,System.Int32@,System.Int32@)">
            <summary>
            Convert world-space point into region coordinates that may be out of bounds.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Regions.clampPositionIntoBounds(UnityEngine.Vector3@)">
            <summary>
            Clamp position into the maximum bounds expected by the game, not necessarily the level bounds.
            </summary>
            <returns>True if position was modified.</returns>
        </member>
        <member name="M:SDG.Unturned.ServerMessageHandler_ReadyToConnect.IsNameBlockedByNelsonFilter(System.String)">
            <summary>
            Kick players maybe trying to impersonate me. I guess nobody else named Nelson is allowed in the game!
            2023-09-19: relaxed this a bit by trimming names and using Equals/Starts/Ends rather than Contains
            because there was a player with Nelson in their username.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ITypeReference.assemblyQualifiedName">
            <summary>
            GUID of the asset this is referring to.
            </summary>
        </member>
        <member name="P:SDG.Unturned.TypeReference`1.isValid">
            <summary>
            Whether the type has been asigned. Note that this doesn't mean an asset with <see cref="P:SDG.Unturned.TypeReference`1.assemblyQualifiedName"/> exists.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TypeReference`1.isReferenceTo(System.Type)">
            <summary>
            True if resovling this type reference would get that type.
            </summary>
        </member>
        <member name="F:SDG.Unturned.FlagData.maxBossZombies">
            <summary>
            Maximum count of naturally spawned boss zombies. Unlimited if negative.
            Game will not spawn/respawn boss zombie types passing this limit, but quest spawns can bypass it.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierElementBase_UIToolkit">
            <summary>
            Base class for UIToolkit implementations of primitive building block widgets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GlazierElementBase_UIToolkit.visualElement">
            <summary>
            Set by child.
            </summary>
        </member>
        <member name="M:SDG.Unturned.GlazierElementBase_UIToolkit.SynchronizeColors">
            <summary>
            Synchronize control colors with background/text/image etc. colors.
            Called when custom UI colors are changed, and after constructor.
            </summary>
        </member>
        <member name="P:SDG.Unturned.NPCVehicleReward.paintColor">
            <summary>
            If set, takes priority over VehicleRedirectorAsset's paint color and over VehicleAsset's default paint color.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NPCVehicleReward.FindAsset">
            <summary>
            Returned asset is not necessarily a vehicle asset yet: It can also be a VehicleRedirectorAsset which the
            vehicle spawner requires to properly set paint color.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableThrowable.onThrowableSpawned">
            <summary>
            Plugin-only event when throwable is spawned on server.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NPCEventManager">
            <summary>
            Allows NPCs to trigger plugin or script events.
            </summary>
        </member>
        <member name="E:SDG.Unturned.NPCEventManager.onEvent">
            <summary>
            instigatingPlayer can be null. For example, if instigated by NpcGlobalEventMessenger.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerListCurationFile">
            <summary>
            Data in common between list downloaded from a GET request and a ServerListCurationAsset.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ServerListCurationFile.IconUrl">
            <summary>
            Optional web image path if icon isn't included.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationFile.latestBlockedServerCount">
            <summary>
            Incremented during server list refresh for each server blocked by this rule.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BulletInfo.origin">
            <summary>
            Starting position when the bullet was fired.
            </summary>
        </member>
        <member name="P:SDG.Unturned.BulletInfo.ApproximatePlayerAimDirection">
            <summary>
            Only available on the server. For use by plugins developers who want to analyze deviation between approximate
            start direction and final hit position using <see cref="E:SDG.Unturned.UseableGun.onBulletSpawned"/> and <see cref="E:SDG.Unturned.UseableGun.onBulletHit"/>
            per public issue #4450. Note that origin and direction on server are not necessarily exactly the same as on
            the client for a variety of reasons, including that bullets on the client can be spawned between simulation
            frames when the aim direction was different. (Aim direction is updated every drawn frame on the client as
            opposed to every simulation frame on the server.) Rather than kicking for one particularly large deviation
            we would recommend tracking stats for each shot's actual deviation vs max theoretical deviation. Remember
            to account for bullet drop and that aim spread is relative to this direction. (For example, a shotgun may
            fire ~8 pellets in a cone around this direction.) Note also that in third-person the bullet can turn up to
            90 degrees from the aim direction if the camera is up against a wall.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BulletInfo.gravityMultiplier">
            <summary>
            Combination of gun and attachments' bullet gravity multipliers.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.changeAttachmentRequested(SDG.Unturned.UseableGun.ChangeAttachmentRequestHandler,SDG.Unturned.Item,SDG.Unturned.ItemJar)">
            <returns>Whether plugin allowed attachment.</returns>
        </member>
        <member name="E:SDG.Unturned.UseableGun.onBulletSpawned">
            <summary>
            Plugin-only event when bullet is fired on server.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableGun.onBulletHit">
            <summary>
            Plugin-only event when bullet hit is received from client.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableGun.onProjectileSpawned">
            <summary>
            Plugin-only event when projectile is spawned on server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.originalReticuleHookLocalPosition">
            <summary>
            reticuleHook.localPosition after instantiation, or zero if null.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.wasTriggerJustPulled">
            <summary>
            True if startPrimary was called this simulation frame.
            Allows gun to shoot even if stopPrimary is called immediately afterwards.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.fireDelayCounter">
            <summary>
            Remaining calls to tock before firing.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.interact">
            <summary>
            Is the tactical attachment toggle on?
            e.g. True when the laser is enabled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.UseableGun.shouldEnableTacticalStats">
            <summary>
            Should stat modifiers from the current tactical attachment be used?
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.firstPersonZoomFactor">
            <summary>
            Factor e.g. 2 is a 2x multiplier.
            Prior to 2022-04-11 this was the target field of view. (90/fov)
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.thirdPersonZoomFactor">
            <summary>
            Zoom multiplier in third-person.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGun.shouldZoomUsingEyes">
            <summary>
            Whether main camera field of view should zoom without scope camera / scope overlay.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.project(UnityEngine.Vector3,UnityEngine.Vector3,SDG.Unturned.ItemBarrelAsset,SDG.Unturned.ItemMagazineAsset)">
            <summary>
            Original barrel and magazine assets are supplied because they may have already been deleted. Barrel is only
            valid if quality was greater than zero.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.fire">
            <summary>
            Called on server and owning client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.getBulletDamageMultiplier(SDG.Unturned.BulletInfo@)">
            <summary>
            Calculate damage multiplier for individual bullet.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.ServerPlayReload(System.Boolean)">
            <summary>
            Requested for plugin use.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.ReceivePlayChamberJammed(System.Byte)">
            <summary>
            Request from the server to play a gun jammed animation.
            Since client can't predict chamber jams we fixup the predicted ammo count.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.CalculateBulletGravity">
            <summary>
            Note: This is the m/s² acceleration, not the multiplier.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.GetInterpolatedAimAlpha">
            <summary>
            This is a bit of a hack... aimAccuracy is [0, maxAimingAccuracy] and changed during each FixedUpdate call,
            but was used in some gameplay display features like holo sight, laser, ADS, etc. (yes, should
            be de-coupled from FixedUpdate but that is its own issue) To smooth this out we interpolate
            slightly behind the aimAccuracy value depending on the time since FixedUpdate.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.UpdateHolographicReticulePosition">
            <summary>
            Holographic sights follow the true aiming direction regardless of viewmodel animation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.CalculateBulletGravityMultiplier">
            <summary>
            Note: This is the multiplier, not the m/s² acceleration.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableGun.DetonateExplosiveMagazine(SDG.Unturned.ItemMagazineAsset,UnityEngine.Vector3,SDG.Unturned.Player,SDG.Unturned.ERagdollEffect)">
            <summary>
            Code common for regular gun and sentry gun.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InventorySearch.deleteAmount(SDG.Unturned.Player,System.UInt32)">
            <summary>
            Serverside delete an amount of this item.
            </summary>
            <returns>Total amount deleted.</returns>
        </member>
        <member name="T:SDG.Unturned.PlayerHashValidation">
            <summary>
            Used by the server to validate client Unity player files (assemblies and resources).
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerHashValidation.bypassAssemblyHash">
            <summary>
            Should players be allowed to join this server regardless of whether their DLL hash matches ours?
            Useful to allow players to join debug mode servers.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerHashValidation.bypassResourcesHash">
            <summary>
            Should players be allowed to join this server regardless of whether their resources hash matches ours?
            Useful to allow players to join debug mode servers.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemConsumeableAsset.experience">
            <summary>
            Experience to add or subtract when used. Defaults to zero.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemConsumeableAsset.doesItemTypeHaveSkins">
            <summary>
            Canned beans have skins from April Fools.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EditorObjects.releaseHandle">
            <summary>
            Reset dragging handle and register transformation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetworkSnapshotBuffer`1.updateLastSnapshot(`0)">
            <summary>
            Sets the point to lerp from, should be called after resetting position or things like that.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NsbLog">
            <summary>
            Logs enabled when WITH_NSB_LOGGING is defined.
            Tracking down an issue where snapshot buffer stops working for groups of networked objects.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EClientMessage">
            <summary>
            When adding or removing entries remember to update NetMessages size and regenerate NetCode!
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.PingRequest">
            <summary>
            Server sent a ping.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.PingResponse">
            <summary>
            Server replying to our ping.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Shutdown">
            <summary>
            Server is shutting down shortly.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.PlayerConnected">
            <summary>
            Create game object for player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.PlayerDisconnected">
            <summary>
            Destroy game object for player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.DownloadWorkshopFiles">
            <summary>
            Download these files before loading the level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Verify">
            <summary>
            Server wants additional info before accepting us.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Accepted">
            <summary>
            Server has accepted us and will create a player game object.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Rejected">
            <summary>
            Server rejected us, we will go back to the menu.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Banned">
            <summary>
            Banned either during connect or gameplay.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Kicked">
            <summary>
            Kicked during gameplay.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Admined">
            <summary>
            Should be converted to an RPC. Leftover from prior to net messaging code.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.Unadmined">
            <summary>
            Should be converted to an RPC. Leftover from prior to net messaging code.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.BattlEye">
            <summary>
            Server sending BattlEye payload to client.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.QueuePositionChanged">
            <summary>
            Infrequent notification of queue position.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EClientMessage.InvokeMethod">
            <summary>
            Server calling an RPC.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ExplosionSpawner">
            <summary>
            Allow Unity events to apply damage in a sphere. (doesn't have any visual effects)
            Intended to replace unsupported/unintentional use of "Grenade.cs" and "Rocket.cs" scripts.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ExplosionSpawner.DamageType">
            <summary>
            Zombie explosion types have slight variations e.g. lighting zombies on fire.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ExplosionSpawner.AlertRadiusOverride">
            <summary>
            If greater than -0.5, overrides default radius zombies and animals will be alerted within.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ExplosionSpawner.PlayImpactEffects">
            <summary>
            If true, per-surface effects like blood splatter are created.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ExplosionSpawner.PenetrateBuildables">
            <summary>
            If true, explosion damage passes through Barricades and Structures.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ExplosionSpawner.LaunchSpeed">
            <summary>
            Speed to launch players away from blast position.
            </summary>
        </member>
        <member name="T:SDG.Unturned.FallDamageOverride">
            <summary>
            Overrides how fall damage is calculated when landing on this game object or its descendants.
            </summary>
        </member>
        <member name="T:SDG.Unturned.FallDamageOverride.EMode">
            <summary>
            Could be extended in the future to increase, decrease, or set fall damage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.FallDamageOverride.EMode.None">
            <summary>
            Potentially useful for an event to toggle the override.
            </summary>
        </member>
        <member name="F:SDG.Unturned.FallDamageOverride.EMode.PreventFallDamage">
            <summary>
            Character will not take any fall damage.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DamageZombieParameters">
            <summary>
            Payload for the DamageTool.damageZombie function.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamageZombieParameters.applyGlobalArmorMultiplier">
            <summary>
            Should game mode config damage multiplier be factored in?
            </summary>
        </member>
        <member name="P:SDG.Unturned.DamageZombieParameters.legacyArmor">
            <summary>
            Equivalent to the "armor" parameter of the legacy damage function.
            </summary>
        </member>
        <member name="P:SDG.Unturned.DamageZombieParameters.AlertPosition">
            <summary>
            If not null and damage is applied, <see cref="M:SDG.Unturned.Zombie.alert(SDG.Unturned.Player)"/> is called with this position (startle: true).
            </summary>
        </member>
        <member name="P:SDG.Unturned.ObjectNPCAsset.playerKnowsNameFlagId">
            <summary>
            If non-zero, NPC name is shown as ??? until bool flag is true.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SafezoneNode.radius">
            <summary>
            This value is confusing because in the level editor it is the normalized radius, but in-game it is the square radius.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableTool.Resolve(SDG.Unturned.SpawnAsset,SDG.Unturned.EAssetType,System.Func{System.String})">
            <summary>
            Returning an Asset rather than the older IDs allows GUIDs to be used.
            legacyTargetAssetType is required for compatibility with spawn tables using legacy 16-bit IDs. If set to
            None and the spawn asset uses legacy IDs a warning is logged explaining GUIDs are necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDG.Unturned.SpawnTableTool.Resolve(SDG.Unturned.SpawnAsset,System.Func{System.String})">
            <summary>
            Doesn't support spawn assets with legacy 16-bit IDs.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableTool.ResolveLegacyId(SDG.Unturned.SpawnAsset,SDG.Unturned.EAssetType,System.Func{System.String})">
            <summary>
            For backwards compatibility with features that still need a legacy ID rather than asset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableTool.ResolveLegacyId(System.Guid,SDG.Unturned.EAssetType,System.Func{System.String})">
            <summary>
            For backwards compatibility with features that still need a legacy ID rather than asset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SpawnTableTool.ResolveLegacyId(System.UInt16,SDG.Unturned.EAssetType,System.Func{System.String})">
            <summary>
            For backwards compatibility with features that still need a legacy ID rather than asset.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DedicatedWorkshopUpdateMonitor">
            <summary>
            If using a map or mods from the workshop, this class monitors them for changes so the server can be restarted.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitor.submitQueryRequest(Steamworks.PublishedFileId_t[])">
            <summary>
            Request status of workshop items.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitor.handleFinalTick">
            <summary>
            Called the next tick after update(s) detected.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitor.handleUpdateDetected(Steamworks.SteamUGCDetails_t)">
            <summary>
            Called when a queried item's update timestamp is newer than our initially loaded version.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitor.handleQueryResponse(Steamworks.SteamUGCQueryCompleted_t)">
            <summary>
            Called when results from a call to submitQueryRequest are available.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitor.handleTimerTriggered">
            <summary>
            Called once timer reaches interval.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedWorkshopUpdateMonitor.shouldDoFinalTick">
            <summary>
            Were update(s) detected that should be handled on next tick?
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedWorkshopUpdateMonitor.isFinishedTicking">
            <summary>
            Are we done monitoring?
            Default finished once an update is detected.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedWorkshopUpdateMonitor.queryInterval">
            <summary>
            Interval between query submissions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedWorkshopUpdateMonitor.queryTimer">
            <summary>
            Accumulated time before submitting query after passing interval.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedWorkshopUpdateMonitor.onQueryCompleted(Steamworks.SteamUGCQueryCompleted_t,System.Boolean)">
            <summary>
            Callback from Steam when results from a call to submitQueryRequest are available.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Crosshair.interpolatedSpread">
            <summary>
            Slightly interpolated copy of actual spread angle to smooth out sharp changes like crouch/prone.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Crosshair.isInterpolatedSpreadValid">
            <summary>
            Allows interpolatedSpread to snap to target value when crosshair becomes visible.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ReadWrite.populateJSON(System.String,System.Object,System.Boolean)">
            <summary>
            Deserialize JSON onto an existing object instance.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReadWrite.disableSteamCloudRead">
            <summary>
            Potentially useful for players with corrupted cloud storage.
            https://github.com/SmartlyDressedGames/Unturned-3.x-Community/issues/2756
            </summary>
        </member>
        <member name="M:SDG.Unturned.ReadWrite.readString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Introduced much later (2020) than most of the other methods in this class (2014) in order to properly handle
            BOM/preamble of text files. Matches somewhat undesirable legacy behavior like creating directories.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ReadWrite.MoveIfExists(System.String,System.String)">
            <summary>
            NOTE: From and to are both relative to PATH.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ReadWrite.readTextureFromFile(System.String,System.Boolean,SDG.Unturned.EReadTextureFromFileMode)">
            <summary>
            Read GUI texture from a .jpg or .png file.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ReadWrite.readTextureFromFile(System.String,SDG.Unturned.EReadTextureFromFileMode)">
            <summary>
            Read GUI texture from a .jpg or .png file.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WindowsConsoleInputOutput">
            <summary>
            Windows-specific extensions of console input.
            Uses the Win32 API to force a console to be created and destroyed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CullingVolumeManager.ImmediatelySyncAllVolumes">
            <summary>
            Called by navmesh baking to complete pending object changes that may affect which nav objects are enabled.
            </summary>
        </member>
        <member name="P:SDG.Unturned.CullingVolumeManager.DefaultVisibility">
            <summary>
            Hide culling volume by default because new mappers might wonder what these purple boxes
            are and why their number goes away after moving objects.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CullingVolumeManager.UpdateRelevantCullingVolumes">
            <summary>
            Check a fixed number of volumes for visibility updates per frame.
            </summary>
        </member>
        <member name="M:SDG.Unturned.CullingVolumeManager.UpdateObjectsVisibility">
            <summary>
            Any volumes in the process of enabling/disabling get updated once per frame.
            </summary>
        </member>
        <member name="F:SDG.Unturned.CullingVolumeManager.wasViewTeleported">
            <summary>
            True for the next update after the player is teleported.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemCurrencyAsset">
            <summary>
            Associates items of the same currency, e.g. dollars or bullets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemCurrencyAsset.Entry.isVisibleInVendorMenu">
            <summary>
            Should this item/value be shown in the list of vendor currency items?
            Useful to hide modded item stacks e.g. a stack of 100x $20 bills.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCurrencyAsset.valueFormat">
            <summary>
            String to format value {0} into.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCurrencyAsset.defaultConditionFormat">
            <summary>
            String to format value {0} of total {1} into if not otherwise specified in NPC condition.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemCurrencyAsset.getInventoryValue(SDG.Unturned.Player)">
            <summary>
            Sum up value of each currency item in player's inventory.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemCurrencyAsset.canAfford(SDG.Unturned.Player,System.UInt32)">
            <summary>
            Does player have access to items covering certain value?
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemCurrencyAsset.grantValue(SDG.Unturned.Player,System.UInt32)">
            <summary>
            Add items to player's inventory to reward value.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemCurrencyAsset.spendValue(SDG.Unturned.Player,System.UInt32)">
            <summary>
            Remove items from player's inventory to pay required value.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemCurrencyComparer">
            <summary>
            Sort currency entries by value.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamPacker.luggageBlock">
            <summary>
            Temporary replacement for static block member because plugins might depend on it.
            </summary>
        </member>
        <member name="T:SDG.Unturned.FavoriteSearchFilter`1">
            <summary>
            Parses fv:X from input string and loads X.txt from game folder.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LODGroupManager.SynchronizeLODBias">
            <summary>
            Called after lod bias may have changed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.InteractableObjectBinaryStateEventHook">
             <summary>
             Can be added to any GameObject with an interactable binary state in its parents.
            
             If players should not be allowed to interact with the object in the ordinary manner,
             add the Interactability_Remote flag to its asset to indicate only mod hooks should control it.
             </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryStateEventHook.EListenServerHostMode.RequestAsClient">
            <summary>
            When a state change is requested in singleplayer it should be treated as if running as a client on a server.
            This is the default to match behavior from before this option was added.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryStateEventHook.EListenServerHostMode.OverrideState">
            <summary>
            When a state change is requested in singleplayer it should be treated as if running as a dedicated server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryStateEventHook.OnStateEnabled">
            <summary>
            Invoked when interactable object enters the Used / On / Enabled state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryStateEventHook.OnStateDisabled">
            <summary>
            Invoked when interactable object enters the Unused / Off / Disabled state.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryStateEventHook.InvokeWhenInitialized">
            <summary>
            Should the OnStateEnabled and OnStateDisabled events be invoked when the object is loaded, becomes relevant
            in multiplayer, and is reset? True is useful when visuals need to be kept in sync with the state, whereas
            false is useful for transient interactions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableObjectBinaryStateEventHook.ListenServerHostMode">
            <summary>
            Controls how state change requests are performed when running as both client and server ("listen server").
            On the dedicated server, requesting a state change overrides the current state without processing NPC
            conditions, whereas when a client requests a state change NPC conditions apply. This option fixes the
            inconsistency in singleplayer of whether to treat as server or client. (public issue #4298)
            At the time of writing (2024-01-29) listen server only applies to singleplayer.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableObjectBinaryStateEventHook.GotoEnabledState">
            <summary>
            Set state to Enabled if currently Disabled.
            
            On dedicated server this directly changes the state,
            but as client this will apply the usual conditions and rewards.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableObjectBinaryStateEventHook.GotoDisabledState">
             <summary>
             Set state to Disabled if currently Enabled.
            
             On dedicated server this directly changes the state,
             but as client this will apply the usual conditions and rewards.
             </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableObjectBinaryStateEventHook.ToggleState">
             <summary>
             Toggle between the Enabled and Disabled states.
            
             On dedicated server this directly changes the state,
             but as client this will apply the usual conditions and rewards. 
             </summary>
        </member>
        <member name="F:SDG.Unturned.Types.QUATERNION_TYPE">
            <summary>
            Not originally supported by networking. Added temporarily during netpak rewrite because the quaternion
            compression is so much better for vehicles than three byte Euler rotation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EditorVolumesUI.SyncSettings">
            <summary>
            Other menus can modify DevkitSelectionToolOptions so we need to sync our menu when opened.
            </summary>
        </member>
        <member name="T:SDG.Unturned.Rk4SpringQ">
            <summary>
            Thanks to Glenn Fiedler for this RK4 implementation article:
            https://gafferongames.com/post/integration_basics/
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4SpringQ.stiffness">
            <summary>
            Higher values return to the target position faster.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rk4SpringQ.damping">
            <summary>
            Higher values reduce bounciness and settle at the target position faster.
            e.g. a value of zero will bounce back and forth for a long time (indefinitely?)
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelObjects.preserveMissingAssets">
            <summary>
            Should objects that failed to load due to missing assets be saved?
            If true, a placeholder transform is created and used to save.
            If false, objects without assets are zeroed during save. (old default)  
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelObjects.hash">
            <summary>
            Hash of Objects.dat
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObjects.ImmediatelySyncRegionalVisibility">
            <summary>
            Called by navmesh baking to complete pending object changes that may affect which nav objects are enabled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObjects.tickRegionalVisibility">
            <summary>
            Stagger regional visibility across multiple frames.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LegacyObjectRedirectorMap">
            <summary>
            Caches uint16 ID to ID redirects.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ResourceManager.askClearRegionResources(System.Byte,System.Byte)">
            <summary>
            Revive all trees in a specific region.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ResourceManager.askClearAllResources">
            <summary>
            Revive trees worldwide. Used between arena rounds.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerLook.scopeMaterial">
            <summary>
            Material instantiated when dual-render scopes are enabled.
            Overrides the material of the gun sight attachment.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerLook.pitch">
            <summary>
            Unintuitively (to say the least), a pitch of 0 is up, 90 is forward, and 180 is down.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.freecamVerticalFieldOfView">
            <summary>
            Reset to actual fov when first used.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.IsControllingFreecam">
            <summary>
            If true, freecam controls take input priority.
            Previously named isOrbiting.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerLook.areSpecStatsVisible">
            <summary>
            Should player stats be visible in spectator mode?
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.smoothedExplosionLocalRotation">
            <summary>
            Smoothing adds some initial blend-in which felt nicer for explosion rumble.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.thirdPersonEyeHeight">
            <summary>
            Slightly clamped third-person version of "eyes" value to prevent sweep from hitting floor.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.getEyesPosition">
            <summary>
            Get point-of-view in world-space.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.GetEyesPositionWithoutLeaning">
            <summary>
            Get point of view in worldspace without the left/right leaning modifier.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.RestoreSavedLightingVision">
            <summary>
            This is only used after capturing dual-render scope, not when exiting scope overlay.
            Otherwise the lighting vision may have changed between entering and exiting the scope.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.clampPitch">
            <summary>
            Clamp _pitch within the [0, 180] range.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.clampYaw">
            <summary>
            Clamp yaw while seated, and keep within the [-360, 360] range.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.allowFreecamWithoutAdmin">
            <summary>
            Can spectating be used without admin powers?
            Plugins can enable spectator mode.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.allowWorkzoneWithoutAdmin">
            <summary>
            Can workzone be used without admin powers?
            Plugins can enable workzone permissions.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.allowSpecStatsWithoutAdmin">
            <summary>
            Can spectator overlays be used without admin powers?
            Plugins can enable specstats permissions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.ReceiveFreecamAllowed(System.Boolean)">
            <summary>
            Called from the server to allow spectating without admin powers.
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.sendFreecamAllowed(System.Boolean)">
            <summary>
            Allow use of spectator mode without admin powers.
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.ReceiveWorkzoneAllowed(System.Boolean)">
            <summary>
            Called from the server to allow workzone without admin powers.
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.sendWorkzoneAllowed(System.Boolean)">
            <summary>
            Allow use of workzone mode without admin powers.
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.ReceiveSpecStatsAllowed(System.Boolean)">
            <summary>
            Called from the server to allow spectator overlays without admin powers.
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.sendSpecStatsAllowed(System.Boolean)">
            <summary>
            Allow use of spectator overlay mode without admin powers.
            Only used by plugins.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLook.sweepHits">
            <summary>
            Multiple hits are necessary because the first returned hit is not always the closest.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLook.sphereCastCamera(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>
            Sweep a sphere to find collisions blocking the third-person camera.
            </summary>
            <returns>Valid world-space camera position.</returns>
        </member>
        <member name="T:SDG.Unturned.AssetOrigin">
            <summary>
            Replacement for enum origin.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetOrigin.name">
            <summary>
            Hardcoded built-in name, or name of workshop file if known.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetOrigin.workshopFileId">
            <summary>
            Steam file ID if loaded from the workshop, zero otherwise.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetOrigin.shouldAssetsOverrideExistingIds">
            <summary>
            If true, when added to asset mapping the new assets will override existing ones.
            This ensures workshop files installed by servers take priority and disables warnings about overlapping IDs.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TextChatEventHook">
            <summary>
            Can be added to any GameObject to receive text chat events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.EModeFilter.Any">
            <summary>
            Message can be in any chat channel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.EModeFilter.Global">
            <summary>
            Message must be in Global channel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.EModeFilter.Local">
            <summary>
            Message must be in Local channel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.ModeFilter">
            <summary>
            Filter to apply to message type.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.SqrDetectionRadius">
            <summary>
            Sphere radius (squared) around this transform to detect player messages.
            e.g. 16 is 4 meters
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.Phrase">
            <summary>
            Substring to search for in message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.EPhraseFilter.StartsWith">
            <summary>
            Message must start with phrase text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.EPhraseFilter.Contains">
            <summary>
            Message must contain phrase text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.EPhraseFilter.EndsWith">
            <summary>
            Message must end with phrase text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.PhraseFilter">
            <summary>
            Filter to apply to message text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TextChatEventHook.OnTriggered">
            <summary>
            Invoked when a player message passes the filters.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SleekScopeOverlay.CalcAngle(System.Single,System.Single,System.Single)">
            <summary>
            Calculate angle in radians the player would need to offset their aim upward
            to hit a target a certain distance away.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SleekScopeOverlay.DistanceMarker.SetIsVisible(System.Boolean)">
            <summary>
            Separate from isEnabled to hide markers when they are outside the scope.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SleekScopeOverlay.DistanceMarker.SyncIsVisible">
            <summary>
            Used to sync hasLabel visibility.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENPCWeatherStatus.Active">
            <summary>
            True while fading in or fully transitioned in. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENPCWeatherStatus.Transitioning_In">
            <summary>
            True while fading in, but not at full intensity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENPCWeatherStatus.Fully_Transitioned_In">
            <summary>
            True while finished fading in.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENPCWeatherStatus.Transitioning_Out">
            <summary>
            True while fading out, but not at zero intensity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENPCWeatherStatus.Fully_Transitioned_Out">
            <summary>
            True while finished fading out.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENPCWeatherStatus.Transitioning">
            <summary>
            True while fading in or out.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ConsoleInputOutput">
            <summary>
            Read commands from standard input, and write logs to standard output.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ConsoleInputOutput.inputFromConsole">
            <summary>
            Each Update we consume a key press from the console buffer if available.
            Unfortunately ReadLine is not an option without blocking output, so we maintain our own pending input.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekServerBookmark">
            <summary>
            Entry in the MenuPlayServerBookmarksUI list.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.String">
            <summary>
            Text between tags.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.BoldOpen">
            <summary>
            [b]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.BoldClose">
            <summary>
            [/b]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.ItalicOpen">
            <summary>
            [i]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.ItalicClose">
            <summary>
            [/i]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.BulletListOpen">
            <summary>
            [list]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.BulletListClose">
            <summary>
            [/list]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.OrderedListOpen">
            <summary>
            [olist]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.OrderedListClose">
            <summary>
            [/olist]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.ListItem">
            <summary>
            [*] value
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.H1Open">
            <summary>
            [h1]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.H1Close">
            <summary>
            [/h1]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.H2Open">
            <summary>
            [h2]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.H2Close">
            <summary>
            [/h2]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.H3Open">
            <summary>
            [h3]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.H3Close">
            <summary>
            [/h3]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.UrlOpen">
            <summary>
            [url=value]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.UrlClose">
            <summary>
            [/url]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.ImgOpen">
            <summary>
            [img]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.ImgClose">
            <summary>
            [/img]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.PreviewYouTubeOpen">
            <summary>
            [previewyoutube=value]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.PreviewYouTubeClose">
            <summary>
            [/previewyoutube]
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBbCodeTokenType.LineBreak">
            <summary>
            '\n' or "\r\n"
            </summary>
        </member>
        <member name="T:SDG.Unturned.BbCodeTokenizer">
            <summary>
            Breaks down Steam's version of BBcode into tokens like, "[b]", "[i]", "actual text", etc.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerLifeUI.repeatChatIndex">
            <summary>
            Reset to -1 when not chatting. If player presses up/down we get index 0 (most recent).
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLifeUI.repeatChat(System.Int32)">
            <summary>
            Fill chat field with previous sent message.
            Useful for repeating commands with minor changes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerLifeUI.updateHotbar">
            <summary>
            Use the latest hotbar items in the UI.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDefIconInfo.economyUploadPath">
            <summary>
            Icon uploaded to CDN.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDefIconInfo.gameResourcePath">
            <summary>
            Icon used in game menus.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDefIconInfo.assetImporterPath">
            <summary>
            Project-relative asset importer version of <see cref="F:SDG.Unturned.ItemDefIconInfo.gameResourcePath"/>
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDefIconInfo.extraPath">
            <summary>
            Icon saved for community members in Extras folder.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDefIconInfo.hasSmall">
            <summary>
            Has the small icon been captured yet?
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemDefIconInfo.hasLarge">
            <summary>
            Has the large icon been captured yet?
            </summary>
        </member>
        <member name="T:SDG.Unturned.IconUtils">
            <summary>
            Moved icon code from MenuTitleUI to here.
            </summary>
        </member>
        <member name="M:SDG.Unturned.IconUtils.CreateExtrasDirectory">
            <summary>
            These directories are excluded from source control and Steam depots so they might not exist yet.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NameTool.isValid(System.String)">
            <summary>
            If updating this method please remember to update the support article:
            https://support.smartlydressedgames.com/hc/en-us/articles/13452208765716
            </summary>
        </member>
        <member name="M:SDG.Unturned.NameTool.containsRichText(System.String)">
            <summary>
            Does name contain rich text tags?
            Some players were abusing rich text enabled servers by inserting admin colors into their steam name.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EZombieStunOverride">
            <summary>
            Used when damaging zombies to override in which situations they are stunned.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieStunOverride.None">
            <summary>
            Default stun behaviour determined by damage dealt.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieStunOverride.Never">
            <summary>
            Don't stun even if damage is over threshold.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EZombieStunOverride.Always">
            <summary>
            Stun regardless of damage.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Zombie.hatID">
            <summary>
            Overrides hat item from zombie table with a specific item ID.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Zombie.gearID">
            <summary>
            Overrides gear item from zombie table with a specific item ID.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.targetBarricade">
            <summary>
            If zombie is stuck this was a nearby barricade potentially blocking our path.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.targetStructure">
            <summary>
            If zombie is stuck this was a nearby structure potentially blocking our path.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.targetObstructionVehicle">
            <summary>
            If zombie is stuck this was a nearby vehicle potentially blocking our path.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.targetPassengerVehicle">
            <summary>
            If target player is passenger in a vehicle this is their vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.targetObject">
            <summary>
            If zombie is stuck this was a nearby object potentially blocking our path.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.stuckSearchTimer">
            <summary>
            Incremented while stuck. Prevents doing overlap test too frequently.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.setTicking(System.Boolean)">
            <summary>
            Add or remove from ticking list if needed.
            Separated from updateTicking in order to move once after first spawn.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Zombie.isMega">
            <summary>
            Boss zombies are considered mega as well.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.flashbangDelay">
            <summary>
            Yeah it seems kinda ugly to pollute all zombies with this code... zombie rewrite eventually please.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.getStunDamageThreshold">
            <summary>
            If damage exceeds this value, stun the zombie.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.killWithFireExplosion">
            <summary>
            Used to kill night-only zombies at dawn.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.updateDifficulty">
            <summary>
            Cache difficulty asset (if any) for this zombie's current type and bound.
            Allows difficulty assets to override certain zombie behaviors.
            Called after bound/type is initialized, and after type changes during respawn.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.findTargetWhileStuck">
            <summary>
            Called when zombie does not have a target, but has been stuck for a period.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Zombie.undergroundTestTimer">
            <summary>
            Reduces frequency of UndergroundAllowlist checks because it can be expensive with lots of entities and volumes. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.SetCountedAsAliveInZombieRegion(System.Boolean)">
            <summary>
            Helper to prevent mistakes or plugins from breaking alive zombie count.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.SetCountedAsAliveBossInZombieRegion(System.Boolean)">
            <summary>
            Helper to prevent mistakes or plugins from breaking alive boss zombie count.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Zombie.SetCapsuleRadiusAndHeight(System.Single,System.Single)">
            <summary>
            2023-01-31: set height to 2 rather than adjusting per-zombie-type. Tall zombies (megas) couldn't
            get through doorways, and short zombies (crawlers) could get underneath objects they shouldn't
            like gas tanks. Zombies were also stacking on top of eachother a bit too much.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Item.durability">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Item.metadata">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Item.#ctor(SDG.Unturned.ItemAsset,SDG.Unturned.EItemOrigin)">
            <summary>
            Ideally in a future rewrite asset overload will become the default rather than the overload taking legacy ID.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Item.ShouldItemTypeSpawnAtFullQuality(SDG.Unturned.EItemType)">
            <summary>
            If true, item has 100% quality. If false, item has a random quality.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ResourceAsset.DebrisVerticalOffset">
            <summary>
            Distance along tree's local up axis to offset debris spawn position. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ResourceAsset.MaxRandomAngleDeviation">
            <summary>
            Before <see cref="!:FoliageResourceInfoAsset"/> had randomization properties (which trees don't currently use
            as of 2024-12-11 because rotation/scale aren't saved) each tree has some random rotation and scale variation
            based on its position. This property controls the rotation away from upright.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ResourceAsset.forageRewardExperience">
            <summary>
            Amount of experience to reward foraging player.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ResourceAsset.interactabilityText">
            <summary>
            Forageable resource message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ResourceAsset.bladeID">
            <summary>
            Weapon must have matching blade ID to damage tree.
            Both weapons and trees default to zero so they can be damaged by default.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ResourceAsset.ShouldIgnoreCollisionBetweenStumpAndDebris">
            <summary>
            If true, prevent collisions between falling tree and the stump. (i.e., debris can fall through stump)
            Defaults to true.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ResourceAsset.holidayRestriction">
            <summary>
            Only activated during this holiday.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ResourceAsset.christmasRedirect">
            <summary>
            Tree to use during the Christmas event instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ResourceAsset.halloweenRedirect">
            <summary>
            Tree to use during the Halloween event instead.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ResourceAsset.getHolidayRedirect">
            <summary>
            Get asset ref to replace this one for holiday, or null if it should not be redirected.
            </summary>
        </member>
        <member name="T:SDG.Unturned.CommandGameMode">
            <summary>
            Essentially deprecated for now.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamPacket.CLIENT_PENDING">
            <summary>
            Server response to a non-rejected CONNECT request. Notifies client they are in the queue.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekItems.pendingItems">
            <summary>
            Rather than creating all SleekItems as once we create a few per frame.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SleekItems.resetHotkeyDisplay">
            <summary>
            Reset all items hotkey label.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Rocket.explosion">
            <summary>
            Kept because lots of modders have been using this script in Unity,
            so removing legacy effect id would break their content.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EEconFilterMode.STAT_TRACKER">
            <summary>
            Find an item to apply stat tracker tool to.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EEconFilterMode.STAT_TRACKER_REMOVAL">
            <summary>
            Find an item with a stat tracker to remove.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EEconFilterMode.RAGDOLL_EFFECT_REMOVAL">
            <summary>
            Find an item with a ragdoll effect to remove.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EEconFilterMode.RAGDOLL_EFFECT">
            <summary>
            Find an item to apply ragdoll effect tool to.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.optionsButton">
            <summary>
            Toggle button to open/close advanced filters panel.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.searchDescriptionsToggle">
            <summary>
            On/off checkbox for including description text in filter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.sortModeButton">
            <summary>
            Switch between sort modes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.reverseSortOrderToggle">
            <summary>
            On/off checkbox to reverse sort results.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.filterEquippedToggle">
            <summary>
            On/off checkbox to show only equipped items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.optionsPanel">
            <summary>
            Container for advanced options.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.searchDescriptions">
            <summary>
            Whether to include description text in filter.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.sortMode">
            <summary>
            How to sort filtered items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.reverseSortOrder">
            <summary>
            Should sorted list be reversed?
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuSurvivorsClothingUI.filterEquipped">
            <summary>
            Should only equipped items be shown?
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuSurvivorsClothingUI.applySearchTextFilter">
            <summary>
            Remove items that do not match search text.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuSurvivorsClothingUI.applyEquippedFilter">
            <summary>
            Removed items that are not equipped.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemStore">
            <summary>
            All main menu MTX shop code should be routed through here so that it could theoretically be ported to other
            platforms or stores. Obviously this is all very Steam specific at the moment, but at least the UI does not
            depend on Steam API here as much as older parts of the game.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStore.Listing.isNew">
            <summary>
            Was this item marked as new in the config?
            If new, and not marked as seen, then a "NEW" label is shown on the listing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStore.FindListing(System.Int32,SDG.Unturned.ItemStore.Listing@)">
            <summary>
            Do we have pricing details for a given item?
            Price results may not have been returned yet, or item might not be public.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemStore.EPurchaseResult">
            <summary>
            Messy, but we only show a menu alert if there was a problem.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStore.GetListings">
            <summary>
            Already filtered to only return locally known items which pass country restrictions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStore.GetNewListingIndices">
            <summary>
            Empty if outside new time window.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStore.newListingIndices">
            <summary>
            Subset of listings.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStore.featuredListingIndices">
            <summary>
            Subset of listings.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStore.discountedListingIndices">
            <summary>
            Subset of listings.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStore.exludedListingIndices">
            <summary>
            Subset of listings.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStore.unownedDiscountedBundleListingIndices">
            <summary>
            Subset of listings.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClientAssetIntegrity.Clear">
            <summary>
            Reset prior to joining a new server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClientAssetIntegrity.ServerAddKnownMissingAsset(System.Guid,System.String)">
            <summary>
            By default if the client submits an asset guid which the server cannot find an asset for the client will
            be kicked. This is necessary to prevent cheaters from spamming huge numbers of random guids. In certain cases
            like a terrain material missing the server knows the client will be missing it as well, and can register
            it here to prevent the client from being kicked unnecessarily.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClientAssetIntegrity.QueueRequest(System.Guid,SDG.Unturned.Asset,System.String)">
            <summary>
            Send asset hash (or lack thereof) to server.
            
            IMPORTANT: should only be called in cases where the server has verified the asset exists by loading it,
            otherwise only if the asset exists on the client. This is because the server kicks if the asset does not
            exist in order to prevent hacked clients from spamming requests. Context parameter is intended to help
            narrow down cases where this rule is being broken.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClientAssetIntegrity.QueueRequest(SDG.Unturned.Asset)">
            <summary>
            Send asset hash to server.
            Used in cases where server does not verify asset exists. (see other method's comment)
            </summary>
        </member>
        <member name="M:SDG.Unturned.ClientAssetIntegrity.SendRequests">
            <summary>
            Called each Update on the client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInteract.ReceiveSalvageTimeOverride(System.Single)">
            <summary>
            Called from the server to override salvage duration.
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInteract.sendSalvageTimeOverride(System.Single)">
            <summary>
            Override salvage duration without admin.
            Only used by plugins.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInteract.highlightedTransform">
            <summary>
            Outlined object is not necessarily the focused object, so we track it to disable later if focus is destroyed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInteract.FindTargetTransform(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Search up hierarchy for most specific Target transform.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInteract.didHaveFocus">
            <summary>
            Was focus non-null during last update? Used to detect when focus was destroyed.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EDamageOrigin">
            <summary>
            Currently used by plugins to identify what damaged a buildable.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EDamageOrigin.ExplosionSpawnerComponent">
            <summary>
            Explosion instigated by <see cref="T:SDG.Unturned.ExplosionSpawner"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.INPCReward.grantDelaySeconds">
            <summary>
            If >0 the game will start a coroutine to grant the reward after waiting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.INPCReward.grantDelayApplyWhenInterrupted">
            <summary>
            If true and player has this reward pending when they die or disconnect it will be granted.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierUIToolkitTest">
            <summary>
            Used in a test scene to quickly test UI Toolkit implementation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListFilters.presetId">
            <summary>
            Assigned when a named preset is created.
            0 is the default and should be replaced by a preset when loaded.
            -1 indicates the preset was modified.
            -2 and below are the default presets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListFilters.attendance">
            <summary>
            Nelson 2024-09-20: Changing default to any (from has players) because the default server list sort will now
            push empty servers to the bottom.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListFilters.notFull">
            <summary>
            If true, only servers with available player slots are shown.
            Nelson 2024-09-20: Changing default to false because the default server list sort will now push them down
            from the top a little bit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListFilters.maxPing">
            <summary>
            If >0, servers with ping higher than this will not be shown.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ServerListFilters.ToggleMap(SDG.Unturned.LevelInfo)">
            <returns>True if level was added to the list of maps.</returns>
        </member>
        <member name="F:SDG.Unturned.FilterSettings.SAVEDATA_VERSION_INITIAL">
            <summary>
            Version before named version constants were introduced. (2023-11-13)
            </summary>
        </member>
        <member name="F:SDG.Unturned.FilterSettings.ServerBrowserColumns.fullnessPercentage">
            <summary>
            % Full
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerQuests.serverDefaultNextDialogueAsset">
            <summary>
            The dialogue to go to when a message has no available responses.
            If this is not specified the previous dialogue is used as a default.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerQuests.OnLocalPlayerQuestsChanged">
            <summary>
            For level objects with QuestCondition called when quests are added or removed.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerQuests.onAnyFlagChanged">
            <summary>
            Event specifically for plugins to listen to global quest progress.
            </summary>
        </member>
        <member name="E:SDG.Unturned.PlayerQuests.onGroupChanged">
            <summary>
            Event for plugins when group or rank changes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerQuests._markerTextOverride">
            <summary>
            Overrides label text next to marker on map.
            Used by plugins. Not saved to disk.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerQuests.inMainGroup">
            <summary>
            Kept serverside. Used to check whether the player is currently in their Steam group or just a normal in-game group.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerQuests.canChangeGroupMembership">
            <summary>
            Check before allowing changes to this player's <see cref="P:SDG.Unturned.PlayerQuests.groupID"/>
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerQuests.hasPermissionToChangeName">
            <summary>
            Can rename the group.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerQuests.hasPermissionToChangeRank">
            <summary>
            Can promote and demote members.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerQuests.npcSpawnId">
            <summary>
            If set, default spawn logic will check for a location node or spawnpoint node matching name.
            Saved and loaded between sessions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.IsCutsceneModeActive">
            <summary>
            If true, hide viewmodel and prevent using equipped item. For example, to prevent shooting gun on top of a
            first-person scene. This could be expanded in the future with other flags and options.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.replicateSetMarker(System.Boolean,UnityEngine.Vector3,System.String)">
            <summary>
            Called serverside to set marker on clients.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.sendSetMarker(System.Boolean,UnityEngine.Vector3)">
            <summary>
            Ask server to set marker.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.changeRank(SDG.Unturned.EPlayerGroupRank)">
            <summary>
            Call serverside to replicate new rank to clients
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.ServerAssignToMainGroup">
            <summary>
            Set player's group to their Steam group (if any) without testing restrictions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.leaveGroup(System.Boolean)">
            <param name="force">Ignores group changing rules when true.</param>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.sendAddGroupInvite(Steamworks.CSteamID)">
            <summary>
            Serverside send packet telling player about this invite
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.CompleteQuest(SDG.Unturned.QuestAsset,System.Boolean)">
            <summary>
            Called on server to finalize and remove quest.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.ClientAbandonQuest(SDG.Unturned.QuestAsset)">
            <summary>
            Called by quest details UI to request server to abandon quest.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.ClientChooseNextDialogue(System.Guid,System.Byte)">
            <summary>
            Called when there are no responses to choose, but server has indicated a next dialogue is available.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerQuests.ApproveTalkWithNpcRequest(SDG.Unturned.IDialogueTarget,SDG.Unturned.DialogueAsset)">
            <summary>
            Called in singleplayer and on the server after client requests NPC dialogue.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerQuests.hasCreatedDelayedRewards">
            <summary>
            Prevent re-creating it during destroy (e.g. plugin granting rewards) from leaking gameobject.
            </summary>
        </member>
        <member name="P:SDG.Unturned.GlazierResources.PixelTexture">
            <summary>
            White 1x1 texture for solid colored images.
            uGUI empty image draws like this, but we need the texture for IMGUI backwards compatibility.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SleekServer.isCurrentlyFavorited">
            <summary>
            Is the server this widget represents currently favorited?
            Can be false on the favorites list.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DamagePlayerParameters">
            <summary>
            Payload for the DamageTool.damagePlayer function.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamagePlayerParameters.respectArmor">
            <summary>
            Should armor worn on matching limb be factored in?
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamagePlayerParameters.applyGlobalArmorMultiplier">
            <summary>
            Should game mode config damage multiplier be factored in?
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamagePlayerParameters.trackKill">
            <summary>
            If player dies should it count towards quests?
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamagePlayerParameters.ragdollEffect">
            <summary>
            Effect to apply to ragdoll if dead.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Data.ReadColor32RGB(System.String,UnityEngine.Color32)">
            <summary>
            Read 8-bit per channel color excluding alpha.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Data.ReadGuidOrLegacyId(System.String,System.Guid@)">
            <summary>
            Intended as a drop-in replacement for existing assets with property uint16s.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.checkSafeIncludingClipVolumes(UnityEngine.Vector3)">
            <summary>
            Is a point safely within the level bounds?
            Also checks player clip volumes if legacy borders are disabled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.isPointWithinValidHeight(System.Single)">
            <summary>
            Is given Y (vertical) coordinate within level's height range?
            Maps using landscapes have a larger range than older maps.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.broadcastLevelsRefreshed">
            <summary>
            Notify menus that levels list has changed.
            Used when creating/deleting levels, as well as following workshop changes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.getAsset">
            <summary>
            Get level's cached asset, if any.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Level.shouldUseHolidayRedirects">
            <summary>
            Should loading code proceed with redirects?
            Disabled by level and when in the editor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Level.placeholderAudioListener">
            <summary>
            Placeholder created between unloading the main menu and loading into game or editor.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Level.musicAudioSource">
            <summary>
            Loading screen music.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Level.musicOutroClip">
            <summary>
            Clip to play to fade out loop.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Level.shouldLogLevelHash">
            <summary>
            Useful to narrow down why a player is getting kicked for modified level files when joining a server.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Level.version">
            <summary>
            Display version string of the currently loaded level.
            </summary>
        </member>
        <member name="P:SDG.Unturned.Level.packedVersion">
            <summary>
            Version string of the currently loaded level packed into an integer.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.ReadLevelInfo(System.String,System.UInt64)">
            <summary>
            Load level details from Level.dat in directory path.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.findLevelForServerFilter(System.String)">
            <summary>
            Server list allows player to enter a map name when searching, so we try to find a local
            copy of the level for version number comparison. (Server map version might differ.)
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.FindLevelForServerFilterExact(System.String)">
            <summary>
            New map filter uses lowercase map name and doesn't need startswith.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Level.ScanKnownLevels">
            <summary>
            Search all map folders to add any previously unregistered maps.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerDashboardUI.OnDestroy">
            <summary>
            Temporary to unbind events because this class is static for now. (sigh)
            </summary>
        </member>
        <member name="T:SDG.Unturned.ENetInvocationDeferMode">
            <summary>
            Defines how instance methods handle invocation when the target instance does not exist yet, for example
            if the target instance is async loading or has time sliced instantiation.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENetInvocationDeferMode.Discard">
            <summary>
            Invocation should be ignored if the target instance does not exist.
            This is the only applicable defer mode for static methods and server methods.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ENetInvocationDeferMode.Queue">
            <summary>
            Invocation will be queued up if the target instance does not exist.
            Originally an "Overwrite" mode was considered for cases like SetHealth where only the newest value is
            displayed, but this was potentially error-prone if multiple queued methods depended on values from each other.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Commander.execute_UnityEvent(System.String,SDG.Unturned.ServerTextChatMessenger)">
            <summary>
            Allows Unity events to execute commands from the server.
            Messenger context is logged to help track down abusive assets.
            </summary>
        </member>
        <member name="T:SDG.Unturned.AssetsWorker">
            <summary>
            Responsible for loading asset definitions on a separate thread.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetsWorker.AssetDefinition.assetError">
            <summary>
            Parser error messages, if any.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetsWorker.AssetDefinition.origin">
            <summary>
            Warning: on worker thread this only acts as handle. Do not access.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AssetsWorker.IsWorking">
            <summary>
            Used on main thread to determine when all queued tasks have finished.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AssetsWorker.SearcherThreadMain(System.Object)">
            <summary>
            Loop searching directories recursively for asset bundle and asset definition files.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetsWorker.WorkerThreadState.origin">
            <summary>
            Warning: on worker thread this only acts as handle. Do not access.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LogFile.path">
            <summary>
            Absolute path to *.log file.
            </summary>
        </member>
        <member name="T:SDG.Unturned.Logs">
            <summary>
            Responsible for the per-process .log file in the Logs directory.
            Kept multiple log files in the past, but now consolidates all information
            into a single file named Client.log or Server_{Identifier}.log.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Logs.noDefaultLog">
            <summary>
            Should setup of the default *.log file be disabled?
            </summary>
        </member>
        <member name="P:SDG.Unturned.Logs.ShouldRedactLogs">
            <summary>
            If true, information like IP addresses and login tokens should be censored in vanilla logs.
            Nelson 2024-11-11: Special thanks to Jdance and asineth0 in public issue #4740!
            </summary>
        </member>
        <member name="P:SDG.Unturned.Logs.RedactionReplacement">
            <summary>
            Text to replace with if <see cref="F:SDG.Unturned.Logs.shouldRedactLogs"/> is enabled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Logs.RedactIPv4Addresses(System.String@)">
            <summary>
            *ATTEMPTS* to replace IPv4 address(es) with <see cref="P:SDG.Unturned.Logs.RedactionReplacement"/>.
            Should only be called if <see cref="P:SDG.Unturned.Logs.ShouldRedactLogs"/> is enabled.
            Case-by-case redaction should be preferred for performance reasons over using this function. This function
            is intended for third-party messages (e.g., BattlEye) that we don't have control over.
            </summary>
            <returns>True if message was modified.</returns>
        </member>
        <member name="M:SDG.Unturned.Logs.getLogFilePath">
            <summary>
            Get logging to path.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Logs.setLogFilePath(System.String)">
            <summary>
            Set path to log to.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Logs.closeLogFile">
            <summary>
            Close current log file.
            </summary>
        </member>
        <member name="E:SDG.Unturned.InteractableDoor.OnDoorChanged_Global">
            <summary>
            Invoked when door is opened/closed, but not when loaded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.NAME_PLAYER_INVALID">
            <summary>
            If modifying usage please update support article:
            https://support.smartlydressedgames.com/hc/en-us/articles/13452208765716
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.NAME_CHARACTER_INVALID">
            <summary>
            If modifying usage please update support article:
            https://support.smartlydressedgames.com/hc/en-us/articles/13452208765716
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.CLIENT_MODULE_DESYNC">
            <summary>
            Client has a critical module the server doesn't.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.SERVER_MODULE_DESYNC">
            <summary>
            Server has a critical module the client doesn't.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.WRONG_LEVEL_VERSION">
            <summary>
            Level config's version number does not match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.WRONG_HASH_ECON">
            <summary>
            EconInfo.json hash does not match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.WRONG_HASH_MASTER_BUNDLE">
            <summary>
            Master bundle hashes do not match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.LATE_PENDING_STEAM_AUTH">
            <summary>
            Server has not received an auth session response from Steam yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.LATE_PENDING_STEAM_ECON">
            <summary>
            Server has not received an economy response from Steam yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.LATE_PENDING_STEAM_GROUPS">
            <summary>
            Server has not received a groups response from Steam yet.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.NAME_PRIVATE_LONG">
            <summary>
            Player nickname exceeds limit.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.NAME_PRIVATE_INVALID">
            <summary>
            Player nickname contains invalid characters.
            
            If modifying usage please update support article:
            https://support.smartlydressedgames.com/hc/en-us/articles/13452208765716
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.NAME_PRIVATE_NUMBER">
            <summary>
            Player nickname should not be a number.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.WRONG_HASH_RESOURCES">
            <summary>
            Player resources folders don't match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.AUTH_NETWORK_IDENTITY_FAILURE">
            <summary>
            The network identity in the ticket does not match the server authenticating the ticket.
            This can happen if server's Steam ID has changed from what the client thinks it is.
            For example, joining a stale entry in the server list. (public issue #4101)
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.SKIN_COLOR_WITHIN_THRESHOLD_OF_TERRAIN_COLOR">
            <summary>
            Player's skin color is too similar to one of <see cref="F:SDG.Unturned.LevelAsset.terrainColorRules"/>.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.STEAM_ID_MISMATCH">
            <summary>
            Steam ID reported by net transport doesn't match client's reported Steam ID.
            This was exploited to fill the server queue with fake players.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESteamRejection.CONNECT_RATE_LIMITING">
            <summary>
            Received too many connection requests from player in a short window.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetId.IsNull">
            <summary>
            Zero is treated as unset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelVehicles.GetRandomAssetForSpawnpoint(SDG.Unturned.VehicleSpawnpoint)">
            <summary>
            Returned asset is not necessarily a vehicle asset yet: It can also be a VehicleRedirectorAsset which the
            vehicle spawner requires to properly set paint color.
            </summary>
        </member>
        <member name="F:SDG.Unturned.Acid.effectID">
            <summary>
            Kept because lots of modders have been using this script in Unity,
            so removing legacy effect id would break their content.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlaySettings.SAVEDATA_VERSION_INITIAL">
            <summary>
            Version before named version constants were introduced. (2023-11-08)
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlaySettings.SAVEDATA_VERSION_REMOVED_SERVER_NAME_FILTER">
            <summary>
            Moved into ServerListFilters.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SleekButtonState.UseContentTooltip">
            <summary>
            If true, button tooltip will be overridden with tooltip from states array.
            </summary>
        </member>
        <member name="P:SDG.Unturned.OxygenVolume.isBreathable">
            <summary>
            If true oxygen is restored while in this volume, otherwise if false oxygen is depleted.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelBatching">
            <summary>
            Merges textures used in the level into an atlas to assist runtime draw call batching.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.ignoreTransforms">
            <summary>
            Skip renderer children of these transforms, if any.
            For example we skip lights with material instances and rubble debris.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelBatching.CanAtlasStandardMaterialSimpleOpaque(UnityEngine.Material,UnityEngine.Renderer,System.Boolean)">
            <summary>
            Most objects in Unturned use the standard shader without transparency/emissive/detail/etc.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.loggedMeshes">
            <summary>
            Meshes we logged an explanation for as to why they can't be atlased.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.loggedTextures">
            <summary>
            Textures we logged an explanation for as to why they can't be atlased.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.loggedMaterials">
            <summary>
            Materials we logged an explanation for as to why they can't be atlased.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.objectsToDestroy">
            <summary>
            Objects instantiated for the lifetime of the level that should be destroyed when exiting the level.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.wantsToPreviewTextureAtlas">
            <summary>
            If true, don't assign texture atlas to material so batched materials are obvious.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.wantsToPreviewUniqueMaterials">
            <summary>
            If true, replace each unique material with a colored one before static batching.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.shouldLogTextureAtlasExclusions">
            <summary>
            If true, log why texture/material can't be included in atlas.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.shouldValidateUVs">
            <summary>
            If true, log if mesh has UVs outside [0, 1] range.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.colorTextures">
            <summary>
            We generate a 1x1 texture for materials without one.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelBatching.MeshUsers">
            <summary>
            Tracks which mesh filters and skinned mesh renderers were referencing a given mesh.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelBatching.TextureUsers">
            <summary>
            Tracks which meshes and materials were referencing a given texture.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.TextureUsers.isGeneratedTexture">
            <summary>
            If true, UVs should be centered and overridden because original mesh was not textured. 
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.TextureUsers.componentsUsingMesh">
            <summary>
            Maps original mesh to any mesh filters using it.
            When mesh's UVs are modified the mesh filters need to be pointed at the copied mesh.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelBatching.TextureUsers.renderersUsingTexture">
            <summary>
            Renderers with a material using the texture.
            After combining texture the renderers need to be pointed at the combined material.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelBatching.ShaderGroup">
            <summary>
            Tracks which textures were referencing a given shader.
            </summary>
        </member>
        <member name="T:SDG.Unturned.LevelBatching.StaticBatchingInitialState">
            <summary>
            StaticBatchingUtility.Combine requires input renderers are enabled and active in hierarchy,
            so we temporarily activate/enable them to keep this logic out of LevelObject/ResourceSpawnpoint.
            </summary>
        </member>
        <member name="T:SDG.Unturned.DamageAnimalParameters">
            <summary>
            Payload for the DamageTool.damageAnimal function.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DamageAnimalParameters.applyGlobalArmorMultiplier">
            <summary>
            Should game mode config damage multiplier be factored in?
            </summary>
        </member>
        <member name="P:SDG.Unturned.DamageAnimalParameters.AlertPosition">
            <summary>
            If not null and damage is applied, <see cref="M:SDG.Unturned.Animal.alertDamagedFromPoint(UnityEngine.Vector3)"/> is called with this position.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UseableEventHook">
            <summary>
            Can be added to EquipablePrefab item GameObject to receive events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableEventHook.OnInspectStarted">
            <summary>
            Invoked when item begins inspect animation.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekServerCurationItem">
            <summary>
            Entry in the MenuPlayServerCurationUI list.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamBBCodeUtils.removeYouTubePreviews(System.String@)">
            <summary>
            In-game rich text does not support embedded YouTube videos, but they look great in the web browser,
            so we simply remove them from the in-game text.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamBBCodeUtils.removeCodeFormatting(System.String@)">
            <summary>
            Unfortunately in-game rich text does not have code formatting yet, so remove the tags while preserving text.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeDrop.ReceiveTransformRequest(SDG.Unturned.ServerInvocationContext@,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Not using rate limit attribute because this is potentially called for hundreds of barricades at once,
            and only admins will actually be allowed to apply the transform.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeDrop.ReceiveUpdateState(System.Byte[])">
            <summary>
            Only used by plugins.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeDrop.FindByRootFast(UnityEngine.Transform)">
            <summary>
            See BarricadeRegion.FindBarricadeByRootFast comment.
            </summary>
        </member>
        <member name="M:SDG.Unturned.BarricadeDrop.FindByTransformFastMaybeNull(UnityEngine.Transform)">
            <summary>
            For code which does not know whether transform exists and/or even is a barricade.
            See BarricadeRegion.FindBarricadeByRootFast comment.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SleekChatEntryV1.shouldFadeOutWithAge">
            <summary>
            Does this label fade out as the chat message gets older?
            </summary>
        </member>
        <member name="P:SDG.Unturned.SleekChatEntryV1.representingChatMessage">
            <summary>
            Chat message values to show.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ResourceSpawnpoint.canBeDamaged">
            <summary>
            Can this tree be damaged?
            Allows holiday restrictions to be taken into account. (Otherwise holiday trees could be destroyed out of season.)
            </summary>
        </member>
        <member name="M:SDG.Unturned.ResourceSpawnpoint.updateConditions">
            <summary>
            Used if the asset has holiday restrictions.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SteamConnectedClientBase">
            <summary>
            Some new code common to SteamPending and SteamPlayer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.SteamConnectedClientBase.firstPingRequestRealtime">
            <summary>
            Realtime the first ping request was received.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamConnectedClientBase.numPingRequestsReceived">
            <summary>
            Number of ping requests the server has received from this client.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamConnectedClientBase.incrementNumPingRequestsReceived">
            <summary>
            Called when a ping request is received from this client.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamConnectedClientBase.realtimeSinceFirstPingRequest">
            <summary>
            Realtime passed since the first ping request was received from this client.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamConnectedClientBase.averagePingRequestsReceivedPerSecond">
            <summary>
            Average number of ping requests received from this client per second.
            Begins tracking 10 seconds after the first ping request was received, or -1 if average is unknown yet.
            </summary>
        </member>
        <member name="P:SDG.Unturned.SteamConnectedClientBase.transportConnection">
            <summary>
            Only set on server. Associates player with their connection.
            </summary>
        </member>
        <member name="M:SDG.Unturned.SteamPending.GetQueueStateDebugString">
            <summary>
            Used when kicking player in queue to log what backend system might be failing.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ZombieRegion.alive">
            <summary>
            Number of alive zombies.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ZombieRegion.lastBossTime">
            <summary>
            Last time a quest boss was spawned.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieRegion.resetQuestBossTimer">
            <summary>
            Allow another quest to spawn a boss zombie immediately.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieRegion.UpdateRegion">
            <summary>
            Kills the boss zombie if nobody is around, if the boss was killed it calls UpdateBoss.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ZombieRegion.UpdateBoss">
            <summary>
            Checks for players in the area with quests and spawns boss zombies accordingly.
            </summary>
        </member>
        <member name="T:SDG.Unturned.PlayerGroupUI">
            <summary>
            HUD with projected labels for teammates.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WeatherAsset">
            <summary>
            Allows map makers to create custom weather events.
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAsset.overrideFog">
            <summary>
            Does this weather affect fog color and density?
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAsset.overrideAtmosphericFog">
            <summary>
            Does this weather affect sky fog color?
            </summary>
        </member>
        <member name="P:SDG.Unturned.WeatherAsset.overrideCloudColors">
            <summary>
            Does this weather affect cloud colors?
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherAsset.shadowStrengthMultiplier">
            <summary>
            Directional light shadow strength multiplier.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherAsset.fogBlendExponent">
            <summary>
            Exponent applied to effect blend alpha.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherAsset.cloudBlendExponent">
            <summary>
            Exponent applied to effect blend alpha.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherAsset.windMain">
            <summary>
            SpeedTree wind strength for blizzard. Should be removed?
            </summary>
        </member>
        <member name="F:SDG.Unturned.WeatherAsset.WeatherColor.levelEnum">
            <summary>
            If specified level editor color can be used rather than a per-asset color.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuUI.removeItemAlerts">
            <summary>
            Remove any existing item alert widgets.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuUI.alertNewItems(System.String,System.Collections.Generic.List{Steamworks.SteamItemDetails_t})">
            <summary>
            Open fullscreen alert showcasing newly granted items.
            Uses first item for title color, so items should be sorted by priority.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuUI.alertPurchasedItems(System.String,System.Collections.Generic.List{Steamworks.SteamItemDetails_t})">
            <summary>
            Open fullscreen alert showcasing newly granted items.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuUI.escapeMenu">
            <summary>
            Handle esc/back key press.
            Still really messy, but this used to be inside a huge nested if/elseif in Update.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuUI.requestSteamNews">
            <summary>
            Despite being newer code, this is obviously not ideal. Previously the news request was using the Steam HTTP
            API which might have been the cause of some crashes, so it was quickly converted to Unity web request instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStructureAsset.canBeDamaged">
            <summary>
            If false this structure cannot take damage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStructureAsset.eligibleForPooling">
            <summary>
            Modded structures can disable pooling if they have custom incompatible logic.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemStructureAsset.terrainTestHeight">
            <summary>
            Length of raycast downward from pivot to check floor is above terrain.
            Vanilla floors can be placed a maximum of 10 meters above terrain.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStructureAsset.placementPreviewRef">
            <summary>
            Optional alternative structure prefab specifically for the client preview spawned.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStructureAsset.RemoveClientComponents(UnityEngine.GameObject)">
            <summary>
            Called on the dedicated server to optimize client prefab for server usage.
            </summary>
        </member>
        <member name="T:SDG.Unturned.NPCWeatherBlendAlphaCondition">
            <summary>
            Compares weather intensity to value.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LiveConfig.Refresh">
            <summary>
            Called during startup and when returning to the main menu.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LiveConfig.Get">
            <summary>
            Result is never null, but may be empty or out-of-date.
            </summary>
        </member>
        <member name="T:SDG.Unturned.VehicleEventHook">
            <summary>
            Can be added to Vehicle GameObject to receive events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnDriverAdded">
            <summary>
            Invoked when any player enters the driver seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnDriverRemoved">
            <summary>
            Invoked when any player exits the driver seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnLocalDriverAdded">
            <summary>
            Invoked when a locally controlled player enters the driver seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnLocalDriverRemoved">
            <summary>
            Invoked when a locally controlled player exits the driver seat.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnLocalPassengerAdded">
            <summary>
            Invoked when a locally controlled player enters the vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnLocalPassengerRemoved">
            <summary>
            Invoked when a locally controlled player exits the vehicle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnLocked">
            <summary>
            Invoked when lock is engaged.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnUnlocked">
            <summary>
            Invoked when lock is disengaged.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnHornUsed">
            <summary>
            Invoked when horn is played.
            </summary>
        </member>
        <member name="F:SDG.Unturned.VehicleEventHook.OnExploded">
            <summary>
            Invoked after explosion plays.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InputInfo.transform">
            <summary>
            Root transform.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InputInfo.colliderTransform">
            <summary>
            Hit collider's transform. Can be null.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ESlotType">
            <summary>
            Used for item placement in displays / holsters, and whether useable can be placed in primary/secondary slot.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESlotType.NONE">
            <summary>
            Cannot be placed in primary nor secondary slots, but can be equipped from bag.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESlotType.PRIMARY">
            <summary>
            Can be placed in primary slot, but cannot be equipped in secondary or bag.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESlotType.SECONDARY">
            <summary>
            Can be placed in primary or secondary slot, but cannot be equipped from bag.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESlotType.TERTIARY">
            <summary>
            Only used by NPCs.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESlotType.ANY">
            <summary>
            Can be placed in primary, secondary, or equipped while in bag.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESensitivityScalingMode.ProjectionRatio">
            <summary>
            Project current field of view onto screen compared to desired field of view.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESensitivityScalingMode.ZoomFactor">
            <summary>
            Multiply sensitivity according to scope/optic zoom. For example an 8x zoom has 1/8th sensitivity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESensitivityScalingMode.Legacy">
            <summary>
            Preserve how sensitivity felt prior to 3.22.8.0 update.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ESensitivityScalingMode.None">
            <summary>
            Do not adjust sensitivity while aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ControlsSettings.CUSTOM_MODAL">
            <summary>
            When held the cursor is released.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ControlsSettings.formatPluginHotkeysIntoText(System.String@)">
            <summary>
            Replace instances of <plugin_num/> with their bound key text.
            Allows server effects to display plugin hotkeys.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ControlsSettings.getEquipmentHotkeyText(System.Int32)">
            <summary>
            Item 0 is "1" and item 9 is "0"
            </summary>
        </member>
        <member name="F:SDG.Unturned.ControlsSettings.mouseAimSensitivity">
            <summary>
            Multiplier for Input.GetAxis("mouse_x") and Input.GetAxis("mouse_y")
            </summary>
        </member>
        <member name="P:SDG.Unturned.ControlsSettings.CustomModal">
            <summary>
            When held the cursor is released.
            </summary>
        </member>
        <member name="E:SDG.Unturned.DedicatedUGC.installed">
            <summary>
            Broadcasts once all workshop assets are finished installing.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedUGC.beginInstallingItems(System.Boolean)">
            <summary>
            Called once the server is done registering items it wants to install.
            </summary>
            <param name="onlyFromCache">True when running in offline-only mode.</param>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.queryHandle">
            <summary>
            Request for details about the pending items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.itemsQueried">
            <summary>
            File IDs of all the items we have enqueued for query.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.itemsToQuery">
            <summary>
            Built from user-specified workshop item IDs, and then expanded as the query results
            arrive with details about any dependent or child items.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.itemsPendingQuery">
            <summary>
            File IDs requested by the latest query submitted.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.queryRetryCount">
            <summary>
            Number of times we've tried re-submitted failed queries.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.itemsToDownload">
            <summary>
            Built as the valid list of items arrive.
            </summary>
        </member>
        <member name="F:SDG.Unturned.DedicatedUGC.currentDownload">
            <summary>
            ID of the latest item we requested for download so that we can test if the callback is for us.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedUGC.enqueueItemToQuery(Steamworks.PublishedFileId_t)">
            <summary>
            Enqueue an item if we have not queried it yet. This guards against querying an item
            that is in two separate collections leading to duplicates.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedUGC.installFromCache(Steamworks.PublishedFileId_t)">
            <returns>True if item was installed from cache.</returns>
        </member>
        <member name="M:SDG.Unturned.DedicatedUGC.installItemsToQueryFromCache">
            <summary>
            Used in offline-only mode.
            </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedUGC.submitQuery">
             <summary>
             Prepare a query that will request metadata for all the workshop items we want to install.
             This allows us to check if the items are allowed to be auto-downloaded to this server, and to
             detect any child or dependent items.
            
             Waits for onQueryCompleted.
             </summary>
        </member>
        <member name="M:SDG.Unturned.DedicatedUGC.resubmitQuery">
            <summary>
            Re-submit previous query after a query failure.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UndergroundWhitelist.adjustPosition(UnityEngine.Vector3@,System.Single,System.Single)">
            <summary>
            If level is using underground whitelist then conditionally clamp world-space position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UndergroundAllowlist.AdjustPosition(UnityEngine.Vector3@,System.Single,System.Single)">
            <summary>
            If level is using underground allowlist then conditionally clamp world-space position.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UndergroundAllowlist.IsPositionWithinValidHeight(UnityEngine.Vector3,System.Single)">
            <summary>
            Used by animals and zombies to teleport to a spawnpoint if outside the map.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UndergroundAllowlist.IsPositionBuildable(UnityEngine.Vector3)">
            <summary>
            Used by housing validation to check item isn't placed underground.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekFullscreenBox">
            <summary>
            Almost every menu has a container element for its contents which spans the entire screen. This element is then
            animated into and out of view. In the IMGUI implementation this was fine because containers off-screen were not
            processed, but with uGUI they were still considered active. To solve the uGUI performance overhead this class
            was introduced to disable visibility after animating out of view.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TriggerEffectParameters">
            <summary>
            Payload for the EffectManager.triggerEffect method.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.asset">
            <summary>
            Required effect to spawn.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.position">
            <summary>
            World-space position to spawn at.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.scale">
            <summary>
            Local-space scale. Defaults to one.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.shouldReplicate">
            <summary>
            If running as server should this effect be replicated to clients?
            Defaults to true. Set to false for code that is called on client AND server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.reliable">
            <summary>
            Should the RPC be called in reliable mode? Unreliable effects might not be received.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.wasInstigatedByPlayer">
            <summary>
            Was a player directly responsible for triggering this effect?
            For example grenade explosions are instigated by players, whereas zombie acid explosions are not.
            Used to prevent mod damage on the effect prefab from hurting players on PvE servers.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.relevantDistance">
            <summary>
            Players within this radius will be sent the effect unless the effect overrides it.
            Defaults to 128.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TriggerEffectParameters.GetRotation">
            <summary>
            Get world-space rotation for the effect.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TriggerEffectParameters.SetRotation(UnityEngine.Quaternion)">
            <summary>
            Set world-space rotation for the effect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.rotation">
            <summary>
            World-space rotation for the effect.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.wasRotationSet">
            <summary>
            If true, rotation was specified by setter methods.
            Required for backwards compatibility because `direction` field is public.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.relevantTransportConnection">
            <summary>
            Only send the effect to the given player, if set.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.relevantTransportConnections">
            <summary>
            Only send the effect to the given players, if set.
            Otherwise relevantDistance is used.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.relevantPlayerID">
            <summary>
            Only send the effect to the given player, if set.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TriggerEffectParameters.direction">
            <summary>
            World-space direction to orient the Z axis along. Defaults to up.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IAssetReference.GUID">
            <summary>
            GUID of the asset this is referring to.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AssetReference`1.isValid">
            <summary>
            Whether the asset has been assigned. Note that this doesn't mean an asset with <see cref="P:SDG.Unturned.AssetReference`1.GUID"/> exists.
            </summary>
        </member>
        <member name="P:SDG.Unturned.AssetReference`1.isNull">
            <summary>
            Is this asset not assigned?
            </summary>
        </member>
        <member name="M:SDG.Unturned.AssetReference`1.isReferenceTo(SDG.Unturned.Asset)">
            <summary>
            True if resolving this asset reference would get that asset.
            </summary>
        </member>
        <member name="M:SDG.Unturned.AssetReference`1.Find">
            <summary>
            Resolve reference with asset manager.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBoxProbabilityModel.Original">
            <summary>
            Each quality tier has different rarities.
            Legendary: 5% Epic: 20% Rare: 75%
            </summary>
        </member>
        <member name="F:SDG.Unturned.EBoxProbabilityModel.Equalized">
            <summary>
            Each item has an equal chance regardless of quality.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableCharge.explosion2">
            <summary>
            Kept because lots of modders have been these scripts in Unity,
            so removing legacy effect id would break their content.
            Note: unsure about this one because it is private and not serialized.
            </summary>
        </member>
        <member name="T:SDG.Unturned.EconItemRarityComparer">
            <summary>
            Sorts higher rarity items into the front of the list.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerWorkzone.UpdateHandlesPreferredPivot">
            <summary>
            Set handles pivot point according to selection transform.
            Doesn't apply if handle is currently being dragged.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetBundleCustomData.ownerWorkshopFileId">
            <summary>
            If Unturned is loading this asset bundle from a Steam workshop file but the file ID does not match then
            loading will be canceled. Prevents the asset bundle from being easily copied/stolen.
            </summary>
        </member>
        <member name="F:SDG.Unturned.AssetBundleCustomData.ownerWorkshopFileIds">
             <summary>
             Same as ownerWorkshopFileId for cases where the asset bundle is allowed in multiple uploads.
            
             Uploading the same asset bundle multiple times is not ideal because the game doesn't handle
             multiple of them with the same name well, and Unity logs an error if an asset bundle with the
             same files is already loaded. That being said, the game doesn't handle dependencies between
             workshop files well either (as of 2023-01-12), so this is perhaps the lesser of two evils.
             
             My understanding is that some mod creators license their work to multiple servers that upload
             the files and this property will make it easier so it doesn't need to be re-exported multiple times.
             </summary>
        </member>
        <member name="T:SDG.Unturned.ServerPrefabUtil">
            <summary>
            Helpers on the dedicated server to optimize client prefabs for server usage.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ServerPrefabUtil.RemoveClientComponents(UnityEngine.GameObject)">
            <summary>
            Optimize client prefab for server usage.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelObject.isSpeciallyCulled">
            <summary>
            If true, object is within a culling volume.
            Name is old and not very specific, but not changing because it's public.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelObject.placeholderTransform">
            <summary>
            Transform created to preserve objects whose assets failed to load.
            Separate from default transform to avoid messing with old behavior when transform is null.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelObject.isOwnedCullingVolumeAllowed">
            <summary>
            If true, <see cref="F:SDG.Unturned.LevelObject.ownedCullingVolume"/> can be instantiated. Defaults to true.
            Enables mappers to remove culling volumes embedded in objects if they're causing issues.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelObject.canDamageRubble">
            <summary>
            Can this object's rubble be damaged?
            Allows holiday restrictions to be taken into account. (Otherwise holiday presents could be destroyed out of season.)
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelObject.isActiveInRegion">
            <summary>
            Object activation is time-sliced, so this does not necessarily match whether the region is active.
            </summary>
        </member>
        <member name="P:SDG.Unturned.LevelObject.isVisibleInCullingVolume">
            <summary>
            Defaults to true because most objects are not inside a culling volume. 
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObject.SetInteractableWantsNavActive(System.Boolean)">
            <summary>
            Used by InteractableObjectBinaryState to indicate whether it wants navGameObject to be active. It's only
            active if both IOBS and Rubble want it active.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObject.SetRubbleWantsNavActive(System.Boolean)">
            <summary>
            Used by InteractableObjectRubble to indicate whether it wants navGameObject to be active. It's only
            active if both IOBS and Rubble want it active.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObject.OnWeatherBlendAlphaChanged(SDG.Unturned.WeatherAssetBase,System.Single)">
            <summary>
            Used if the object asset has weather blend alpha conditions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObject.OnWeatherStatusChanged(SDG.Unturned.WeatherAssetBase,SDG.Unturned.EWeatherStatusChange)">
            <summary>
            Used if the object asset has weather status conditions.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObject.onFlagUpdated(System.UInt16)">
            <summary>
            Callback when an individual quest flag changes for the local player.
            Refreshes visibility conditions if the flag was relevant to this object.
            </summary>
        </member>
        <member name="M:SDG.Unturned.LevelObject.UpdateSkyboxActive">
            <summary>
            Separate from UpdateActiveAndRenderersEnabled so graphics settings can call it.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LevelObject.areRenderersEnabled">
            <summary>
            Assume renderers default to enabled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.Hash.combineSHA1Hashes(System.Byte[],System.Byte[])">
            <summary>
            Combine two existing 20-byte hashes.
            </summary>
        </member>
        <member name="T:SDG.Unturned.TimeSliceHash`1">
            <summary>
            Utility to hash a stream of bytes over several frames.
            </summary>
        </member>
        <member name="P:SDG.Unturned.TimeSliceHash`1.progress">
            <summary>
            [0, 1] percentage progress through the stream.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TimeSliceHash`1.advance">
            <summary>
            Advance 1MB further into the stream.
            </summary>
            <returns>True if there is more data, false if complete.</returns>
        </member>
        <member name="M:SDG.Unturned.TimeSliceHash`1.computeHash">
            <summary>
            Get the computed hash after processing stream.
            </summary>
        </member>
        <member name="F:SDG.Unturned.LocationDevkitNode.isVisibleOnMap">
            <summary>
            If true, visible in chart and satellite UIs.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMagazineAsset.projectileDamageMultiplier">
            <summary>
            Multiplier for explosive projectile damage.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMagazineAsset.projectileBlastRadiusMultiplier">
            <summary>
            Multiplier for explosive projectile's blast radius.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMagazineAsset.projectileLaunchForceMultiplier">
            <summary>
            Multiplier for explosive projectile's initial force.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMagazineAsset.shouldFillAfterDetach">
            <summary>
            Should amount be filled to capacity when detached?
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerMovement.SKIN_WIDTH">
            <summary>
            Nelson 2024-10-18: Moved to a constant because clients need this value for footsteps and they don't have the
            character controller component.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerMovement.JUMP">
            <summary>
            Jump speed = sqrt(2 * jump height * gravity)
            Jump height = (jump speed ^ 2) / (2 * gravity)
            With 7 speed and 9.81 * 3 gravity = apex height of 1.66496772
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerMovement.controller">
            <summary>
            Note: Only UpdateCharacterControllerEnabled should modify whether controller is enabled.
            (turning off and back on is fine though)
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerMovement.ActiveDeadzone">
            <summary>
            Valid while isRadiated.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerMovement.WeatherMask">
            <summary>
            Set according to volume or level global asset fallback.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerMovement.isAllowed">
            <summary>
            Was set to true during teleport, and restored to false during the next movement tick.
            
            Server pauses movement when this is set until next client update that matches,
            in order to prevent rubberbanding following a teleport.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerMovement.mostRecentlyAddedUpdate">
            <summary>
            Used instead of actual position to avoid revealing admins in "vanish" mode.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerMovement.bypassUndergroundWhitelist">
            <summary>
            Flag for plugins to allow maintenance access underneath the map.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerMovement.getVehicleSeat">
            <summary>
            Get seat (if any), otherwise null.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerMovement.forceRemoveFromVehicle">
            <summary>
            Serverside force player to exit vehicle regardless of safe exit points.
            </summary>
            <returns>True if player was seated in vehicle.</returns>
        </member>
        <member name="M:SDG.Unturned.PlayerMovement.simulate">
            <summary>
            Dedicated server simulate while input queue is empty.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerMovement.simulate(System.UInt32,System.Int32,System.Boolean,System.Boolean,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Dedicated server simulate driving input.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerMovement.simulate(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Client and dedicated server simulate walking input.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerMovement.mostRecentControllerColliderHit">
             <summary>
             In the future this can probably replace checkGround for locally simulated character?
             (Unturned only started using OnControllerColliderHit on 2023-01-31)
            
             2023-02-28: be careful with .gameObject property because it returns .collider.gameObject
             which can cause a null reference exception. (public issue #3726)
             </summary>
        </member>
        <member name="T:SDG.Unturned.ItemStoreDetailsMenu">
            <summary>
            Examine a store listing with description text.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemStoreDetailsMenu.viewCartButton">
            <summary>
            Only visible when cart is not empty.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VersionUtils.binaryToHexadecimal(System.UInt32)">
            <summary>
            Convert 32-bit version into 8-char string.
            String is advertised on server list for clients to filter their local map version.
            </summary>
        </member>
        <member name="M:SDG.Unturned.VersionUtils.hexadecimalToBinary(System.String,System.UInt32@)">
            <summary>
            Parse 32-bit version from 8-char string.
            String is advertised on server list for clients to filter their local map version.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MenuPlayConnectUI.hasPendingServerRelay">
            <summary>
            These server relay variables redirect the client to another server when the menu opens
            similar to how Steam sets the +connect string on game startup. Allows plugin to redirect
            player to another server on the same network.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MenuPlayConnectUI.connect(SDG.Unturned.SteamConnectionInfo,System.Boolean,SDG.Unturned.MenuPlayServerInfoUI.EServerInfoOpenContext)">
            <param name="shouldAutoJoin">If true the server is immediately joined, otherwise show server details beforehand.</param>
        </member>
        <member name="F:SDG.Unturned.InteractableStorage.shouldCloseWhenOutsideRange">
            <summary>
            If player gets too far away from this storage while using it, should we close out?
            False by default for trunk storage because player is inside vehicle.
            Plugins needed to be able to set this to false for "virtual storage" plugins,
            so we default to false and set to true if asset enables it.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UnturnedCanvasSortOrders">
            <summary>
            Keep all the uGUI Canvas sort orders in the same place.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.MenuNewsFeed">
            <summary>
            Manually created canvas in the Menu scene.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.Devkit">
            <summary>
            Devkit canvas in the Setup scene.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.DevkitOverlay">
            <summary>
            Dropdowns, drag-drop content, tab destinations, etc.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.DevkitTooltip">
            <summary>
            Devkit tooltips should be visible over all other devkit content.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.Glazier">
            <summary>
            uGUI glazier contains tooltips and cursor regardless of mode (e.g. devkit), so takes absolute priority.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.LoadingScreen">
            <summary>
            Plugins were spawning canvases with high sort orders that showed over the loading screen, so as a hacky
            workaround we put the uGUI loading screen on a higher sort order than normal glazier.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UnturnedCanvasSortOrders.Cursor">
            <summary>
            uGUI cursor needs to show above plugin canvas.
            Unity exposes sort order as an int32, but it is actually an int16, so this value is slightly below the 32767 max.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInputPacket.MAX_CLIENTSIDE_INPUTS">
            <summary>
            Worst case scenario, maybe shotgun hit or fast spray SMG.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ERaycastInfoUsage">
            <summary>
            Tags how client expects server to use a raycast input.
            For example, client may think they fired a gun while server thinks they dequipped the gun,
            so tagging the input prevents the server from handling it as a punch instead.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WalkingPlayerInputPacket.clientPosition">
            <summary>
            Resulting transform.position immediately after movement.simulate was called.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.TOCK_PER_SECOND">
            <summary>
            Calls to UseableGun.tock per second.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.onPluginKeyTick">
            <summary>
            Called for every input packet received allowing plugins to listen for a few special
            keys they can display in chat/effect UIs.
            </summary>
        </member>
        <member name="P:SDG.Unturned.PlayerInput.IsUnderFakeLagPenalty">
            <summary>
            Whether client is currently penalized for potentially using a lag switch. False positives are relatively
            likely when client framerate hitches (e.g. loading dense region), so we only modify their stats (e.g. reduce
            player damage) for a corresponding duration.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInput.getInput(System.Boolean,SDG.Unturned.ERaycastInfoUsage)">
            <summary>
            Get the hit result of a raycast on the server. Until a generic way to address net objects is implemented
            this is how legacy features specify which player/animal/zombie/vehicle/etc they want to interact with.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.serverLastReceivedSimulationFrameNumber">
            <summary>
            Ideally simulation frame number would be signed, but there is a lot of code expecting unsigned.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.debugDiscardInputs">
            <summary>
            Can be enabled in the unity inspector to test that discarding inputs recovers properly.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.EXPECTED_ASKINPUT_PER_SECOND">
            <summary>
            askInput is always called the same number of times per second because it's run from FixedUpdate,
            but the spacing between calls can vary depending on network and whether client FPS is low.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.MAX_ASKINPUT_PER_SECOND">
            <summary>
            If average askInput calls per second exceeds this, we either ignore their request or flat-out kick them.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.KICK_ASKINPUT_PER_SECOND">
            <summary>
            If average askInput calls per second exceeds this we silently kick them.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.serversideAskInputCount">
            <summary>
            Number of times askInput has been called by client.
            Even with huge packet loss, we know that 
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.initialServersideAskInputTime">
            <summary>
            Realtime that the first call to askInput was made by the client.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.latestAskInputDismissTestTime">
            <summary>
            Realtime that the previous askInput kick test was performed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInput.advanceRollingWindowIndex(System.Int32)">
            <summary>
            Set rollingWindowIndex to newIndex, zeroing all input counts along the way.
            Important to zero the intermediary indexes in-case server stalled for more than one second.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInput.ReceiveSimulateMispredictedInputs(System.UInt32,SDG.Unturned.EPlayerStance,UnityEngine.Vector3,UnityEngine.Vector3,System.Byte,System.Int32,System.Int32)">
            <summary>
            Notify client there has been a prediction error, so movement needs to be re-simulated.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInput.ReceiveAckGoodInputs(System.UInt32)">
            <summary>
            Notify client old inputs can be discarded because they were predicted correctly.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInput.ReceiveInputs(SDG.Unturned.ServerInvocationContext@)">
            <summary>
            Not using rate limit attribute because it internally keeps a rolling window limit.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PlayerInput.onLifeUpdated(System.Boolean)">
            <summary>
            Only bound on dedicated server.
            When dieing in a vehicle this prevents delay handling packets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.fakeLagPenaltyFrames">
            <summary>
            Counter of simulation frames before fake lag penalty is disabled.
            </summary>
        </member>
        <member name="F:SDG.Unturned.PlayerInput.FAKE_LAG_PENALTY_DAMAGE">
            <summary>
            Player damage multiplier while under penalty for fake lag. (10%)
            </summary>
        </member>
        <member name="F:SDG.Unturned.Characters.previewItemDefId">
            <summary>
            If set, this item is prioritized over equipped cosmetics. Used by item inspect menu.
            Admittedly, this is very hacked-together. Hopefully rewriting this file someday?
            </summary>
        </member>
        <member name="M:SDG.Unturned.Characters.isEquipped(System.UInt64)">
            <summary>
            Is cosmetic or skin equipped?
            </summary>
        </member>
        <member name="T:SDG.Unturned.TransformHandles">
            <summary>
            Merging the devkit, legacy, and housing transform handles into one place.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.EMode.Position">
            <summary>
            Position and plane handles for each axis.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.EMode.Rotation">
            <summary>
            Disc handles for each axis.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.EMode.Scale">
            <summary>
            Scale handles for each axis.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.EMode.PositionBounds">
            <summary>
            Position handles on each side of box.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.EMode.ScaleBounds">
            <summary>
            Scale handles on each side of box which both move and resize the box.
            </summary>
        </member>
        <member name="E:SDG.Unturned.TransformHandles.OnPreTransform">
            <summary>
            Invoked when handle is clicked so that tool can save selection transform relative to pivot.
            This avoids floating point precision loss of applying delta for each Transformed event.
            </summary>
        </member>
        <member name="E:SDG.Unturned.TransformHandles.OnTranslatedAndRotated">
            <summary>
            Invoked when handle is dragged and value actually changes.
            </summary>
        </member>
        <member name="E:SDG.Unturned.TransformHandles.OnTransformed">
            <summary>
            Invoked when handle is dragged and value actually changes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TransformHandles.SetPreferredMode(SDG.Unturned.TransformHandles.EMode)">
            <summary>
            Preferred mode only takes effect while not dragging.
            Bounds modes fall back to non-bounds modes if bounds are not set.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TransformHandles.SetPreferredPivot(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Pivot only takes effect while not dragging. This is to help ensure
            the caller does not depend on the internal pivot values.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TransformHandles.ExternallyTransformPivot(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Somewhat hacky, useful to make the "copy-paste transform" feature easier to implement.
            Invoke tranformed callback as if pivot were manually dragged to the new position and rotation.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TransformHandles.Raycast(UnityEngine.Ray)">
            <summary>
            Called before raycasting into the regular physics scene to give transform tool priority.
            </summary>
        </member>
        <member name="M:SDG.Unturned.TransformHandles.UpdateViewProperties">
            <summary>
            Update properties that depend on the transform of the camera relative to our handles.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.pivotPosition">
            <summary>
            Center of handle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.pivotRotation">
            <summary>
            Rotation of handle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.hasPivotBounds">
            <summary>
            True if pivotBounds is non-zero.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.hoverComponent">
            <summary>
            Mouse currently over this handle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.dragComponent">
            <summary>
            Mouse currently dragging this handle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.viewDirection">
            <summary>
            Direction from camera toward pivot.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.viewScale">
            <summary>
            Multiplier according to distance between camera and pivot to keep handles a constant on-screen size.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.viewAxisFlip">
            <summary>
            Multiplier to flip axis handles according to which side the camera is on.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.dragRotationOrigin">
            <summary>
            Pivot rotation when rotation drag started.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.dragRotationAxis">
            <summary>
            Rotating around this axis.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.dragRotationOutwardDirection">
            <summary>
            Direction from circle center to edge point.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.dragRotationEdgePoint">
            <summary>
            Point on the edge of the circle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.TransformHandles.dragRotationTangent">
            <summary>
            Drag along this tangent to the circle.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMapAsset.enablesCompass">
            <summary>
            Does having this item show the compass?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMapAsset.enablesChart">
            <summary>
            Does having this item show the chart?
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemMapAsset.enablesMap">
            <summary>
            Does having this item show the satellite?
            </summary>
        </member>
        <member name="T:SDG.Unturned.MenuStartup">
            <summary>
            Ideally component Awake/Start order should not matter, but Unturned's menu is a mess.
            For most players the default order was fine, but it seems it was not deterministic so it would break for some players.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerMethodInfo.rateLimitIndex">
            <summary>
            Index into per-connection rate limiting array.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NetReflection.rateLimitedMethodsCount">
            <summary>
            Number of server methods with rate limits.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetReflection.Dump">
            <summary>
            Log all known net methods.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetReflection.LogHandleCount">
            <summary>
            Useful debug check to ensure every built-in handle is claimed exactly once.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetReflection.Log(System.String)">
            <summary>
            This class gets used from type initializers, so Unity's built-in log is not an option unfortunately.
            </summary>
        </member>
        <member name="M:SDG.Unturned.NetReflection.RegisterFromAssembly(System.Reflection.Assembly)">
            <summary>
            Not *really* supported but *might* probably work. Adding for public discussion #4176.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemRefillAsset.water">
            <summary>
            Kept for backwards compatibility with plugins.
            </summary>
        </member>
        <member name="T:SDG.Unturned.UseableGunEventHook">
            <summary>
            Can be added to EquipablePrefab item GameObject to receive events.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGunEventHook.OnShotFired">
            <summary>
            Invoked when gun is fired.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGunEventHook.OnReloadingStarted">
            <summary>
            Invoked when gun begins reload sequence.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGunEventHook.OnChamberingStarted">
            <summary>
            Invoked when gun begins hammer sequence.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGunEventHook.OnAimingStarted">
            <summary>
            Invoked when gun begins aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableGunEventHook.OnAimingStopped">
            <summary>
            Invoked when gun ends aiming.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectManager.tmpTexts">
            <summary>
            TextMesh Pro uGUI text components.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectManager.tmpInputFields">
            <summary>
            TextMesh Pro uGUI input field components.
            </summary>
        </member>
        <member name="P:SDG.Unturned.EffectManager.instance">
            <summary>
            Exposed for Rocket transition to modules backwards compatibility.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.TriggerFiremodeEffect(UnityEngine.Vector3)">
            <summary>
            This effect makes a nice clicky sound and lots of older code used it,
            so I moved it into a little helper method here.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.sendUIEffectImageURL(System.Int16,SDG.NetTransport.ITransportConnection,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <param name="shouldCache">If true, client will download the image once and re-use it for subsequent calls.</param>
            <param name="forceRefresh">If true, client will destroy any cached copy of the image and re-acquire it.</param>
        </member>
        <member name="M:SDG.Unturned.EffectManager.sendEffectClicked(System.String)">
            <summary>
            Notify server that a button was clicked in a clientside effect.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.sendEffectTextCommitted(System.String,System.String)">
            <summary>
            Notify server that an input field text was committed.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.destroyUIEffect(System.Int16)">
            <summary>
            If an effect with a given key exists, destroy it.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.internalSpawnEffect(SDG.Unturned.EffectAsset,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,UnityEngine.Transform)">
            <summary>
            parent should only be set if that system also calls ClearAttachments, otherwise attachedEffects will leak memory.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.triggerEffect(SDG.Unturned.TriggerEffectParameters)">
            <summary>
            Helper for sending and spawning effects.
            Newer and refactored code should use this method.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectManager.debrisGameObjects">
            <summary>
            Objects registered so that they can be destroyed all at once if needed.
            May be null if they were destroyed with a timer.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectManager.uiEffectInstances">
            <summary>
            Plugin UIs spawned by the server.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.UnregisterAttachment(UnityEngine.GameObject)">
            <summary>
            Called prior to destroying effect (if attached) to free up attachments list.
            </summary>
        </member>
        <member name="M:SDG.Unturned.EffectManager.RegisterAttachment(UnityEngine.GameObject)">
            <summary>
            Called after attaching effect so that it can be returned to pool when/if parent is destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectManager.attachedEffects">
            <summary>
            Maps root transform to any attached effects.
            This allows us to detach effects when returning a barricade/structure to their pool.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EffectManager.attachedEffectsListPool">
            <summary>
            Recycled lists for attachedEffects dictionary.
            </summary>
        </member>
        <member name="M:SDG.Unturned.RagdollTool.applyRagdollEffect(UnityEngine.Transform,SDG.Unturned.ERagdollEffect)">
            <summary>
            Find materials in finished ragdoll and replace them with the appropriate effect.
            </summary>
        </member>
        <member name="T:SDG.Unturned.IAssetErrorContext">
            <summary>
            Context for the Assets.ReportError methods.
            Nelson 2024-11-20: Converted from directly using asset to this interface so that asset-related features can
            more easily log warnings to the in-game menu.
            </summary>
        </member>
        <member name="P:SDG.Unturned.IAssetErrorContext.AssetErrorPrefix">
            <summary>
            Format text to prefix any errors reported in this context. (e.g., this asset's name and ID)
            </summary>
        </member>
        <member name="M:SDG.Unturned.AlertTool.alert(SDG.Unturned.Player,UnityEngine.Vector3,System.Single,System.Boolean,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Alerts any agents in the area to the player if needed.
            </summary>
            <param name="player">The player causing this alert.</param>
            <param name="position">The position of the alert.</param>
            <param name="radius">The detection radius.</param>
            <param name="sneak">Whether or not to hide.</param>
        </member>
        <member name="M:SDG.Unturned.AlertTool.alert(UnityEngine.Vector3,System.Single)">
            <summary>
            Alerts any agents in the area.
            </summary>
            <param name="position">The position of the alert.</param>
            <param name="radius">The detection radius.</param>
        </member>
        <member name="T:SDG.Unturned.ContinuousIntegration">
            <summary>
            Report success or failure from game systems, conditionally compiled into the Windows 64-bit build.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ContinuousIntegration.reportSuccess">
            <summary>
            Call when the server is done all loading without running into errors.
            Ignored if not running in CI mode, otherwise exits the server successfully with error code 0.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ContinuousIntegration.reportFailure(System.Object)">
            <summary>
            Call when the server encounters any error.
            Ignored if not running in CI mode, otherwise exits the server with error code 1.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekServerCurationRule">
            <summary>
            Entry in the MenuPlayServerCurationRulesUI list.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemGeneratorAsset.burn">
            <summary>
            Seconds to wait between burning one unit of fuel.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableFarm.growth">
            <summary>
            Number of seconds to finish growing.
            </summary>
        </member>
        <member name="P:SDG.Unturned.InteractableFarm.grow">
            <summary>
            Item legacy ID to grant the player.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ReceivedChatMessage">
            <summary>
            Created when a chat entry is received from the server for display in the UI.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.speaker">
            <summary>
            Player who sent the message, or null if it was a plugin broadcast.
            Used to retrieve player avatar.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.iconURL">
            <summary>
            Web address of a 32x32 .png to use rather than a platform avatar.
            Only used if not null/empty.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.mode">
            <summary>
            How the message was sent through global, local or group.
            Mostly deprecated because that status isn't formatted into texts anymore.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.color">
            <summary>
            Default font color to use unless overridden by rich text formatting.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.useRichTextFormatting">
            <summary>
            Whether this entry should enable rich text formatting.
            False by default because players abuse font size and ugly colors.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.contents">
            <summary>
            Text to display for this message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ReceivedChatMessage.receivedTimestamp">
            <summary>
            When the entry was locally received from the server.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ReceivedChatMessage.age">
            <summary>
            How many seconds ago this message was locally received from the server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.NPCItemCondition.search">
            <summary>
            isConditionMet can get called during applyCondition because item consume refreshes the UI.
            </summary>
        </member>
        <member name="E:SDG.Unturned.GameUpdateMonitor.OnGameUpdateDetected">
            <summary>
            Event for plugins to be notified when a server update is detected.
            
            Pandahut requested this because they run the game as a Windows service and need to shutdown
            through their central management system rather than per-process.
            </summary>
        </member>
        <member name="T:SDG.Unturned.BuiltinAutoShutdown">
            <summary>
            Manages scheduled restart for dedicated server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BuiltinAutoShutdown.scheduledShutdownWarnings">
            <summary>
            Sorted from low to high.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BuiltinAutoShutdown.updateShutdownWarnings">
            <summary>
            Sorted from low to high.
            </summary>
        </member>
        <member name="F:SDG.Unturned.EObjectInteractability.DIALOGUE">
            <summary>
            Non-NPC object the player can talk with.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableConsumeable.onPerformingAid">
            <summary>
            Broadcasts for plugins before applying consumeable stats to another player.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableConsumeable.onPerformedAid">
            <summary>
            Broadcasts for plugins after applying consumeable stats to another player.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableConsumeable.onConsumeRequested">
            <summary>
            Broadcasts for plugins before applying consumeable stats to self.
            </summary>
        </member>
        <member name="E:SDG.Unturned.UseableConsumeable.onConsumePerformed">
            <summary>
            Broadcasts for plugins after applying consumeable stats to self.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableConsumeable.performAid(SDG.Unturned.ItemConsumeableAsset)">
            <summary>
            Called serverside when using consumeable on another player.
            </summary>
        </member>
        <member name="M:SDG.Unturned.UseableConsumeable.performUseOnSelf(SDG.Unturned.ItemConsumeableAsset)">
            <summary>
            Called by owner and server when using consumeable on self.
            </summary>
        </member>
        <member name="E:SDG.Unturned.ServerCurationItem.OnDataChanged">
            <summary>
            Invoked when web item is first loaded or reloaded.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationOutput.allowed">
            <summary>
            If false, a deny rule matched the input.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationOutput.matchedAnyRules">
            <summary>
            If true, at least one rule matched the input.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationOutput.allowOrDenyRule">
            <summary>
            If set, this was the final match.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCurationOutput.matchedRules">
            <summary>
            Optional. If set, filled with any rules that matched.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ServerListCuration.StartupLoadWebUrls">
            <summary>
            Called earlier during startup to try and have web lists ready by the time server browser is opened.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCuration.assetListChangeCounter">
            <summary>
            Used to detect asset refresh.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCuration.isListDirty">
            <summary>
            If true, list needs to be sorted.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCuration.areMergedRulesDirty">
            <summary>
            If true, MergeRules should be called before doing any filtering.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerListCuration.hasLoadedWebUrls">
            <summary>
            If false, LoadWebUrls still needs to be called.
            </summary>
        </member>
        <member name="F:SDG.Unturned.UseableMelee.playUseSoundTime">
            <summary>
            For non-repeat weapons the "Use" audio clip is played once time reaches this point.
            </summary>
        </member>
        <member name="M:SDG.Unturned.InteractableGenerator.updatePowerableIsWired(SDG.Unturned.InteractablePower,System.Boolean)">
            <summary>
            Catch exceptions to prevent a broken powerable from breaking all the other powerable items in the area.
            </summary>
        </member>
        <member name="F:SDG.Unturned.InteractableGenerator.worldCandidates">
            <summary>
            Unsorted list of world space generators turned-on and fueled.
            </summary>
        </member>
        <member name="T:SDG.Unturned.ServerTextChatMessenger">
            <summary>
            Allows Unity events to broadcast text chat messages from the server.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerTextChatMessenger.DefaultText">
            <summary>
            Text to use when SendDefaultTextChatMessage is invoked.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerTextChatMessenger.IconURL">
            <summary>
            URL of a png or jpg image file to show next to the message.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerTextChatMessenger.DefaultColor">
            <summary>
            Text color when rich text does not override with color tags.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ServerTextChatMessenger.UseRichTextFormatting">
            <summary>
            Should rich text tags be parsed?
            e.g. bold, italic, color
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemCaliberAsset.aimingRecoilMultiplier">
            <summary>
            Recoil magnitude multiplier while the gun is aiming down sights.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemCaliberAsset.aimDurationMultiplier">
            <summary>
            Multiplier for gun's Aim_In_Duration.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCaliberAsset.FirerateOffset">
            <summary>
            For backwards compatibility this is *subtracted* from the gun's firerate, so a positive number decreases
            the time between shots and a negative number increases the time between shots.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCaliberAsset.ballisticDamageMultiplier">
            <summary>
            Multiplier for normal bullet damage.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCaliberAsset.BallisticGravityMultiplier">
            <summary>
            Multiplier for bullet acceleration due to gravity.
            </summary>
        </member>
        <member name="F:SDG.Unturned.ItemCaliberAsset.aimingMovementSpeedMultiplier">
            <summary>
            Movement speed multiplier while the gun is aiming down sights.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCaliberAsset.CanDamageInvulernableEntities">
            <summary>
            If true, gun can damage entities with Invulnerable tag. Defaults to false.
            </summary>
        </member>
        <member name="P:SDG.Unturned.ItemCaliberAsset.instantiatedAttachmentName">
            <summary>
            Name to use when instantiating attachment prefab.
            By default the asset guid is used, but it can be overridden because some
            modders rely on the name for Unity's legacy animation component. For example
            in Toothy Deerryte's case there were a lot of duplicate animations to work
            around the guid naming, simplified by overriding name.
            </summary>
        </member>
        <member name="F:SDG.Unturned.BarricadeData.rotation">
            <summary>
            Note: If barricade is attached to a vehicle this is the local rotation.
            </summary>
        </member>
        <member name="T:SDG.Unturned.PhysicsEx">
            <summary>
            Extensions to the built-in Physics class.
            
            Shares similar functionality to the SDG.Framework.Utilities.PhysicsUtility class, but that should be moved here
            because the "framework" is unused and and the long name is annoying.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsEx.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Wrapper that respects landscape hole volumes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsEx.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Wrapper that respects landscape hole volumes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsEx.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Wrapper that respects landscape hole volumes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.PhysicsEx.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Wrapper that respects landscape hole volumes.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekLevel">
            <summary>
            Button in a list of levels.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekFilterLevel">
            <summary>
            Button in the list of levels for server browser filters.
            </summary>
        </member>
        <member name="T:SDG.Unturned.SleekEditorLevel">
            <summary>
            Button in the list of levels for the map editor.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierElementBase_IMGUI">
            <summary>
            Base class for IMGUI implementations of primitive building block widgets.
            </summary>
        </member>
        <member name="F:SDG.Unturned.GlazierElementBase_IMGUI.drawRect">
            <summary>
            Position passed into the GUI draw methods.
            </summary>
        </member>
        <member name="T:SDG.Unturned.MasterBundleHash">
            <summary>
            Hashes for Windows, Linux, and Mac asset bundles.
            Only loaded on the dedicated server. Null otherwise.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleHash.DoesAnyHashMatch(System.Byte[])">
            <summary>
            Does given hash match any of the platform hashes?
            </summary>
        </member>
        <member name="T:SDG.Unturned.MasterBundleValidation">
            <summary>
            Compares client asset bundle hash with server known hashes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleValidation.initialize(System.Collections.Generic.List{SDG.Unturned.MasterBundleConfig})">
            <summary>
            Called by asset startup to cache which bundles are eligible for hashing.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierTest">
            <summary>
            Used in a test scene to quickly test all Glazier features.
            </summary>
        </member>
        <member name="T:SDG.Unturned.GlazierTest.ListItem">
            <summary>
            Reference type for testing SleekList.
            </summary>
        </member>
        <member name="T:SDG.Unturned.WindowsConsole">
            <summary>
            Uses the Win32 API to force a console to be created and destroyed.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WindowsConsole.shouldManageConsole">
            <summary>
            Should we manually create and destroy a Win32 console?
            Useful for IO on Windows desktop, but not as much for dedicated machines.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WindowsConsole.conditionalAlloc">
            <summary>
            Allocate Windows console if enabled.
            </summary>
        </member>
        <member name="M:SDG.Unturned.WindowsConsole.conditionalFree">
            <summary>
            Free Windows console if enabled.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WindowsConsole.ECtrlType.CTRL_C_EVENT">
            <summary>
            A CTRL+C signal was received, either from keyboard input or from a signal generated by the GenerateConsoleCtrlEvent function.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WindowsConsole.ECtrlType.CTRL_BREAK_EVENT">
            <summary>
            A CTRL+BREAK signal was received, either from keyboard input or from a signal generated by GenerateConsoleCtrlEvent.
            </summary>
        </member>
        <member name="F:SDG.Unturned.WindowsConsole.ECtrlType.CTRL_CLOSE_EVENT">
            <summary>
            A signal that the system sends to all processes attached to a console when the user closes the console
            (either by clicking Close on the console window's window menu, or by clicking the End Task button command from Task Manager).
            </summary>
        </member>
        <member name="T:SDG.Unturned.ItemStoreSavedata">
            <summary>
            Tracks whether we should show the "NEW" label on listings and item store button.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreSavedata.MarkNewCraftingPageSeen">
            <summary>
            Track that player has seen the new crafting blueprints.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreSavedata.MarkNewListingsPageSeen">
            <summary>
            Track that player has seen the page with all new listings.
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreSavedata.WasNewListingSeen(System.Int32)">
            <summary>
            Has player seen the given listing?
            </summary>
        </member>
        <member name="M:SDG.Unturned.ItemStoreSavedata.MarkNewListingSeen(System.Int32)">
            <summary>
            Track that the player has seen the given listing.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.directoryPath">
            <summary>
            Absolute path to directory containing bundle and .dat file.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.assetBundleName">
            <summary>
            Name of the actual asset bundle file, e.g. Hawaii.unity3d
            Asset bundle should be next to this config file.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.assetBundleNameWithoutExtension">
            <summary>
            assetBundleName without final .* extension.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.assetPrefix">
            <summary>
            Prefixed to all asset paths loaded from asset bundle.
            Final path is built from assetPrefix + pathRelativeToBundlesFolder + assetName,
            e.g. Assets/Hawaii/Bundles + /Objects/Large/House/ + Object.prefab
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.version">
            <summary>
            Custom asset bundle version used by Unturned to detect whether imports need
            fixing up because they were exported from an older version of Unity.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleConfig.getAssetBundlePath">
            <summary>
            Get absolute path to asset bundle file.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleConfig.getHashFilePath">
            <summary>
            Get absolute path to file with per-platform hashes.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleConfig.formatAssetPath(System.String)">
            <summary>
            Insert path prefix if set.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.assetBundle">
            <summary>
            Loaded asset bundle.
            </summary>
        </member>
        <member name="P:SDG.Unturned.MasterBundleConfig.hash">
            <summary>
            Hash of loaded asset bundle file.
            This is per-platform, so the server loads a hash file with all platform hashes.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MasterBundleConfig.doesHashFileExist">
            <summary>
            True if the server .hash file exists.
            Hash file is not used by client, but client uses whether it exists to decide whether to include asset bundle hash in asset hash.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MasterBundleConfig.serverHashes">
            <summary>
            Hashes for Windows, Linux, and Mac asset bundles.
            Only loaded on the dedicated server. Null otherwise.
            </summary>
        </member>
        <member name="M:SDG.Unturned.MasterBundleConfig.StartLoad(System.Byte[],System.Byte[])">
            <summary>
            Load the underlying asset bundle.
            </summary>
        </member>
        <member name="F:SDG.Unturned.MasterBundleConfig.sourceConfig">
            <summary>
            If true, the associated asset bundle couldn't be loaded and was instead copied from another config.
            </summary>
        </member>
        <member name="M:SDG.Framework.IO.FormattedFiles.KeyValueTables.KeyValueTableTypeRedirectorRegistry.chase(System.String)">
            <summary>
            If the type name has been redirected this method will be called recursively until the most recent name is found and returned.
            </summary>
        </member>
        <member name="P:SDG.Framework.IO.FormattedFiles.KeyValueTables.LimitedKeyValueTableReader.limit">
            <summary>
            After the key "limit" is loaded we stop reading.
            </summary>
        </member>
        <member name="P:SDG.Framework.IO.IOUtility.rootPath">
            <summary>
            Path to the folder which contains the Unity player executable.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.LandscapeHoleVolumeManager.ApplyToTerrain">
            <summary>
            Called by loading after landscapes (and legacy conversion) have been loaded.
            </summary>
        </member>
        <member name="F:SDG.Framework.Landscapes.LandscapeTile.holes">
            <summary>
            True is solid and false is empty.
            </summary>
        </member>
        <member name="F:SDG.Framework.Landscapes.LandscapeTile.hasAnyHolesData">
            <summary>
            Marked true when level editor or legacy hole volumes modify hole data.
            Defaults to false in which case holes do not need to be saved.
            
            Initially this was not going to be marked by hole volumes because they can re-generate the holes, but saving
            hole volume cuts is helpful when upgrading to remove hole volumes from a map.
            </summary>
        </member>
        <member name="F:SDG.Framework.Landscapes.LandscapeTile.dataWithoutHoles">
            <summary>
            Heightmap-only data used in level editor. Refer to Landscape.DisableHoleColliders for explanation.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.LandscapeTile.updatePrototypes">
            <summary>
            Call this when done changing material references to grab their textures and pass them to the terrain renderer.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.LandscapeUtility.cleanHeightmapCoord(SDG.Framework.Landscapes.LandscapeCoord@,SDG.Framework.Landscapes.HeightmapCoord@)">
            <summary>
            If a heightmap coordinate is out of bounds the tile/heightamp coordinate will be adjusted so that it is in bounds again.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.LandscapeUtility.cleanSplatmapCoord(SDG.Framework.Landscapes.LandscapeCoord@,SDG.Framework.Landscapes.SplatmapCoord@)">
            <summary>
            If a splatmap coordinate is out of bounds the tile/splatmap coordinate will be adjusted so that it is in bounds again.
            </summary>
        </member>
        <member name="P:SDG.Framework.Landscapes.Landscape.DisableHoleColliders">
            <summary>
            Hacky workaround for height and material brushes in editor. As far as I can tell in Unity 2019 LTS there is no method to ignore
            holes when raycasting against terrain (e.g. when painting holes), so we use a duplicate TerrainData without holes in the editor.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.IsPointInsideHole(UnityEngine.Vector3)">
            <summary>
            Is point (on XZ plane) inside a masked-out pixel?
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.getSplatmapHighestWeightLayerIndex(SDG.Framework.Landscapes.SplatmapCoord,System.Single[0:,0:,0:],System.Int32)">
            <param name="ignoreLayer">If the highest weight layer is ignoreLayer then the next highest will be returned.</param>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.getSplatmapHighestWeightLayerIndex(System.Single[],System.Int32)">
            <param name="ignoreLayer">If the highest weight layer is ignoreLayer then the next highest will be returned.</param>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.getHeightmapVertices(UnityEngine.Bounds,SDG.Framework.Landscapes.Landscape.LandscapeGetHeightmapVerticesHandler)">
            <summary>
            Appends heightmap vertices to points list.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.getSplatmapVertices(UnityEngine.Bounds,SDG.Framework.Landscapes.Landscape.LandscapeGetSplatmapVerticesHandler)">
            <summary>
            Appends heightmap vertices to points list.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.linkNeighbors">
            <summary>
            Call this after you're done adding new tiles.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.reconcileNeighbors(SDG.Framework.Landscapes.LandscapeTile)">
            <summary>
            Call this to sync a new tile up with nearby tiles.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.onSatellitePreCapture">
            <summary>
            Capturing ortho view of map, so we raise the terrain to max quality.
            </summary>
        </member>
        <member name="M:SDG.Framework.Landscapes.Landscape.onSatellitePostCapture">
            <summary>
            Finished capturing ortho view of map, so we restore the terrain to preferred quality.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.Tools.EDevkitLandscapeToolHeightmapFlattenMethod.REGULAR">
            <summary>
            Directly blend current value toward target value.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.Tools.EDevkitLandscapeToolHeightmapFlattenMethod.MIN">
            <summary>
            Only blend current value toward target value if current is greater than target.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.Tools.EDevkitLandscapeToolHeightmapFlattenMethod.MAX">
            <summary>
            Only blend current value toward target value if current is less than target.
            </summary>
        </member>
        <member name="P:SDG.Framework.Devkit.IDevkitHierarchyItem.ShouldSave">
            <summary>
            If true, write to LevelHierarchy file.
            False for externally managed objects like legacy lighting WaterVolume.
            </summary>
        </member>
        <member name="P:SDG.Framework.Devkit.IDevkitHierarchyItem.CanBeSelected">
            <summary>
            If true, editor tools can select and transform.
            False for items like the object-owned culling volumes.
            </summary>
        </member>
        <member name="T:SDG.Framework.Devkit.DevkitSelection">
            <summary>
            Hold onto collider and gameobject separately because collider isn't necessarily attached to gameobject.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.AmbianceVolume._id">
            <summary>
            Kept because lots of modders have been using this script in Unity,
            so removing legacy effect id would break their content.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.AmbianceVolume.weatherMask">
            <summary>
            If per-weather mask AND is non zero the weather will blend in.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.AmbianceVolume.GetEffectAsset">
            <summary>
            Used by lighting to get the currently active effect.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Transactions.DevkitTransactionManager.beginTransaction(System.String)">
            <summary>
            Open a new transaction group which stores multiple undo/redoable actions, for example this would be called before moving an object.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Transactions.DevkitTransactionManager.endTransaction">
            <summary>
            Close the pending transaction and finalize any change checks.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Transactions.DevkitTransactionManager.resetTransactions">
            <summary>
            Clear the undo/redo queues.
            </summary>
        </member>
        <member name="P:SDG.Framework.Devkit.Transactions.IDevkitTransaction.delta">
            <summary>
            If false this transaction is ignored. If there were no changes at all in the group it's discarded.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Transactions.IDevkitTransaction.forget">
            <summary>
            Called when history buffer is too long so this transaction is discarded.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Transactions.DevkitTransactionUtility.recordObjectDelta(System.Object)">
            <summary>
            Save the state of all the fields and properties on this object to the current transaction group so that they can be checked for changes once the transaction has ended.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.EffectVolume._id">
            <summary>
            Kept because lots of modders have been using this script in Unity,
            so removing legacy effect id would break their content.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Interactable.IDevkitSelectionTransformableHandler.transformSelection">
            <summary>
            Called when we position, rotate or scale this transform.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.Interactable.IDevkitSelectionCopyableHandler.copySelection">
            <returns>Identical to this object.</returns>
        </member>
        <member name="P:SDG.Framework.Devkit.DevkitHierarchyWorldObject.ShouldSave">
            <summary>
            Devkit objects are now converted to regular objects and excluded from the file when re-saving.
            </summary>
        </member>
        <member name="M:SDG.Framework.Devkit.DeadzoneVolumeManager.IsNavmeshCenterInsideAnyVolume(UnityEngine.Vector3)">
            <summary>
            Hacked to check horizontal distance.
            </summary>
        </member>
        <member name="F:SDG.Framework.Devkit.NPCRewardVolume._assetGuid">
            <summary>
            Nelson 2024-06-10: Changed this from guid to string because Unity serialization doesn't support guids
            and neither does the inspector. (e.g., couldn't duplicate reward volume without re-assigning guid)
            </summary>
        </member>
        <member name="T:SDG.Framework.Modules.IModuleNexus">
            <summary>
            ModuleHook looks for module entry/exit points, then calls <see cref="M:SDG.Framework.Modules.IModuleNexus.initialize"/> when enabled and <see cref="M:SDG.Framework.Modules.IModuleNexus.shutdown"/> when disabled.
            </summary>
        </member>
        <member name="M:SDG.Framework.Modules.IModuleNexus.initialize">
            <summary>
            Register components of this module.
            </summary>
        </member>
        <member name="M:SDG.Framework.Modules.IModuleNexus.shutdown">
            <summary>
            Cleanup after this module.
            </summary>
        </member>
        <member name="T:SDG.Framework.Modules.ModuleConfig">
            <summary>
            Holds module configuration.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.IsEnabled">
            <summary>
            Whether to load assemblies.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.DirectoryPath">
            <summary>
            Directory containing Module file, set when loading.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.FilePath">
            <summary>
            Path to the Module file, set when loading.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.Name">
            <summary>
            Used for module dependencies.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.Version">
            <summary>
            Nicely formatted version, converted into <see cref="F:SDG.Framework.Modules.ModuleConfig.Version_Internal"/>.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.Version_Internal">
            <summary>
            Used for module dependencies.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.Dependencies">
            <summary>
            Modules that must be loaded before this module.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleConfig.Assemblies">
            <summary>
            Relative file paths of .dlls to load.
            </summary>
        </member>
        <member name="T:SDG.Framework.Modules.Module">
            <summary>
            Wraps module assembly and handles initialization.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.Module._isEnabled">
            <summary>
            True when config is enabled and dependencies are enabled.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.Module.config">
            <summary>
            Metadata.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.Module.assemblies">
            <summary>
            Assembly files loaded.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.Module.types">
            <summary>
            Types in the assemblies of this module. Refer to this for types rather than the assemblies to avoid exception and garbage.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.Module.status">
            <summary>
            How far along the initialization to shutdown lifecycle this module is.
            </summary>
        </member>
        <member name="T:SDG.Framework.Modules.ModuleHook">
            <summary>
            Runs before everything else to find and load modules.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.ModuleHook.coreAssembly">
            <summary>
            Temporarily contains Unturned's code untils it's moved into modules.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.ModuleHook.coreTypes">
            <summary>
            Temporarily contains <see cref="P:SDG.Framework.Modules.ModuleHook.coreAssembly"/> types.
            </summary>
        </member>
        <member name="P:SDG.Framework.Modules.ModuleHook.shouldLoadModules">
            <summary>
            Should module assemblies be loaded?
            </summary>
        </member>
        <member name="E:SDG.Framework.Modules.ModuleHook.onModulesInitialized">
            <summary>
            Called once after all startup enabled modules are loaded. Not called when modules are initialized due to enabling/disabling.
            </summary>
        </member>
        <member name="E:SDG.Framework.Modules.ModuleHook.onModulesShutdown">
            <summary>
            Called once after all modules are shutdown. Not called when modules are shutdown due to enabling/disabling.
            </summary>
        </member>
        <member name="M:SDG.Framework.Modules.ModuleHook.getRequiredModules(System.Collections.Generic.List{SDG.Framework.Modules.Module})">
            <summary>
            Find modules containing an assembly with the Both_Required role.
            </summary>
            <param name="result">Modules to append to.</param>
        </member>
        <member name="M:SDG.Framework.Modules.ModuleHook.getModuleByName(System.String)">
            <summary>
            Find module using dependency name.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleHook.discoveredNameToPath">
            <summary>
            These are *.dll files discovered in the modules folder.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleHook.shouldLogAssemblyResolve">
            <summary>
            Should missing DLLs be logged?
            Opt-in because RocketMod has its own handler.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleHook.shouldSearchModulesForDLLs">
            <summary>
            Should vanilla search for *.dll files?
            Can be turned off in case it conflicts with third-party search mechanism.
            </summary>
        </member>
        <member name="E:SDG.Framework.Modules.ModuleHook.PreVanillaAssemblyResolve">
            <summary>
            Event for plugin frameworks (e.g., Rocket) to override AssemblyResolve handling.
            </summary>
        </member>
        <member name="M:SDG.Framework.Modules.ModuleHook.getModulesRootPath">
            <summary>
            Depending on the platform, assemblies are found in different directories.
            </summary>
            <returns>Root folder for modules.</returns>
        </member>
        <member name="M:SDG.Framework.Modules.ModuleHook.DiscoverAssemblies">
            <summary>
            Search Modules directory for .dll files and save their AssemblyName to discoveredNameToPath.
            </summary>
        </member>
        <member name="M:SDG.Framework.Modules.ModuleHook.findModules">
            <summary>
            Search Modules directory for .module files and load them.
            </summary>
        </member>
        <member name="M:SDG.Framework.Modules.ModuleHook.sortModules(System.Collections.Generic.List{SDG.Framework.Modules.ModuleConfig})">
            <summary>
            Orders configs by dependency and removes those that are missing files.
            </summary>
        </member>
        <member name="T:SDG.Framework.Modules.ModuleComparer">
            <summary>
            Sorts modules by dependencies.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleDependency.Version">
            <summary>
            Nicely formatted version, converted into <see cref="F:SDG.Framework.Modules.ModuleDependency.Version_Internal"/>.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleDependency.Version_Internal">
            <summary>
            Used for module dependencies.
            </summary>
        </member>
        <member name="F:SDG.Framework.Modules.ModuleAssembly.Load_As_Byte_Array">
            <summary>
            Requested by Trojaner. LoadFile locks the file while in use which prevents OpenMod from updating itself.
            </summary>
        </member>
        <member name="E:SDG.Framework.Utilities.TimeUtility.updated">
            <summary>
            Equivalent to MonoBehaviour.Update
            </summary>
        </member>
        <member name="E:SDG.Framework.Utilities.TimeUtility.physicsUpdated">
            <summary>
            Equivalent to MonoBehaviour.FixedUpdate
            </summary>
        </member>
        <member name="M:SDG.Framework.Utilities.TimeUtility.InvokeAfterDelay(System.Action,System.Single)">
            <summary>
            Useful when caller is not a MonoBehaviour, or coroutine should not be owned by a component which might get
            deactivated. For example attached effects destroy timer should happen regardless of parent deactivation.
            </summary>
        </member>
        <member name="M:SDG.Framework.Utilities.TimeUtility.StaticStopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stop a coroutine started by InvokeAfterDelay.
            </summary>
        </member>
        <member name="T:SDG.Framework.Utilities.IPoolable">
            <summary>
            For use with PoolablePool when no special construction is required.
            </summary>
        </member>
        <member name="M:SDG.Framework.Utilities.IPoolable.poolClaim">
            <summary>
            Called when this instance is getting claimed.
            </summary>
        </member>
        <member name="M:SDG.Framework.Utilities.IPoolable.poolRelease">
            <summary>
            Called when this instance is returned to the pool.
            </summary>
        </member>
        <member name="P:SDG.Framework.Utilities.Pool`1.count">
            <summary>
            Number of items in underlying queue.
            </summary>
        </member>
        <member name="T:SDG.Framework.Utilities.PoolablePool`1">
            <summary>
            Pool of objects that implement the IPoolable interface.
            
            Useful for types that do not need special construction,
            and want notification when claimed and released.
            </summary>
        </member>
        <member name="P:SDG.Framework.Utilities.IShapeVolume.worldBounds">
            <summary>
            Not necessarily cheap to calculate - probably best to cache.
            </summary>
        </member>
        <member name="P:SDG.Framework.Utilities.IShapeVolume.internalVolume">
            <summary>
            Internal cubic meter volume.
            </summary>
        </member>
        <member name="P:SDG.Framework.Utilities.IShapeVolume.surfaceArea">
            <summary>
            Surface square meters area.
            </summary>
        </member>
        <member name="P:SDG.Framework.Foliage.FoliageSurfaceComponent.IsValidFoliageSurface">
            <summary>
            Nelson 2024-11-11: Collider may have been destroyed by an unexpected mod script configuration (or perhaps
            simply missing in the first place). Should fix/prevent public issue #4749.
            </summary>
        </member>
        <member name="T:SDG.Framework.Foliage.FoliageStorageV2">
            <summary>
            Replacement foliage storage with all tiles in a single file.
            
            In the level editor all tiles are loaded into memory, whereas during gameplay the relevant tiles
            are loaded as-needed by a worker thread.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.FoliageStorageV2.WorkerThreadMain">
            <summary>
            Entry point for worker thread loop.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.mainThreadTilesWithRelevancyChanges">
            <summary>
            Order is important because TileBecameRelevant is called from the closest tile outward.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.tileBlobOffsets">
            <summary>
            Offsets into blob for per-tile data.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.assetsHeader">
            <summary>
            Tiles save an index into this list rather than guid.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.tileBlobHeaderOffset">
            <summary>
            Offset from header data.
            </summary>
        </member>
        <member name="T:SDG.Framework.Foliage.FoliageStorageV2.TilePerAssetData">
            <summary>
            Data-only FoliageInstanceList shared between threads.
            </summary>
        </member>
        <member name="T:SDG.Framework.Foliage.FoliageStorageV2.TileData">
            <summary>
            Data-only FoliageTile shared between threads.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.mainThreadTileDataFromPreviousUpdate">
            <summary>
            Ready to be released to the worker thread during the next lock.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.lockObject">
            <summary>
            Mutex lock. Only used in the main thread Update loop and worker thread loop.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.workerThreadTileQueue">
            <summary>
            SHARED BY BOTH THREADS!
            Coordinates requested by main thread for worker thread to read.
            This is a list because while main thread is busy the worker thread can continue reading.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.tileDataFromWorkerThread">
            <summary>
            SHARED BY BOTH THREADS!
            Tiles read by worker thread ready to be copied into actual foliage tiles on main thread.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.tileDataFromMainThread">
            <summary>
            SHARED BY BOTH THREADS!
            Main thread has finished using this tile data and it can be released back to the pool on the worker thread.
            This is a list because main thread could have populated multiple foliage tiles while the worker thread was busy reading.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageStorageV2.perAssetDataPool">
            <summary>
            Lifecycle:
            1. Worker thread claims or allocates data.
            2. Worker thread passes data to main thread.
            3. Main thread copies data over to actual foliage tile.
            4. Main thread passes data back to worker thread.
            5. Worker thread releases data back to pool.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.FoliageTile.isEmpty">
            <summary>
            Does this tile contain any placed foliage?
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageInstancedMeshInfoAsset.christmasRedirect">
            <summary>
            Foliage to use during the Christmas event instead.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageInstancedMeshInfoAsset.halloweenRedirect">
            <summary>
            Foliage to use during the Halloween event instead.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.FoliageInstancedMeshInfoAsset.getHolidayRedirect">
            <summary>
            Get asset ref to replace this one for holiday, invalid to disable, or null if it should not be redirected.
            </summary>
        </member>
        <member name="T:SDG.Framework.Foliage.IFoliageStorage">
            <summary>
            Responsible for reading and writing persistent foliage data.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.Initialize">
            <summary>
            Called after creating instance for level, prior to any loading.
            Not called when creating the auto-upgrade instance for editorSaveAllTiles.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.Shutdown">
            <summary>
            Called prior to destroying instance.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.TileBecameRelevantToViewer(SDG.Framework.Foliage.FoliageTile)">
            <summary>
            Called when tile wants to be drawn.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.TileNoLongerRelevantToViewer(SDG.Framework.Foliage.FoliageTile)">
            <summary>
            Called when tile no longer wants to be drawn.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.Update">
            <summary>
            Called during Unity's Update loop.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.EditorLoadAllTiles(System.Collections.Generic.IEnumerable{SDG.Framework.Foliage.FoliageTile})">
            <summary>
            Load known tiles during level load.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.IFoliageStorage.EditorSaveAllTiles(System.Collections.Generic.IEnumerable{SDG.Framework.Foliage.FoliageTile})">
            <summary>
            Save tiles during level save. 
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.FoliageInfoAsset.addFoliageToSurface(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <param name="followRules">Should angle limits and subtractive volumes be respected? Disabled when manually placing individually.</param>
        </member>
        <member name="M:SDG.Framework.Foliage.FoliageInfoAsset.getTestPosition(UnityEngine.Bounds)">
            <summary>
            Pick a point inside the bounds to test for foliage placement. The base implementation is completely random, but a blue noise implementation could be very nice.
            </summary>
        </member>
        <member name="T:SDG.Framework.Foliage.FoliageStorageV1">
            <summary>
            Legacy implementation of foliage storage, with one file per tile.
            </summary>
        </member>
        <member name="P:SDG.Framework.Foliage.IFoliageSurface.IsValidFoliageSurface">
            <returns>True if other IFoliageSurface methods can be called.</returns>
        </member>
        <member name="P:SDG.Framework.Foliage.FoliageSystem.bakeSettings">
            <summary>
            Settings configured when starting the bake.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageSystem.storage">
            <summary>
            Implementation of tile data storage.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageSystem.DRAW_OFFSETS">
            <summary>
            2022-04-26: drawTiles previously looped over a square [-N, +N] from the upper-left to the bottom-right,
            and each tile checked radial distance. We can improve over this by pre-computing the radial offsets and
            starting from the center to improve responsiveness. N is [1, 5]
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageSystem.version">
            <summary>
            Version number associated with this particular system instance.
            </summary>
        </member>
        <member name="M:SDG.Framework.Foliage.FoliageSystem.tickBakeQueue">
            <summary>
            Automatically placing foliage onto tiles in editor.
            </summary>
        </member>
        <member name="F:SDG.Framework.Foliage.FoliageSystem.foliageRenderLayer">
            <summary>
            2022-04-26: this used to be environment layer, but "scope focus foliage" can draw outside that render distance
            so we now use the sky layer which is visible up to the far clip plane.
            </summary>
        </member>
        <member name="P:SDG.Framework.Debug.InspectableList`1.canInspectorAdd">
            <summary>
            Whether add can be called from the inspector.
            </summary>
        </member>
        <member name="P:SDG.Framework.Debug.InspectableList`1.canInspectorRemove">
            <summary>
            Whether remove can be called from the inspector.
            </summary>
        </member>
        <member name="M:SDG.Framework.Debug.IInspectableList.inspectorAdd(System.Object)">
            <summary>
            Called when the inspector adds an element.
            </summary>
        </member>
        <member name="M:SDG.Framework.Debug.IInspectableList.inspectorRemove(System.Object)">
            <summary>
            Called when the inspector removes an element.
            </summary>
        </member>
        <member name="M:SDG.Framework.Debug.IInspectableList.inspectorSet(System.Int32)">
            <summary>
            Called when the inspector sets an element to a different value.
            </summary>
        </member>
        <member name="P:SDG.Framework.Debug.IInspectableList.canInspectorAdd">
            <summary>
            Whether add can be called from the inspector.
            </summary>
        </member>
        <member name="P:SDG.Framework.Debug.IInspectableList.canInspectorRemove">
            <summary>
            Whether remove can be called from the inspector.
            </summary>
        </member>
        <member name="F:SDG.Framework.Water.WaterVolume.sharedMaterial">
            <summary>
            All water tiles and the planar reflection component reference this material.
            </summary>
        </member>
        <member name="P:SDG.Framework.Water.WaterVolume.isSeaLevel">
            <summary>
            If true rain will be occluded below the surface on the Y axis.
            </summary>
        </member>
        <member name="F:SDG.Framework.Water.WaterVolume.isManagedByLighting">
            <summary>
            Flag for legacy sea level.
            </summary>
        </member>
        <member name="F:SDG.Framework.Water.WaterVolumeManager.seaLevelVolume">
            <summary>
            Water volume marked as being sea level.
            </summary>
        </member>
        <member name="M:SDG.Framework.Water.WaterUtility.isPointUnderwater(UnityEngine.Vector3,SDG.Framework.Water.WaterVolume@)">
            <param name="volume">Null if under old water level, otherwise the volume.</param>
        </member>
        <member name="M:SDG.Framework.Water.WaterUtility.getWaterSurfaceElevation(UnityEngine.Vector3)">
            <summary>
            Find the water elevation underneath point, or above point if underwater.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Cloud.ICloudService.read(System.String,System.Byte[])">
            <summary>
            Reads data into the data array.
            </summary>
            <param name="path">The file path to read from.</param>
            <param name="data">The array to read into.</param>
            <returns>Whether the read succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Cloud.ICloudService.write(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes data out of data array.
            </summary>
            <param name="path">The file path to write to.</param>
            <param name="data">The array to write from.</param>
            <param name="size">The length of the array with data.</param>
            <returns>Whether the write succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Cloud.ICloudService.getSize(System.String,System.Int32@)">
            <summary>
            Checks the size of a file.
            </summary>
            <param name="path">The file path to check.</param>
            <param name="size">The size of the file.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Cloud.ICloudService.exists(System.String,System.Boolean@)">
            <summary>
            Checks whether the path already exists.
            </summary>
            <param name="path">The file path to check.</param>
            <param name="exists">Whether the file exists.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Cloud.ICloudService.delete(System.String)">
            <summary>
            Deletes the path.
            </summary>
            <param name="path">The file path to delete.</param>
            <returns>Whether the deletion succesfully executed.</returns>
        </member>
        <member name="T:SDG.Provider.Services.Cloud.DebugCloudService">
            <summary>
            For once the provider interface actually came in useful!
            Fakes loading the Steam remote storage files from a separate folder.
            </summary>
        </member>
        <member name="E:SDG.Provider.Services.Statistics.User.IUserStatisticsService.onUserStatisticsRequestReady">
            <summary>
            Triggered when the user's statistics are available.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.User.IUserStatisticsService.getStatistic(System.String,System.Int32@)">
            <summary>
            Checks the current user's statistics with this name.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="data">The value of the statistic.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.User.IUserStatisticsService.setStatistic(System.String,System.Int32)">
            <summary>
            Assigns the current user's statistics with this name.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="data">The value of the statistic.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.User.IUserStatisticsService.getStatistic(System.String,System.Single@)">
            <summary>
            Checks the current user's statistics with this name.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="data">The value of the statistic.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.User.IUserStatisticsService.setStatistic(System.String,System.Single)">
            <summary>
            Assigns the current user's statistics with this name.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="data">The value of the statistic.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.User.IUserStatisticsService.requestStatistics">
            <summary>
            Requests the user's statistics.
            </summary>
            <returns>Whether the refresh succesfully executed.</returns>
        </member>
        <member name="E:SDG.Provider.Services.Statistics.Global.IGlobalStatisticsService.onGlobalStatisticsRequestReady">
            <summary>
            Triggered when the global statistics are available.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.Global.IGlobalStatisticsService.getStatistic(System.String,System.Int64@)">
            <summary>
            Checks the global total of the statistic with this name.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="data">The value of the statistic.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.Global.IGlobalStatisticsService.getStatistic(System.String,System.Double@)">
            <summary>
            Checks the global total of the statistic with this name.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="data">The value of the statistic.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Statistics.Global.IGlobalStatisticsService.requestStatistics">
            <summary>
            Requests the global statistics.
            </summary>
            <returns>Whether the refresh succesfully executed.</returns>
        </member>
        <member name="P:SDG.Provider.Services.Statistics.IStatisticsService.userStatisticsService">
            <summary>
            Current user statistics implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Statistics.IStatisticsService.globalStatisticsService">
            <summary>
            Current global statistics implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.IMultiplayerService.clientMultiplayerService">
            <summary>
            Current client multiplayer implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.IMultiplayerService.serverMultiplayerService">
            <summary>
            Current server multiplayer implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.serverInfo">
            <summary>
            Information about currently connected server.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.isConnected">
            <summary>
            Whether a server is currently connected to.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.isAttempting">
            <summary>
            Whether connection attempts are being made.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.stream">
            <summary>
            Network buffer memory stream.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.reader">
            <summary>
            Network buffer memory stream reader.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.writer">
            <summary>
            Network buffer memory stream writer.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.connect(SDG.Provider.Services.Multiplayer.IServerInfo)">
            <summary>
            Connect to a server.
            </summary>
            <param name="newServerInfo">Server to join.</param>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.disconnect">
            <summary>
            Disconnect from current server.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.read(SDG.Provider.Services.Community.ICommunityEntity@,System.Byte[],System.UInt64@,System.Int32)">
            <summary>
            Receive a packet from an entity across the network.
            </summary>
            <param name="entity">Sender of data.</param>
            <param name="data"></param>
            <param name="length"></param>
            <returns>Whether any data was read.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.write(SDG.Provider.Services.Community.ICommunityEntity,System.Byte[],System.UInt64)">
            <summary>
            Send a packet to an entity across the network.
            </summary>
            <param name="entity">Recipient of data.</param>
            <param name="data">Packet to send.</param>
            <param name="length">Size of data in array.</param>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Client.IClientMultiplayerService.write(SDG.Provider.Services.Community.ICommunityEntity,System.Byte[],System.UInt64,SDG.Provider.Services.Multiplayer.ESendMethod,System.Int32)">
            <summary>
            Send a packet to an entity across the network.
            </summary>
            <param name="entity">Recipient of data.</param>
            <param name="data">Packet to send.</param>
            <param name="length">Size of data in array.</param>
            <param name="method">Type of send to use.</param>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.serverInfo">
            <summary>
            Information about currently hosted server.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.isHosting">
            <summary>
            Whether a server is open.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.stream">
            <summary>
            Network buffer memory stream.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.reader">
            <summary>
            Network buffer memory stream reader.
            </summary>
        </member>
        <member name="P:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.writer">
            <summary>
            Network buffer memory stream writer.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.open(System.UInt32,System.UInt16,SDG.Provider.Services.Multiplayer.ESecurityMode)">
            <summary>
            Open a new server.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.close">
            <summary>
            Close an existing server.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.read(SDG.Provider.Services.Community.ICommunityEntity@,System.Byte[],System.UInt64@,System.Int32)">
            <summary>
            Receive a packet from an entity across the network.
            </summary>
            <param name="entity">Sender of data.</param>
            <param name="data"></param>
            <param name="length"></param>
            <returns>Whether any data was read.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.write(SDG.Provider.Services.Community.ICommunityEntity,System.Byte[],System.UInt64)">
            <summary>
            Send a packet to an entity across the network.
            </summary>
            <param name="entity">Recipient of data.</param>
            <param name="data">Packet to send.</param>
            <param name="length">Size of data in array.</param>
        </member>
        <member name="M:SDG.Provider.Services.Multiplayer.Server.IServerMultiplayerService.write(SDG.Provider.Services.Community.ICommunityEntity,System.Byte[],System.UInt64,SDG.Provider.Services.Multiplayer.ESendMethod,System.Int32)">
            <summary>
            Send a packet to an entity across the network.
            </summary>
            <param name="entity">Recipient of data.</param>
            <param name="data">Packet to send.</param>
            <param name="length">Size of data in array.</param>
            <param name="method">Type of send to use.</param>
        </member>
        <member name="P:SDG.Provider.Services.Economy.IEconomyService.canOpenInventory">
            <summary>
            Whether the user has their overlay enabled.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Economy.IEconomyService.requestInventory(SDG.Provider.Services.Economy.EconomyRequestReadyCallback)">
            <summary>
            Requests the user's inventory.
            </summary>
            <param name="economyRequestReadyCallback">Called when the request is completed.</param>
            <returns>Handle for checking the owner of the callback.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Economy.IEconomyService.requestPromo(SDG.Provider.Services.Economy.EconomyRequestReadyCallback)">
            <summary>
            Requests a check for promotional items.
            </summary>
            <param name="economyRequestReadyCallback">Called when the request is completed.</param>
            <returns>Handle for checking the owner of the callback.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Economy.IEconomyService.exchangeItems(SDG.Provider.Services.Economy.IEconomyItemInstance[],System.UInt32[],SDG.Provider.Services.Economy.IEconomyItemDefinition[],System.UInt32[],SDG.Provider.Services.Economy.EconomyRequestReadyCallback)">
            <summary>
            Converts the input items into the output items.
            </summary>
            <param name="inputItemInstanceIDs">Items to be converted from.</param>
            <param name="inputItemQuantities">Item amounts to be consumed.</param>
            <param name="outputItemDefinitionIDs">Items to be converted to.</param>
            <param name="outputItemQuantities">Item amounts to be generated.</param>
            <param name="economyRequestReadyCallback">Called when the exchange is completed.</param>
        </member>
        <member name="P:SDG.Provider.Services.Browser.IBrowserService.canOpenBrowser">
            <summary>
            Whether the user has their overlay enabled.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.Store.IStoreService.open(SDG.Provider.Services.Store.IStorePackageID)">
            <summary>
            View a package on the store.
            </summary>
            <param name="packageID">Package to view.</param>
        </member>
        <member name="M:SDG.Provider.Services.Achievements.IAchievementsService.getAchievement(System.String,System.Boolean@)">
            <summary>
            Checks whether the current user has an achievement with this name.
            </summary>
            <param name="name">The name of the achievement.</param>
            <param name="has">Whether the user has this achievement.</param>
            <returns>Whether the check succesfully executed.</returns>
        </member>
        <member name="M:SDG.Provider.Services.Achievements.IAchievementsService.setAchievement(System.String)">
            <summary>
            Assigns the current user an achievement with this name.
            </summary>
            <param name="name">The name of the achievement.</param>
            <returns>Whether the assignment succesfully executed.</returns>
        </member>
        <member name="P:SDG.Provider.Services.Workshop.IWorkshopService.canOpenWorkshop">
            <summary>
            Whether the user has their overlay enabled.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.IService.initialize">
            <summary>
            Initialize this service's external API. Should be called before using.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.IService.update">
            <summary>
            Update this service's external API. Should be called every frame.
            </summary>
        </member>
        <member name="M:SDG.Provider.Services.IService.shutdown">
            <summary>
            Shutdown this service's external API. Should be called before closing the program.
            </summary>
        </member>
        <member name="P:SDG.Provider.TempSteamworksMatchmaking.CuratorBlockedServerCount">
            <summary>
            Used to show a warning when a lot of servers are blocked by curation list.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksMatchmaking.autoJoinServerQuery">
            <summary>
            Reset after starting connection attempt, so set to true afterwards to auto join the server.
            </summary>
        </member>
        <member name="F:SDG.Provider.UnturnedEconInfo.econ_type">
            <summary>
            EItemType
            </summary>
        </member>
        <member name="F:SDG.Provider.UnturnedEconInfo.creationTimeUtc">
            <summary>
            Nelson 2024-12-06: This was added 2023-06-19, so unfortunately it will be inaccurate for older items.
            </summary>
        </member>
        <member name="T:SDG.Provider.UnturnedEconInfo.ERarity">
            <summary>
            This enum exists for sorting items based on rarity, and is derived from quality.
            Quality order cannot be changed due to loading from older files, but this one is ordered
            from lowest rarity to highest rarity and should match entries in quality.
            </summary>
        </member>
        <member name="T:SDG.Provider.SteamGetInventoryResponse">
             <summary>
             Response data from IInventoryService GetInventory web API.
            
             One player's inventory became so large that the Steam client's built-in GetInventory fails,
             so as temporary fix we can send them a json file with their inventory.
             </summary>
        </member>
        <member name="F:SDG.Provider.SteamGetInventoryResponse.InnerResponse.item_json">
            <summary>
            Json string representation of the contained items.
            </summary>
        </member>
        <member name="M:SDG.Provider.SteamGetInventoryResponse.parse(System.String)">
            <summary>
            Parse response from json file.
            </summary>
        </member>
        <member name="T:SDG.Provider.CachedUGCDetails">
            <summary>
            Details of a workshop item that the game may want to refer to later.
            Cached during client startup after getting installed items, and while
            downloading UGC for the dedicated server.
            </summary>
        </member>
        <member name="F:SDG.Provider.CachedUGCDetails.isBannedOrPrivate">
            <summary>
            Banned workshop files are shown in red.
            </summary>
        </member>
        <member name="F:SDG.Provider.CachedUGCDetails.updateTimestamp">
            <summary>
            Used on dedicated server to test whether map has been updated, and whether local copy of file is out-of-date.
            </summary>
        </member>
        <member name="M:SDG.Provider.CachedUGCDetails.GetTitle">
            <summary>
            Some workshop thieves use an empty title, in which case we show the file ID as title text.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.COMPATIBILITY_VERSION">
            <summary>
            Used when transitioning Unity versions breaks asset bundles. Replaced by AssetBundleVersion const values.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.COMPATIBILITY_VERSION_KVTAG">
            <summary>
            Workshop item key-value tag storing the version number.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.cachedUGCDetails">
            <summary>
            Maps published file id to name, version, etc.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.getCompatibilityVersion(Steamworks.UGCQueryHandle_t,System.UInt32)">
            <summary>
            Get compatibility version from workshop query, or zero if unset.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.cacheDetails(Steamworks.UGCQueryHandle_t,System.UInt32,SDG.Provider.CachedUGCDetails@)">
            <summary>
            Save the details from a workshop query for lookup later.
            Allows game to inspect the installed files before deciding if they are
            compatible, since maps and localization are not affected by unity upgrades.
            Previously the compatibility test occurred before downloading the content.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.getCachedDetails(Steamworks.PublishedFileId_t,SDG.Provider.CachedUGCDetails@)">
            <summary>
            Get cached workshop item details.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.shouldIgnoreFile(Steamworks.PublishedFileId_t,System.String@)">
            <summary>
            Should caller skip loading a given workshop file?
            
            Used to skip workshop version of map if the map is locally installed,
            e.g. Canyon Arena moved to workshop and auto-subscribed.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.enqueueServerItemDownloadOrInstallFromCache(Steamworks.PublishedFileId_t)">
            <summary>
            Helper for downloadServerItems.
            Called for each workshop item we want to download for the server.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.downloadServerItems(System.Collections.Generic.List{Steamworks.PublishedFileId_t})">
            <summary>
            Called once we know which items the server is allowed to use (queryServerItems),
            or the query has failed in which case we proceed with all items it told us.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.testDownloadRestrictions(Steamworks.UGCQueryHandle_t,System.UInt32,System.UInt32,System.String)">
            <summary>
            Is currently connected server allowed to auto-download the workshop item?
            Requested by mod authors so that they can whitelist/blacklist access.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.handleServerItemsQuerySuccess(Steamworks.SteamUGCQueryCompleted_t)">
            <summary>
            Successfully queried details of the items current server is using.
            Ensure server has permission to use these items, then proceed with downloading.
            Also caches item titles for use on the loading screen.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.handleServerItemsQueryFailed">
            <summary>
            IO or bad result occurred when querying items the current server is using.
            We do not know the file details, but we proceed with downloading them all.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.serverPendingIDs">
            <summary>
            File IDs the client knows the server is using. Fallback in-case the query fails.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.serverDownloadIP">
            <summary>
            IP of the currently connected server, or zero if unable to retrieve from network system.
            Used for testing download restrictions.
            </summary>
        </member>
        <member name="P:SDG.Provider.TempSteamworksWorkshop.serverInvalidItemsCount">
            <summary>
            Number of items currently connected server was not authorized to download.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.resetServerInvalidItems">
            <summary>
            Called prior to downloading, and after a connection failure.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.queryServerWorkshopItems(System.Collections.Generic.List{Steamworks.PublishedFileId_t},System.UInt32)">
            <summary>
            Client now knows the published file IDs the server is using, but
            queries the workshop for additional information before installing.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.itemInstalled">
            <summary>
            Callback when player subscribes to an item and it finishes downloading.
            Different than the game-managed DownloadItem calls.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.getInstalledItemPath(Steamworks.PublishedFileId_t,System.String@)">
            <summary>
            Get path to an already-installed workshop item.
            </summary>
            <returns>True if the path was found.</returns>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.registerInstalledItem(Steamworks.PublishedFileId_t)">
            <summary>
            Used during startup to register subscribed workshop items.
            Given a workshop item file id, if its files exist on disk then register it.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.locallySubscribedFileIds">
            <summary>
            Workshop file ids we were locally subscribed to during startup.
            These items are queried for compatibility before registering.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.handleSubscribedItemsCallbackSuccess(Steamworks.SteamUGCQueryCompleted_t)">
            <summary>
            Called when subscribed items callback was successful to register all compatible files.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.handleSubscribedItemsCallbackFailed">
            <summary>
            Called when subscribed items callback did not execute as expected,
            maybe because steam's servers are offline. In this case we can't check
            compatibility so we register all the locally subscribed items as compatible.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.registerLocalizations">
            <summary>
            Register any localization-type workshop content before waiting for the steam callbacks.
            Important so that localizations are available for loading screens and whatnot during startup.
            Any items we register now will be skipped later.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.shouldIgnoreSubscribedItems">
            <summary>
            If specified, player's workshop file subscriptions are not registered at startup.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksWorkshop.ingameSubscriptions">
            <summary>
            Map of subscriptions added/removed by the player through the in-game client API, as opposed to the web browser.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksWorkshop.gameSubscribed(Steamworks.PublishedFileId_t)">
            <summary>
            Called by us when we subscribe to an item from in-game.
            If item already exists on-disk steam doesn't always call onItemInstalled, so we do our own check and potentially load.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.achievementsService">
            <summary>
            Current achievements implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.browserService">
            <summary>
            Current browser implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.cloudService">
            <summary>
            Current cloud implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.communityService">
            <summary>
            Current community implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.economyService">
            <summary>
            Current economy implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.matchmakingService">
            <summary>
            Current matchmaking implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.multiplayerService">
            <summary>
            Current multiplayer implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.statisticsService">
            <summary>
            Current statistics implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.storeService">
            <summary>
            Current store implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.translationService">
            <summary>
            Current translation implementation.
            </summary>
        </member>
        <member name="P:SDG.Provider.IProvider.workshopService">
            <summary>
            Current workshop implementation.
            </summary>
        </member>
        <member name="M:SDG.Provider.IProvider.intialize">
            <summary>
            Initialize this provider's external API. Should be called before using provider features.
            </summary>
            <exception cref="T:System.Exception">Thrown if initializing fails.</exception>
        </member>
        <member name="M:SDG.Provider.IProvider.update">
            <summary>
            Update this provider's external API. Should be called every frame if using provider features.
            </summary>
        </member>
        <member name="M:SDG.Provider.IProvider.shutdown">
            <summary>
            Shutdown this provider's external API. Should be called before closing the program if using provider features.
            </summary>
        </member>
        <member name="M:SDG.Provider.DynamicEconDetails.getParticleEffect">
            <summary>
            Parse dynamic tag mythic effect.
            </summary>
            <returns>ID of mythical asset, or zero if not in tags.</returns>
        </member>
        <member name="F:SDG.Provider.TempSteamworksEconomy.bundleContents">
            <summary>
            For purchasable box and bundle itemdefs this maps their itemdefid to the list of itemdefids in their desc.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksEconomy.onInventoryExchanged">
            <summary>
            Invoked after a successful exchange with the newly granted items.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksEconomy.onInventoryPurchased">
            <summary>
            Invoke after a succesful purchase from the item store.
            </summary>
        </member>
        <member name="F:SDG.Provider.TempSteamworksEconomy.isExpectingPurchaseResult">
            <summary>
            Purchase result does not have a handle, so we guess based on when it arrives.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.getInventoryPackage(System.Int32)">
            <summary>
            Find the first instanceId of a given itemDefId.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.countInventoryPackages(System.Int32)">
            <summary>
            Count quantity of a given itemDefId.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.getInventoryPackages(System.Int32,System.UInt16,System.Collections.Generic.List{SDG.Provider.EconExchangePair}@)">
            <summary>
            Find certain quantity of given itemDefId.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.IsItemKnown(System.Int32)">
            <summary>
            Does itemdefid exist in the EconInfo.json file?
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.getScrapExchangeItem(System.Int32)">
            <summary>
            Get item with an exchange recipe for the appropriate number of scraps.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.GetBundleContents(System.Int32)">
            <summary>
            Get list of itemdefids mentioned in purchasable box or bundle item description.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.loadInventoryFromResponseFile(System.String)">
            <summary>
            One player's inventory became so large that the Steam client's built-in GetInventory fails,
            so as temporary fix we can send them a json file with their inventory.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.addLocalItem(Steamworks.SteamItemDetails_t,System.String,System.String)">
            <summary>
            Add an item locally that we know exists in the online inventory, but is just a matter of waiting for it.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.removeLocalItem(Steamworks.SteamItemDetails_t)">
            <summary>
            Remove an item locally that we know no longer exists in the online inventory.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.updateLocalItem(Steamworks.SteamItemDetails_t,Steamworks.SteamInventoryResult_t,System.UInt32)">
            <summary>
            Update our local version of an item that we know has changed, but we are waiting for a full refresh.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.handleClientExchangeResultReady(Steamworks.SteamInventoryResultReady_t)">
            <summary>
            Callback when client knows which items were crafted or exchanged.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.handleClientPurchaseResultReady(Steamworks.SteamInventoryResultReady_t)">
            <summary>
            Callback when client thinks result was from purchase.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.UpdateLocalItemsFromUnknownResult(Steamworks.SteamInventoryResult_t)">
            <summary>
            2022-01-01 it does not seem to be documented by Steam, but we get SteamInventoryResultReady callbacks
            for external events like AddItem calls, so we may as well handle them.
            </summary>
        </member>
        <member name="P:SDG.Provider.TempSteamworksEconomy.hasCountryDetails">
            <summary>
            Do we know the player's region?
            If not, default to not allowing random items.
            </summary>
        </member>
        <member name="P:SDG.Provider.TempSteamworksEconomy.doesCountryAllowRandomItems">
            <summary>
            Does the player's region allow crates and keys to be used?
            Similar to TF2 and other Valve games we disable unboxing in certain regions.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.getCountryWarningId">
            <summary>
            If player's region does not allow crates and keys to be used, return the country code.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.isItemHiddenByCountryRestrictions(System.Int32)">
            <summary>
            Similar to TF2 and other Valve games we disable unboxing in certain regions, so hide those items.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.initCountryRestrictions">
            <summary>
            Similar to TF2 and other Valve games we disable unboxing in certain regions.
            </summary>
        </member>
        <member name="M:SDG.Provider.TempSteamworksEconomy.initializeClient">
            <summary>
            Not called on dedicated server.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.SteamNetworkingSockets.TransportConnection_SteamNetworkingSockets">
            <summary>
            Implementing as a struct wrapping the connection handle would remove the cost of looking up the connection,
            but implementing as a class makes it cheap to cache information like the remote identity.
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.ServerTransport_SteamNetworkingSockets.FindConnection(Steamworks.HSteamNetConnection)">
            <summary>
            Find game connection associated with Steam connection.
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.ServerTransport_SteamNetworkingSockets.HandleState_ClosedByPeer(Steamworks.SteamNetConnectionStatusChangedCallback_t@)">
            <summary>
            Must close the handle to free up resources.
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.ServerTransport_SteamNetworkingSockets.HandleState_ProblemDetectedLocally(Steamworks.SteamNetConnectionStatusChangedCallback_t@)">
            <summary>
            Must close the handle to free up resources.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.ServerTransport_SteamNetworkingSockets.clUseIpSocket">
            <summary>
            Defaults to true. If false, skip Steam Networking Sockets creation of regular IP socket.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.ServerTransport_SteamNetworkingSockets.clUseP2pSocket">
            <summary>
            Defaults to true. If false, skip Steam Networking Sockets creation of non-FakeIP P2P socket.
            (this is the socket used by "server codes")
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.ClientTransport_SteamNetworkingSockets.HandleState_ClosedByPeer(Steamworks.SteamNetConnectionStatusChangedCallback_t@)">
            <summary>
            Must close the handle to free up resources.
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.ClientTransport_SteamNetworkingSockets.HandleState_ProblemDetectedLocally(Steamworks.SteamNetConnectionStatusChangedCallback_t@)">
            <summary>
            Must close the handle to free up resources.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.ClientTransport_SteamNetworkingSockets.messageAddresses">
            <summary>
            Recycled array for every read call.
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.DebugLog(System.String,System.Object[])">
            <summary>
            Log verbose information that should not be included in release builds.
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.Log(System.String,System.Object[])">
            <summary>
            Log helpful information that should be included in release builds.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.clAllowWithoutAuth">
            <summary>
            Should certificate authentication be disabled for UDP connections?
            </summary>
        </member>
        <member name="M:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.OnDebugOutput(Steamworks.ESteamNetworkingSocketsDebugOutputType,System.IntPtr)">
            <summary>
            This callback may be called from a service thread. It must be threadsafe and fast! Do not make any other
            Steamworks calls from within the handler.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.debugOutputFunc">
            <summary>
            Thanks DiFFoZ! Ensures GC does not release the delegate.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.clLogSteamNetworkingSockets">
            <summary>
            Does host want extra debug output?
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.clSendBufferSize">
            <summary>
            Overrides k_ESteamNetworkingConfig_SendBufferSize.
            </summary>
        </member>
        <member name="F:SDG.NetTransport.SteamNetworkingSockets.TransportBase_SteamNetworkingSockets.clEnableDiagnosticsUI">
            <summary>
            Overrides k_ESteamNetworkingConfig_EnableDiagnosticsUI.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.SystemSockets.ServerTransport_SystemSockets">
            <summary>
            Implementation using .NET Berkeley sockets.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.SystemSockets.SocketMessageLayer">
            <summary>
            Implements message boundaries on top of a TCP stream socket.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.SystemSockets.ClientTransport_SystemSockets">
            <summary>
            Implementation using .NET Berkeley sockets.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.SteamNetworking.ClientTransport_SteamNetworking">
            <summary>
            SteamNetworking is deprecated.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.SteamNetworking.ServerTransport_SteamNetworking">
            <summary>
            SteamNetworking is deprecated.
            </summary>
        </member>
        <member name="T:SDG.NetTransport.Loopback.TransportConnection_Loopback">
            <summary>
            Dummy connection used in singleplayer.
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.wasHitInitialOverlap(UnityEngine.RaycastHit,System.Int32)">
            <summary>
            Does initialOverlaps array contain hit collider?
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.wereAllHitsInitialOverlaps(System.Int32,System.Int32)">
            <summary>
            Does initialOverlaps array contain every hit collider?
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.CheckedMove(UnityEngine.CharacterController,UnityEngine.Vector3)">
            <summary>
            Perform a move, then do a capsule cast to determine if Unity PhysX went through a wall.
            
            Required when disabling overlap recovery because there are issues when walking toward slopes that bend inward.
            To test if Unity works properly in the future; walk toward the inside of a barracks building in the PEI base.
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.DisableDetectCollisions(UnityEngine.CharacterController)">
            <summary>
            Set detectCollisions to false and cancel deferred requests to enable.
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.EnableDetectCollisionsNextFrame(UnityEngine.CharacterController)">
            <summary>
            Set detectCollisions to true on the next frame.
            Useful when CharacterController is teleported to prevent adding huge forces to overlapping rigidbodies.
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.SetDetectCollisionsDeferred(UnityEngine.CharacterController,System.Boolean)">
            <summary>
            If true EnableDetectCollisionsNextFrame, if false DisableDetectCollisions.
            </summary>
        </member>
        <member name="M:UnityEngine.CharacterControllerExtension.OnUpdate">
            <summary>
            Intentionally Update, not FixedUpdate. Physics transforms are applied between frames, whereas at low frame
            rates there may be multiple FixedUpdates per frame.
            </summary>
        </member>
        <member name="T:EditorScreenCaptureComponent">
             <summary>
             Used to capture promotional images.
            
             Unity does not allow components in the editor assembly, so this component is in the game assembly but only compiled in the editor.
             </summary>
        </member>
        <member name="T:EditorInstancingComparison">
             <summary>
             Test to compare differrent Unity instancing meshes.
            
             Unity does not allow components in the editor assembly, so this component is in the game assembly but only compiled in the editor.
             </summary>
        </member>
        <member name="T:DestroyMaterialOnDestroy">
            <summary>
            Hacky workaround to fix item skin material leak. Unfortunately none of the original item skin code destroyed
            instantiated materials, and did not keep a reference to the instantiated materials, so until that code gets a
            rewrite this will take care of cleanup.
            </summary>
        </member>
        <member name="T:RandomConeTest">
            <summary>
            Debug component in the editor to see if GetRandomForwardVectorInCone seems correct. :)
            Not much of a mathematician. :(
            </summary>
        </member>
    </members>
</doc>
